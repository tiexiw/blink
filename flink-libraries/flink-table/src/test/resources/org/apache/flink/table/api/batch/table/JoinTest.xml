<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testFullJoinNoEquiJoinPredicate">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[<($6, $0)], joinType=[full])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(where=[<(b, d)], join=[d, g, b, c], joinType=[FullOuterJoin], build=[left])
   :- Exchange(distribution=[single])
   :  +- Calc(select=[d, g])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[d, e, f, g, h])
   +- Exchange(distribution=[single])
      +- Calc(select=[b, c])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinEquiAndLocalPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[AND(=($0, $5), <($1, 2))], joinType=[full])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[AND(=(a, z), $f3)], join=[a, b, $f3, y, z], joinType=[FullOuterJoin], build=[left])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b, <(b, 2) AS $f3])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[hash[z]])
      +- Calc(select=[y, z])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinEquiAndNonEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[AND(=($0, $5), <($1, $3))], joinType=[full])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[AND(=(a, z), <(b, x))], join=[a, b, x, y, z], joinType=[FullOuterJoin], build=[left])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[hash[z]])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[=($0, $5)], joinType=[full])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[=(a, z)], join=[a, b, y, z], joinType=[FullOuterJoin], build=[left])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[hash[z]])
      +- Calc(select=[y, z])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftJoinNoEquiJoinPredicate">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[<($6, $0)], joinType=[left])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(where=[<(b, d)], join=[d, g, b, c], joinType=[LeftOuterJoin], build=[right])
   :- Calc(select=[d, g])
   :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[d, e, f, g, h])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[b, c])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinEquiAndLocalPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[AND(=($0, $5), <($1, 2))], joinType=[left])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[AND(=(a, z), $f3)], join=[a, b, $f3, y, z], joinType=[LeftOuterJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b, <(b, 2) AS $f3])
   :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[y, z])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinEquiAndNonEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[AND(=($0, $5), <($1, $3))], joinType=[left])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[AND(=(a, z), <(b, x))], join=[a, b, x, y, z], joinType=[LeftOuterJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b])
   :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[=($0, $5)], joinType=[left])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[=(a, z)], join=[a, b, y, z], joinType=[LeftOuterJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b])
   :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[y, z])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoEqualityJoinPredicate1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalFilter(condition=[=($3, $5)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
      +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[c, g], joinType=[InnerJoin], build=[right])
:- Calc(select=[c])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[g], where=[=(d, f)])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoEqualityJoinPredicate2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalFilter(condition=[<($0, $3)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
      +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(where=[<(a, d)], join=[a, c, d, g], joinType=[InnerJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, c])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Calc(select=[d, g])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightJoinNoEquiJoinPredicate">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[<($6, $0)], joinType=[right])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(where=[<(b, d)], join=[d, g, b, c], joinType=[RightOuterJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[d, g])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[d, e, f, g, h])
   +- Calc(select=[b, c])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[=($0, $5)], joinType=[right])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[=(a, z)], join=[a, b, y, z], joinType=[RightOuterJoin], isBroadcast=[true], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, b])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Calc(select=[y, z])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinEquiAndLocalPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], x=[$3])
+- LogicalJoin(condition=[AND(=($0, $5), <($3, 2))], joinType=[right])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, x])
+- HashJoin(where=[AND(=(a, z), $f3)], join=[a, b, x, z, $f3], joinType=[RightOuterJoin], isBroadcast=[true], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, b])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Calc(select=[x, z, <(x, 2) AS $f3])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinEquiAndNonEquiPred">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], y=[$4])
+- LogicalJoin(condition=[AND(=($0, $5), <($1, $3))], joinType=[right])
   :- LogicalTableScan(table=[[builtin, default, _DataStreamTable_0]])
   +- LogicalTableScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, y])
+- HashJoin(where=[AND(=(a, z), <(b, x))], join=[a, b, x, y, z], joinType=[RightOuterJoin], isBroadcast=[true], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, b])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[x, y, z])
]]>
    </Resource>
  </TestCase>
</Root>
