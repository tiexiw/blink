<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testNegative01">
    <Resource name="sql">
      <![CDATA[
select * from person where
age = (select max(age) from person p where p.height = person.height)
and name = 'benji'
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalFilter(condition=[AND(=($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(age=[$1])
    LogicalFilter(condition=[=($3, $cor0.height)])
      LogicalTableScan(table=[[builtin, default, person]])
})), =($2, 'benji'))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
   +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], EXPR$0=[$6])
      +- LogicalJoin(condition=[AND(=($3, $5), =($1, $6))], joinType=[inner])
         :- LogicalFilter(condition=[=($2, 'benji')])
         :  +- LogicalTableScan(table=[[builtin, default, person]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
            +- LogicalProject(height=[$1], age=[$0])
               +- LogicalProject(age=[$1], height=[$3])
                  +- LogicalFilter(condition=[IS NOT NULL($3)])
                     +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNegative02">
    <Resource name="sql">
      <![CDATA[
select * from person
where age = (select max(age)
             from person p
             where p.height = person.height and p.name = 'benji')
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalFilter(condition=[=($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(age=[$1])
    LogicalFilter(condition=[AND(=($3, $cor0.height), =($2, 'benji'))])
      LogicalTableScan(table=[[builtin, default, person]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
   +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], EXPR$0=[$6])
      +- LogicalJoin(condition=[AND(=($3, $5), =($1, $6))], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, person]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
            +- LogicalProject(height=[$1], age=[$0])
               +- LogicalProject(age=[$0], height=[$2])
                  +- LogicalProject(age=[$1], name=[$2], height=[$3])
                     +- LogicalFilter(condition=[=($2, 'benji')])
                        +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNestedMultiJoin">
    <Resource name="sql">
      <![CDATA[
select t2e, t2c, t4c, t1a, t1c, t2d
from t1, t2, t3, t4, t5
where t1a = t3a
  and t2a = t3b
  and t1d = 19
  and t1e like '%bacc'
  and t2d = t4a
  and t4b = t5a
  and t5c = 'aabc'
  and t3d = (
      select min(t3d)
        from t2, t3, t4, t5
        where t1a = t3a
          and t2a = t3b
          and t2d = t4a
          and t4b = t5a
          and t5c = 'aabc'
)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(t2e=[$9], t2c=[$7], t4c=[$17], t1a=[$0], t1c=[$2], t2d=[$8])
+- LogicalFilter(condition=[AND(=($0, $10), =($5, $11), =($3, 19), LIKE($4, '%bacc'), =($8, $15), =($16, $20), =($22, 'aabc'), =($13, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
  LogicalProject(t3d=[$8])
    LogicalFilter(condition=[AND(=($cor0.t1a, $5), =($0, $6), =($3, $10), =($11, $15), =($17, 'aabc'))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, t2]])
            LogicalTableScan(table=[[builtin, default, t3]])
          LogicalTableScan(table=[[builtin, default, t4]])
        LogicalTableScan(table=[[builtin, default, t5]])
})))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :  :- LogicalTableScan(table=[[builtin, default, t1]])
      :  :  :  +- LogicalTableScan(table=[[builtin, default, t2]])
      :  :  +- LogicalTableScan(table=[[builtin, default, t3]])
      :  +- LogicalTableScan(table=[[builtin, default, t4]])
      +- LogicalTableScan(table=[[builtin, default, t5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(t2e=[$9], t2c=[$7], t4c=[$17], t1a=[$0], t1c=[$2], t2d=[$8])
+- LogicalProject(t1a=[$0], t1b=[$1], t1c=[$2], t1d=[$3], t1e=[$4], t2a=[$5], t2b=[$6], t2c=[$7], t2d=[$8], t2e=[$9], t3a=[$10], t3b=[$11], t3c=[$12], t3d=[$13], t3e=[$14], t4a=[$15], t4b=[$16], t4c=[$17], t4d=[$18], t4e=[$19], t5a=[$20], t5b=[$21], t5c=[$22], t5d=[$23], t5e=[$24])
   +- LogicalProject(t1a=[$0], t1b=[$1], t1c=[$2], t1d=[$3], t1e=[$4], t2a=[$5], t2b=[$6], t2c=[$7], t2d=[$8], t2e=[$9], t3a=[$10], t3b=[$11], t3c=[$12], t3d=[$13], t3e=[$14], t4a=[$15], t4b=[$16], t4c=[$17], t4d=[$18], t4e=[$19], t5a=[$20], t5b=[$21], t5c=[$22], t5d=[$23], t5e=[$24], EXPR$0=[$26])
      +- LogicalProject(t1a=[$0], t1b=[$1], t1c=[$2], t1d=[$3], t1e=[$4], t2a=[$5], t2b=[$6], t2c=[$7], t2d=[$8], t2e=[$9], t3a=[$10], t3b=[$11], t3c=[$12], t3d=[$13], t3e=[$14], t4a=[$15], t4b=[$16], t4c=[$17], t4d=[$18], t4e=[$19], t5a=[$20], t5b=[$21], t5c=[$22], t5d=[$23], t5e=[$24], t3a0=[CAST($25):INTEGER], EXPR$0=[CAST($26):INTEGER])
         +- LogicalProject(t1a=[$0], t1b=[$1], t1c=[$2], t1d=[$3], t1e=[$4], t2a=[$5], t2b=[$6], t2c=[$7], t2d=[$8], t2e=[$9], t3a=[$10], t3b=[$11], t3c=[$12], t3d=[$13], t3e=[$14], t4a=[$15], t4b=[$16], t4c=[$17], t4d=[$18], t4e=[$19], t5a=[$20], t5b=[$21], t5c=[$22], t5d=[$23], t5e=[$24], t1a0=[CAST($0):INTEGER NOT NULL], t3d0=[$13])
            +- LogicalRank(rankFunction=[RANK], partitionBy=[$0], orderBy=[$13 ASC], rankRange=[rankStart=1, rankEnd=1], select=[t1a=$0, t1b=$1, t1c=$2, t1d=$3, t1e=$4, t2a=$5, t2b=$6, t2c=$7, t2d=$8, t2e=$9, t3a=$10, t3b=$11, t3c=$12, t3d=$13, t3e=$14, t4a=$15, t4b=$16, t4c=$17, t4d=$18, t4e=$19, t5a=$20, t5b=$21, t5c=$22, t5d=$23, t5e=$24, rk=$25])
               +- LogicalProject(t1a=[$15], t1b=[$16], t1c=[$17], t1d=[$18], t1e=[$19], t2a=[$0], t2b=[$1], t2c=[$2], t2d=[$3], t2e=[$4], t3a=[$20], t3b=[$21], t3c=[$22], t3d=[$23], t3e=[$24], t4a=[$5], t4b=[$6], t4c=[$7], t4d=[$8], t4e=[$9], t5a=[$10], t5b=[$11], t5c=[$12], t5d=[$13], t5e=[$14])
                  +- LogicalJoin(condition=[=($0, $21)], joinType=[inner])
                     :- LogicalJoin(condition=[=($3, $5)], joinType=[inner])
                     :  :- LogicalTableScan(table=[[builtin, default, t2]])
                     :  +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
                     :     :- LogicalTableScan(table=[[builtin, default, t4]])
                     :     +- LogicalFilter(condition=[=($2, 'aabc')])
                     :        +- LogicalTableScan(table=[[builtin, default, t5]])
                     +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
                        :- LogicalFilter(condition=[AND(=($3, 19), LIKE($4, '%bacc'))])
                        :  +- LogicalTableScan(table=[[builtin, default, t1]])
                        +- LogicalTableScan(table=[[builtin, default, t3]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPkCorrelationWithSameFilter">
    <Resource name="sql">
      <![CDATA[
select * from person
where age = (select max(age) from person p
             where name = 'benji' and p.height = person.height)
and name = 'benji'
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalFilter(condition=[AND(=($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(age=[$1])
    LogicalFilter(condition=[AND(=($2, 'benji'), =($3, $cor0.height))])
      LogicalTableScan(table=[[builtin, default, person]])
})), =($2, 'benji'))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
   +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], EXPR$0=[$6])
      +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], age0=[$1], height0=[$3])
         +- LogicalRank(rankFunction=[RANK], partitionBy=[$3], orderBy=[$1 DESC], rankRange=[rankStart=1, rankEnd=1], select=[id=$0, age=$1, name=$2, height=$3, sex=$4, rk=$5])
            +- LogicalFilter(condition=[=($2, 'benji')])
               +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSameFiltersOnPKWithoutCorrelation">
    <Resource name="sql">
      <![CDATA[
select * from person
where age = (select max(age) from person
             where name = 'benji')
and name = 'benji'
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalFilter(condition=[AND(=($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(age=[$1])
    LogicalFilter(condition=[=($2, 'benji')])
      LogicalTableScan(table=[[builtin, default, person]])
})), =($2, 'benji'))])
   +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
   +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], age0=[$1])
      +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
         +- LogicalRank(rankFunction=[RANK], partitionBy=[], orderBy=[$1 DESC], rankRange=[rankStart=1, rankEnd=1], select=[id=$0, age=$1, name=$2, height=$3, sex=$4, rk=$5])
            +- LogicalFilter(condition=[=($2, 'benji')])
               +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWholeGroupWithSimpleView">
    <Resource name="sql">
      <![CDATA[
select * from person where age = (select max(age) from person p)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalFilter(condition=[=($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(age=[$1])
    LogicalTableScan(table=[[builtin, default, person]])
}))])
   +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
+- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
   +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4], age0=[$1])
      +- LogicalProject(id=[$0], age=[$1], name=[$2], height=[$3], sex=[$4])
         +- LogicalRank(rankFunction=[RANK], partitionBy=[], orderBy=[$1 DESC], rankRange=[rankStart=1, rankEnd=1], select=[id=$0, age=$1, name=$2, height=$3, sex=$4, rk=$5])
            +- LogicalTableScan(table=[[builtin, default, person]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWholeGroupWithAggView">
    <Resource name="sql">
      <![CDATA[
select t2a, t2c, t2e, r.t3f
from t2,
  (select t3a as t3f, sum(t3b * (1 - t3d)) as t3g
    from t3
    where t3c >= date '1993-05-01'
      and t3c < date '1993-05-01' + interval '3' month
    group by
      t3a
  ) as r
where
  t2a = r.t3f
  and r.t3g = (
    select max(t3g)
    from
    (select t3a as t3f, sum(t3b * (1 - t3d)) as t3g
      from t3
      where t3c >= date '1993-05-01'
        and t3c < date '1993-05-01' + interval '3' month
      group by
      t3a)
  )
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(t2a=[$0], t2c=[$2], t2e=[$4], t3f=[$5])
+- LogicalFilter(condition=[AND(=($0, $5), =($6, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(t3g=[$1])
    LogicalAggregate(group=[{0}], t3g=[SUM($1)])
      LogicalProject(t3f=[$0], $f1=[*($1, -(1, $3))])
        LogicalFilter(condition=[AND(>=(CAST($2):DATE NOT NULL, 1993-05-01), <(CAST($2):DATE NOT NULL, +(1993-05-01, 3)))])
          LogicalTableScan(table=[[builtin, default, t3]])
})))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalAggregate(group=[{0}], t3g=[SUM($1)])
         +- LogicalProject(t3f=[$0], $f1=[*($1, -(1, $3))])
            +- LogicalFilter(condition=[AND(>=(CAST($2):DATE NOT NULL, 1993-05-01), <(CAST($2):DATE NOT NULL, +(1993-05-01, 3)))])
               +- LogicalTableScan(table=[[builtin, default, t3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(t2a=[$0], t2c=[$2], t2e=[$4], t3f=[$5])
+- LogicalProject(t2a=[$0], t2b=[$1], t2c=[$2], t2d=[$3], t2e=[$4], t3f=[$5], t3g=[$6])
   +- LogicalProject(t2a=[$0], t2b=[$1], t2c=[$2], t2d=[$3], t2e=[$4], t3f=[$5], t3g=[$6], t3g0=[CAST($6):INTEGER])
      +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, t2]])
         +- LogicalProject(t3f=[$0], t3g=[$1])
            +- LogicalRank(rankFunction=[RANK], partitionBy=[], orderBy=[$1 DESC], rankRange=[rankStart=1, rankEnd=1], select=[t3f=$0, t3g=$1, rk=$2])
               +- LogicalAggregate(group=[{0}], t3g=[SUM($1)])
                  +- LogicalProject(t3f=[$0], $f1=[*($1, -(1, $3))])
                     +- LogicalProject(t3a=[$0], t3b=[$1], t3c=[$2], t3d=[$3])
                        +- LogicalFilter(condition=[AND(>=(CAST($2):DATE NOT NULL, 1993-05-01), <(CAST($2):DATE NOT NULL, +(1993-05-01, 3)))])
                           +- LogicalTableScan(table=[[builtin, default, t3]])
]]>
    </Resource>
  </TestCase>
</Root>
