<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testComposedConditionLeftAnti[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftAnti[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftAnti[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftAnti[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftAnti[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftSemi[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftSemi[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftSemi[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftSemi[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedConditionLeftSemi[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedUniqueConditionLeftAnti[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedUniqueConditionLeftAnti[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedUniqueConditionLeftAnti[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedUniqueConditionLeftAnti[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComposedUniqueConditionLeftAnti[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(a, c), <(b, d))], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithNonEqualityCorrelationCondition[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[>(b, d)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[d])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[>(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[b])
      +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[b])
      +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
         +- Exchange(distribution=[hash[a, b]])
            +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
         +- Exchange(distribution=[hash[a, b]])
            +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- SortAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
         +- Sort(orderBy=[a ASC, b ASC])
            +- Exchange(distribution=[hash[a, b]])
               +- LocalSortAggregate(groupBy=[a, b], select=[a, b])
                  +- Sort(orderBy=[a ASC, b ASC])
                     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[b])
      +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
         +- Exchange(distribution=[hash[a, b]])
            +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(b, d)], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b])
      +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
         +- Exchange(distribution=[hash[a, b]])
            +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithOver4[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- NestedLoopJoin(where=[=(d, d0)], join=[c, d, d0], joinType=[InnerJoin], build=[right])
   :- Exchange(distribution=[any], exchange_mode=[BATCH])
   :  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[broadcast])
      +- HashAggregate(isMerge=[true], groupBy=[d], select=[d])
         +- Exchange(distribution=[hash[d]])
            +- LocalHashAggregate(groupBy=[d], select=[d])
               +- Calc(select=[d, true AS i])
                  +- HashAggregate(isMerge=[true], groupBy=[a, d], select=[a, d])
                     +- Exchange(distribution=[hash[a, d]])
                        +- LocalHashAggregate(groupBy=[a, d], select=[a, d])
                           +- Calc(select=[a, d])
                              +- NestedLoopJoin(where=[>(b, d)], join=[a, b, d], joinType=[InnerJoin], build=[right])
                                 :- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
                                 +- Exchange(distribution=[broadcast])
                                    +- SortAggregate(isMerge=[true], groupBy=[d], select=[d])
                                       +- Sort(orderBy=[d ASC])
                                          +- Exchange(distribution=[hash[d]])
                                             +- LocalSortAggregate(groupBy=[d], select=[d])
                                                +- Sort(orderBy=[d ASC])
                                                   +- Calc(select=[d])
                                                      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[OR(=(a, c), IS NULL(=(a, c)))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[$f0], join=[a, b], joinType=[LeftAntiJoin], build=[right], singleRowJoin=[true])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[IS NOT NULL(m) AS $f0])
      +- SortAggregate(isMerge=[false], select=[MIN(i) AS m])
         +- Exchange(distribution=[single])
            +- Calc(select=[true AS i], where=[>(c, 10)])
               +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d))], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c, d], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Exchange(distribution=[hash[b]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[c, d], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[b]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[c, d], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d))], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c, d], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d))], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[b]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[c, d], where=[<(c, 3)])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti4[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti4[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti4[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti4[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftAnti4[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[$f0], join=[a, b], joinType=[LeftSemiJoin], build=[right], singleRowJoin=[true])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[IS NOT NULL(m) AS $f0])
      +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS m])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_MIN(i) AS min$0])
               +- Calc(select=[true AS i])
                  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownLeftSemi3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[EXPR$0, b])
      +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[hash[b]])
            +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(a) AS sum$0])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[EXPR$0, b])
      +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[hash[b]])
            +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(a) AS sum$0])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[EXPR$0, b])
      +- SortAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS EXPR$0])
         +- Sort(orderBy=[b ASC])
            +- Exchange(distribution=[hash[b]])
               +- LocalSortAggregate(groupBy=[b], select=[b, Partial_SUM(a) AS sum$0])
                  +- Sort(orderBy=[b ASC])
                     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[EXPR$0, b])
      +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[hash[b]])
            +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(a) AS sum$0])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[EXPR$0, b])
      +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[hash[b]])
            +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(a) AS sum$0])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate2[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, a0), =(b, b0))], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- Exchange(distribution=[hash[a, b]], exchange_mode=[BATCH])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
      +- Exchange(distribution=[hash[a, b]])
         +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
            +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate2[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, a0), =(b, b0))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a, b]], exchange_mode=[BATCH])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
   +- Exchange(distribution=[hash[a, b]])
      +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
         +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate2[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, a0), =(b, b0))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a, b]], exchange_mode=[BATCH])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- SortAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
   +- Sort(orderBy=[a ASC, b ASC])
      +- Exchange(distribution=[hash[a, b]])
         +- LocalSortAggregate(groupBy=[a, b], select=[a, b])
            +- Sort(orderBy=[a ASC, b ASC])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, a0), =(b, b0))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[any], exchange_mode=[BATCH])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
      +- Exchange(distribution=[hash[a, b]])
         +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
            +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate2[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(a, a0), =(b, b0))], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a, b]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
   +- Exchange(distribution=[hash[a, b]])
      +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
         +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- HashSemiJoin(where=[AND(=($f2, EXPR$0), =(b, d))], join=[c, d, $f2], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[c, d, CAST(/(CAST(c), 2)) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[EXPR$0, b])
         +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS EXPR$0])
            +- Exchange(distribution=[hash[b]])
               +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(*) AS count$0])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- HashSemiJoin(where=[AND(=($f2, EXPR$0), =(b, d))], join=[c, d, $f2], joinType=[LeftSemiJoin], build=[left])
   :- Exchange(distribution=[hash[$f2, d]])
   :  +- Calc(select=[c, d, CAST(/(CAST(c), 2)) AS $f2])
   :     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[hash[EXPR$0, b]])
      +- Calc(select=[EXPR$0, b])
         +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS EXPR$0])
            +- Exchange(distribution=[hash[b]])
               +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(*) AS count$0])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- HashSemiJoin(where=[AND(=($f2, EXPR$0), =(b, d))], join=[c, d, $f2], joinType=[LeftSemiJoin], build=[right])
   :- Exchange(distribution=[hash[$f2, d]])
   :  +- Calc(select=[c, d, CAST(/(CAST(c), 2)) AS $f2])
   :     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[hash[EXPR$0, b]])
      +- Calc(select=[EXPR$0, b])
         +- SortAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS EXPR$0])
            +- Sort(orderBy=[b ASC])
               +- Exchange(distribution=[hash[b]])
                  +- LocalSortAggregate(groupBy=[b], select=[b, Partial_COUNT(*) AS count$0])
                     +- Sort(orderBy=[b ASC])
                        +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- NestedLoopSemiJoin(where=[AND(=($f2, EXPR$0), =(b, d))], join=[c, d, $f2], joinType=[LeftSemiJoin], build=[right])
   :- Calc(select=[c, d, CAST(/(CAST(c), 2)) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[EXPR$0, b])
         +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS EXPR$0])
            +- Exchange(distribution=[hash[b]])
               +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(*) AS count$0])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithAggregate3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, d])
+- SortMergeSemiJoin(where=[AND(=($f2, EXPR$0), =(b, d))], join=[c, d, $f2], joinType=[LeftSemiJoin])
   :- Exchange(distribution=[hash[$f2, d]])
   :  +- Calc(select=[c, d, CAST(/(CAST(c), 2)) AS $f2])
   :     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[hash[EXPR$0, b]])
      +- Calc(select=[EXPR$0, b])
         +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS EXPR$0])
            +- Exchange(distribution=[hash[b]])
               +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(*) AS count$0])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, a), >(b, d))], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, a), >(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[a]])
   +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, a), >(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[a]])
   +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(c, a), >(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(c, a), >(b, d))], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[a]])
   +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition2[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), >(b, d))], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c, d])
      +- SortAggregate(isMerge=[true], groupBy=[d], select=[d, Final_MAX(max$0) AS c])
         +- Sort(orderBy=[d ASC])
            +- Exchange(distribution=[hash[d]])
               +- LocalSortAggregate(groupBy=[d], select=[d, Partial_MAX(c) AS max$0])
                  +- Sort(orderBy=[d ASC])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition2[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), >(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c, d])
      +- SortAggregate(isMerge=[true], groupBy=[d], select=[d, Final_MAX(max$0) AS c])
         +- Sort(orderBy=[d ASC])
            +- Exchange(distribution=[hash[d]])
               +- LocalSortAggregate(groupBy=[d], select=[d, Partial_MAX(c) AS max$0])
                  +- Sort(orderBy=[d ASC])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition2[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(a, c), >(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c, d])
      +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_MAX(max$0) AS c])
         +- Exchange(distribution=[hash[d]])
            +- LocalHashAggregate(groupBy=[d], select=[d, Partial_MAX(c) AS max$0])
               +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), >(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c, d])
      +- SortAggregate(isMerge=[true], groupBy=[d], select=[d, Final_MAX(max$0) AS c])
         +- Sort(orderBy=[d ASC])
            +- Exchange(distribution=[hash[d]])
               +- LocalSortAggregate(groupBy=[d], select=[d, Partial_MAX(c) AS max$0])
                  +- Sort(orderBy=[d ASC])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition2[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(a, c), >(b, d))], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c, d])
      +- SortAggregate(isMerge=[true], groupBy=[d], select=[d, Final_MAX(max$0) AS c])
         +- Sort(orderBy=[d ASC])
            +- Exchange(distribution=[hash[d]])
               +- LocalSortAggregate(groupBy=[d], select=[d, Partial_MAX(c) AS max$0])
                  +- Sort(orderBy=[d ASC])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), <>(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[w0$o0 AS c, d])
      +- OverAggregate(window#0=[MIN(c) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[c, d, w0$o0])
         +- Exchange(distribution=[single])
            +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithNonEqualityCorrelationCondition4[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(a, c), <>(b, d))], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[w0$o0 AS c, d])
      +- OverAggregate(window#0=[MIN(c) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[c, d, w0$o0])
         +- Exchange(distribution=[single])
            +- SortAggregate(isMerge=[true], groupBy=[c, d], select=[c, d])
               +- Sort(orderBy=[c ASC, d ASC])
                  +- Exchange(distribution=[hash[c, d]])
                     +- LocalSortAggregate(groupBy=[c, d], select=[c, d])
                        +- Sort(orderBy=[c ASC, d ASC])
                           +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[left], tryDistinctBuildRow=[true])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver2[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                           +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver2[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[left], tryDistinctBuildRow=[true])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                           +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver2[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- SortAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Sort(orderBy=[a ASC, b ASC])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalSortAggregate(groupBy=[a, b], select=[a, b])
                           +- Sort(orderBy=[a ASC, b ASC])
                              +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                           +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver2[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(c, EXPR$0)], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0]])
   +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
      +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0])
         +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
            +- Sort(orderBy=[b ASC, a ASC])
               +- Exchange(distribution=[hash[b]])
                  +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                           +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver4[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Exchange(distribution=[hash[a, b]])
                     +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                        +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver4[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Exchange(distribution=[hash[a, b]])
                     +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                        +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver4[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- SortAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Sort(orderBy=[a ASC, b ASC])
                     +- Exchange(distribution=[hash[a, b]])
                        +- LocalSortAggregate(groupBy=[a, b], select=[a, b])
                           +- Sort(orderBy=[a ASC, b ASC])
                              +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver4[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Exchange(distribution=[hash[a, b]])
                     +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                        +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithOver4[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[AND(=(c, EXPR$0), =(b, d))], join=[c, d], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[c, d]])
:  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
+- Exchange(distribution=[hash[EXPR$0, b]])
   +- Calc(select=[CASE(>(w0$o0, 0), CAST(w0$o1), null) AS EXPR$0, b])
      +- OverAggregate(partitionBy=[b], orderBy=[a ASC], window#0=[COUNT(a) AS w0$o0, $SUM0(a) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, b, w0$o0, w0$o1])
         +- Sort(orderBy=[b ASC, a ASC])
            +- Exchange(distribution=[hash[b]])
               +- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b])
                  +- Exchange(distribution=[hash[a, b]])
                     +- LocalHashAggregate(groupBy=[a, b], select=[a, b])
                        +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- NestedLoopSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- NestedLoopSemiJoin(where=[$f2], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- LocalHashAggregate(select=[])
         +- Calc(select=[])
            +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b, >(b, 1) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 1) AS $f2])
   :  +- Exchange(distribution=[hash[b]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[d]])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[left])
   :- Calc(select=[a, b, >(b, 1) AS $f2])
   :  +- Exchange(distribution=[hash[b]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[d]])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- NestedLoopSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 1) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- SortMergeSemiJoin(where=[AND(OR(=(a, c), IS NULL(=(a, c))), =(b, d), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin])
   :- Calc(select=[a, b, >(b, 1) AS $f2])
   :  +- Exchange(distribution=[hash[b]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[d]])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti4[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(=(a, c), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti4[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(=(a, c), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- Exchange(distribution=[hash[a]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[c]])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti4[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[AND(=(a, c), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[left])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- Exchange(distribution=[hash[a]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[c]])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti4[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- NestedLoopSemiJoin(where=[AND(=(a, c), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin], build=[right])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftAnti4[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- SortMergeSemiJoin(where=[AND(=(a, c), $f2)], join=[a, b, $f2], joinType=[LeftAntiJoin])
   :- Calc(select=[a, b, >(b, 2) AS $f2])
   :  +- Exchange(distribution=[hash[a]])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[hash[c]])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi1[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi1[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi1[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi1[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi1[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi2[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[true], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(select=[])
      +- Calc(select=[])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi3[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi3[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi3[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi3[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Calc(select=[a, b], where=[>(b, 2)])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionPushDownLeftSemi3[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b], where=[>(b, 2)])
:     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoinTranspose[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashJoin(where=[=(a, c)], join=[a, b, c], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :- Calc(select=[a, b], where=[>(a, 0)])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- HashSemiJoin(where=[=(c, c0)], join=[c], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
         :- Calc(select=[c])
         :  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[c], where=[>(d, 1)])
               +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoinTranspose[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashJoin(where=[=(a, c)], join=[a, b, c], joinType=[InnerJoin], build=[right])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b], where=[>(a, 0)])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- HashSemiJoin(where=[=(c, c0)], join=[c], joinType=[LeftSemiJoin], build=[left])
      :- Exchange(distribution=[hash[c]])
      :  +- Calc(select=[c])
      :     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
      +- Exchange(distribution=[hash[c]])
         +- Calc(select=[c], where=[>(d, 1)])
            +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoinTranspose[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- HashSemiJoin(where=[=(c, c0)], join=[a, b, c], joinType=[LeftSemiJoin], build=[left])
   :- HashJoin(where=[=(a, c)], join=[a, b, c], joinType=[InnerJoin], build=[left])
   :  :- Exchange(distribution=[hash[a]])
   :  :  +- Calc(select=[a, b], where=[>(a, 0)])
   :  :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   :  +- Exchange(distribution=[hash[c]])
   :     +- Calc(select=[c])
   :        +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
   +- Exchange(distribution=[hash[c]])
      +- Calc(select=[c], where=[>(d, 1)])
         +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoinTranspose[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- NestedLoopJoin(where=[=(a, c)], join=[a, b, c], joinType=[InnerJoin], build=[right])
   :- Calc(select=[a, b], where=[>(a, 0)])
   :  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- Exchange(distribution=[broadcast])
      +- NestedLoopSemiJoin(where=[=(c, c0)], join=[c], joinType=[LeftSemiJoin], build=[right])
         :- Calc(select=[c])
         :  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[c], where=[>(d, 1)])
               +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoinTranspose[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- SortMergeJoin(where=[=(a, c)], join=[a, b, c], joinType=[InnerJoin])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b], where=[>(a, 0)])
   :     +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
   +- SortMergeSemiJoin(where=[=(c, c0)], join=[c], joinType=[LeftSemiJoin])
      :- Exchange(distribution=[hash[c]])
      :  +- Calc(select=[c])
      :     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
      +- Exchange(distribution=[hash[c]])
         +- Calc(select=[c], where=[>(d, 1)])
            +- BoundedStreamScan(table=[[builtin, default, rightUniqueKeyT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiWithDistinct[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[c], select=[c])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiWithDistinct[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- LocalHashAggregate(groupBy=[c], select=[c])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiWithDistinct[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- LocalHashAggregate(groupBy=[c], select=[c])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiWithDistinct[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- LocalHashAggregate(groupBy=[c], select=[c])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiWithDistinct[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- LocalHashAggregate(groupBy=[c], select=[c])
      +- Calc(select=[c])
         +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftAnti[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftAnti[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftAnti[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftAnti[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftAnti[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftSemi[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleUniqueConditionLeftAnti[BroadcastHashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- SortAggregate(isMerge=[true], groupBy=[c], select=[c])
      +- Sort(orderBy=[c ASC])
         +- Exchange(distribution=[hash[c]])
            +- LocalSortAggregate(groupBy=[c], select=[c])
               +- Sort(orderBy=[c ASC])
                  +- Calc(select=[c])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftSemi[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftSemi[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftSemi[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleUniqueConditionLeftAnti[HashJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- SortAggregate(isMerge=[true], groupBy=[c], select=[c])
   +- Sort(orderBy=[c ASC])
      +- Exchange(distribution=[hash[c]])
         +- LocalSortAggregate(groupBy=[c], select=[c])
            +- Sort(orderBy=[c ASC])
               +- Calc(select=[c])
                  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleConditionLeftSemi[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftSemiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleUniqueConditionLeftAnti[HashJoin-true]">
    <Resource name="planAfter">
      <![CDATA[
HashSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[left])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- HashAggregate(isMerge=[true], groupBy=[c], select=[c])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c])
         +- Calc(select=[c])
            +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleUniqueConditionLeftAnti[SortMergeJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
SortMergeSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- SortAggregate(isMerge=[true], groupBy=[c], select=[c])
   +- Sort(orderBy=[c ASC])
      +- Exchange(distribution=[hash[c]])
         +- LocalSortAggregate(groupBy=[c], select=[c])
            +- Sort(orderBy=[c ASC])
               +- Calc(select=[c])
                  +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleUniqueConditionLeftAnti[NestedLoopJoin-false]">
    <Resource name="planAfter">
      <![CDATA[
NestedLoopSemiJoin(where=[=(a, c)], join=[a, b], joinType=[LeftAntiJoin], build=[right])
:- BoundedStreamScan(table=[[builtin, default, leftT]], fields=[a, b])
+- Exchange(distribution=[broadcast])
   +- SortAggregate(isMerge=[true], groupBy=[c], select=[c])
      +- Sort(orderBy=[c ASC])
         +- Exchange(distribution=[hash[c]])
            +- LocalSortAggregate(groupBy=[c], select=[c])
               +- Sort(orderBy=[c ASC])
                  +- Calc(select=[c])
                     +- BoundedStreamScan(table=[[builtin, default, rightT]], fields=[c, d])
]]>
    </Resource>
  </TestCase>
</Root>
