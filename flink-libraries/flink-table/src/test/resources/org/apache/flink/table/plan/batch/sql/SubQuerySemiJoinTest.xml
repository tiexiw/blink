<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testExistsWithCorrelatedOnLateralTable1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor1.a, $0)])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnLateralTable1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor1.a, $0)])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE a = c) AND l.a > 2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), >($0, 2))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($0, 2)])
   +- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE a = c) AND l.a > 2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), >($0, 2))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($0, 2)])
   +- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1, c + d, c + 2, d FROM r WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1, c + d, c + 2, d FROM r WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a = c and l.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), >($cor0.b, 10))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), $2)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[>($1, 10)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a = c and l.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), >($cor0.b, 10))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), $2)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[>($1, 10)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere5[false]">
    <Resource name="sql">
      <![CDATA[SELECT l1.a FROM l l1, r WHERE l1.b = r.d AND l1.a < 10 AND r.c < 15  AND EXISTS (SELECT * FROM l l2 WHERE l1.b = l2.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15), EXISTS({
LogicalFilter(condition=[=($cor0.b, $1)])
  LogicalTableScan(table=[[builtin, default, l]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15))])
   +- SemiJoin(condition=[=($1, $4)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(b=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere5[true]">
    <Resource name="sql">
      <![CDATA[SELECT l1.a FROM l l1, r WHERE l1.b = r.d AND l1.a < 10 AND r.c < 15  AND EXISTS (SELECT * FROM l l2 WHERE l1.b = l2.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15), EXISTS({
LogicalFilter(condition=[=($cor0.b, $1)])
  LogicalTableScan(table=[[builtin, default, l]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15))])
   +- SemiJoin(condition=[=($1, $4)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(b=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere6[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a < r.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[<($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[<($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere6[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a < r.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[<($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[<($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere7[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (EXISTS (SELECT d FROM r WHERE r.d = l.b)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($2, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere7[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (EXISTS (SELECT d FROM r WHERE r.d = l.b)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($2, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere8[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT l.a IS NULL FROM r WHERE r.d = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($2, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere8[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT l.a IS NULL FROM r WHERE r.d = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($2, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT COUNT(1) FROM r WHERE l.b = r.d AND c < 100 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
  LogicalProject(f=[$3], $f1=[1])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100))])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$0], d=[$2], $f1=[$1])
            +- LogicalProject(f=[$3], $f1=[1], d=[$1])
               +- LogicalFilter(condition=[<($0, 100)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT COUNT(1) FROM r WHERE l.b = r.d AND c < 100 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
  LogicalProject(f=[$3], $f1=[1])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100))])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$0], d=[$2], $f1=[$1])
            +- LogicalProject(f=[$3], $f1=[1], d=[$1])
               +- LogicalFilter(condition=[<($0, 100)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(e) FROM r WHERE l.b = r.d AND c < 100 AND l.a = r.c GROUP BY c, true, f, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[MAX($4)])
  LogicalProject(c=[$0], $f1=[true], f=[$3], $f3=[1], e=[$2])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100), =($cor0.a, $0))])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$2])
      +- LogicalProject(c=[$0], f=[$1], d=[$2], $f3=[true], $f4=[1], EXPR$0=[$3])
         +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($5)])
            +- LogicalProject(c=[$0], f=[$2], d=[$5], $f1=[$1], $f3=[$3], e=[$4])
               +- LogicalProject(c=[$0], $f1=[true], f=[$3], $f3=[1], e=[$2], d=[$1])
                  +- LogicalFilter(condition=[<($0, 100)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(e) FROM r WHERE l.b = r.d AND c < 100 AND l.a = r.c GROUP BY c, true, f, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[MAX($4)])
  LogicalProject(c=[$0], $f1=[true], f=[$3], $f3=[1], e=[$2])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100), =($cor0.a, $0))])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$2])
      +- LogicalProject(c=[$0], f=[$1], d=[$2], $f3=[true], $f4=[1], EXPR$0=[$3])
         +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($5)])
            +- LogicalProject(c=[$0], f=[$2], d=[$5], $f1=[$1], $f3=[$3], e=[$4])
               +- LogicalProject(c=[$0], $f1=[true], f=[$3], $f3=[1], e=[$2], d=[$1])
                  +- LogicalFilter(condition=[<($0, 100)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[>($cor0.c, $1)])
  LogicalProject(d=[$1], f=[$0])
    LogicalAggregate(group=[{0}], d=[MAX($1)])
      LogicalProject(f=[$2], d=[$0])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[>($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$1], f=[$0])
            +- LogicalAggregate(group=[{0}], d=[MAX($1)])
               +- LogicalProject(f=[$0], d=[$1])
                  +- LogicalProject(f=[$2], d=[$0])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[>($cor0.c, $1)])
  LogicalProject(d=[$1], f=[$0])
    LogicalAggregate(group=[{0}], d=[MAX($1)])
      LogicalProject(f=[$2], d=[$0])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[>($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$1], f=[$0])
            +- LogicalAggregate(group=[{0}], d=[MAX($1)])
               +- LogicalProject(f=[$0], d=[$1])
                  +- LogicalProject(f=[$2], d=[$0])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_AggregateOver1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$0], f=[$1])
            +- LogicalProject(e=[$1], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_AggregateOver1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$0], f=[$1])
            +- LogicalProject(e=[$1], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=(CAST($cor0.b):INTEGER NOT NULL, CAST($0):INTEGER NOT NULL)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $5)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], d0=[CAST($0):INTEGER NOT NULL])
         +- LogicalProject(d=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, CAST($0):INTEGER)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $5)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], d0=[CAST($0):INTEGER])
         +- LogicalProject(d=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r where l.b + 1 = r.e))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, 'abc'), NOT(EXISTS({
LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
  LogicalTableScan(table=[[builtin, default, r]])
})))))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($1, 1)])
         :  +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r where l.b + 1 = r.e))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, 'abc'), NOT(EXISTS({
LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
  LogicalTableScan(table=[[builtin, default, r]])
})))))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($1, 1)])
         :  +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $0)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $0)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r INNER JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[inner])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r INNER JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[inner])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN (SELECT i, k FROM t WHERE t.j = l.b AND i < 50) t1 ON r1.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $2)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($3, $0), =($4, $1))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1], j=[$4])
      +- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], k=[$2], j=[$1])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN (SELECT i, k FROM t WHERE t.j = l.b AND i < 50) t1 ON r1.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $2)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($3, $0), =($4, $1))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1], j=[$4])
      +- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], k=[$2], j=[$1])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (WITH r2 AS (SELECT * FROM r WHERE r.c = l.a) SELECT 1 FROM r2 WHERE r2.d = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor1.b)])
  LogicalProject(c=[$0], d=[$1])
    LogicalFilter(condition=[=($0, $cor1.a)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($3, $1), =($2, $0))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalFilter(condition=[true])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (WITH r2 AS (SELECT * FROM r WHERE r.c = l.a) SELECT 1 FROM r2 WHERE r2.d = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor1.b)])
  LogicalProject(c=[$0], d=[$1])
    LogicalFilter(condition=[=($0, $cor1.a)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($3, $1), =($2, $0))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalFilter(condition=[true])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith2[false]">
    <Resource name="sql">
      <![CDATA[WITH t (a, b) AS (SELECT * FROM (VALUES (1, 2))) SELECT * FROM t WHERE EXISTS (SELECT 1 FROM r WHERE r.c = t.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($0, $cor0.a)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
      +- LogicalValues(tuples=[[{ 1, 2 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($2, $0)], joinType=[inner], isAnti=[false])
   :- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
   :  +- LogicalValues(tuples=[[{ 1, 2 }]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith2[true]">
    <Resource name="sql">
      <![CDATA[WITH t (a, b) AS (SELECT * FROM (VALUES (1, 2))) SELECT * FROM t WHERE EXISTS (SELECT 1 FROM r WHERE r.c = t.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($0, $cor0.a)])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
      +- LogicalValues(tuples=[[{ 1, 2 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($2, $0)], joinType=[inner], isAnti=[false])
   :- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
   :  +- LogicalValues(tuples=[[{ 1, 2 }]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_LeftJoin1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[left])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $0)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_LeftJoin1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[left])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $0)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE l.a = r.c LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(fetch=[1])
  LogicalProject(EXPR$0=[1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE l.a = r.c LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(fetch=[1])
  LogicalProject(EXPR$0=[1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT 1 FROM (SELECT c FROM r LIMIT 1) r2 WHERE l.a = r2.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalSort(fetch=[1])
    LogicalProject(c=[$0])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalFilter(condition=[true])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(c=[$0])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT 1 FROM (SELECT c FROM r LIMIT 1) r2 WHERE l.a = r2.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalSort(fetch=[1])
    LogicalProject(c=[$0])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalFilter(condition=[true])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(c=[$0])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT SUM(r.e) OVER() FROM r WHERE l.c < r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(<($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[<($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT SUM(r.e) OVER() FROM r WHERE l.c < r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(<($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[<($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_RightJoin2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r RIGHT JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[right])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[right])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_RightJoin2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r RIGHT JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[right])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($3, $1)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[right])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE a = c ORDER BY d LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], d=[$1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$2])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], d=[$1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE a = c ORDER BY d LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], d=[$1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$2])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], d=[$1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE a = c ORDER BY c LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], c=[$0])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT 1 FROM r WHERE a = c ORDER BY c LIMIT 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], c=[$0])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE EXISTS (SELECT * FROM x))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, x]])
})])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
               :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :  :- LogicalTableScan(table=[[builtin, default, r]])
               :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
               +- LogicalProject($f0=[IS NOT NULL($0)])
                  +- LogicalAggregate(group=[{}], m=[MIN($0)])
                     +- LogicalProject(i=[true])
                        +- LogicalTableScan(table=[[builtin, default, x]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE EXISTS (SELECT * FROM x))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, x]])
})])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
               :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :  :- LogicalTableScan(table=[[builtin, default, r]])
               :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
               +- LogicalProject($f0=[IS NOT NULL($0)])
                  +- LogicalAggregate(group=[{}], m=[MIN($0)])
                     +- LogicalProject(i=[true])
                        +- LogicalTableScan(table=[[builtin, default, x]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r WHERE EXISTS (SELECT * FROM x)) t, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalProject(d=[$0], e=[$1], f=[$2])
    LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, x]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalProject(d=[$0], e=[$1], f=[$2])
               :  +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
               :     :- LogicalTableScan(table=[[builtin, default, r]])
               :     +- LogicalProject($f0=[IS NOT NULL($0)])
               :        +- LogicalAggregate(group=[{}], m=[MIN($0)])
               :           +- LogicalProject(i=[true])
               :              +- LogicalTableScan(table=[[builtin, default, x]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r WHERE EXISTS (SELECT * FROM x)) t, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalProject(d=[$0], e=[$1], f=[$2])
    LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, x]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalProject(d=[$0], e=[$1], f=[$2])
               :  +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
               :     :- LogicalTableScan(table=[[builtin, default, r]])
               :     +- LogicalProject($f0=[IS NOT NULL($0)])
               :        +- LogicalAggregate(group=[{}], m=[MIN($0)])
               :           +- LogicalProject(i=[true])
               :              +- LogicalTableScan(table=[[builtin, default, x]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT a, b, d FROM l, r) lr WHERE EXISTS (SELECT * FROM r where c > 0) AND a < 100]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[>($0, 0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), <($0, 100))])
   +- LogicalProject(a=[$0], b=[$1], d=[$3])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[<($0, 100)])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], d=[$3])
      :  +- LogicalJoin(condition=[true], joinType=[inner])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($0, 0)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT a, b, d FROM l, r) lr WHERE EXISTS (SELECT * FROM r where c > 0) AND a < 100]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[>($0, 0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), <($0, 100))])
   +- LogicalProject(a=[$0], b=[$1], d=[$3])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[<($0, 100)])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], d=[$3])
      :  +- LogicalJoin(condition=[true], joinType=[inner])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($0, 0)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT (NOT EXISTS (SELECT * FROM r)) AND l.b = 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(NOT(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}))), =($1, 10))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=($1, 10)])
   +- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT (NOT EXISTS (SELECT * FROM r)) AND l.b = 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(NOT(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}))), =($1, 10))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=($1, 10)])
   +- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere5[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (EXISTS (SELECT d FROM r)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere5[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (EXISTS (SELECT d FROM r)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere6[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT l.b IS NULL FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere6[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT l.b IS NULL FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$2], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r WHERE e > 0)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), EXISTS({
LogicalFilter(condition=[>($1, 0)])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[>($1, 10)])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($1, 0)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r WHERE e > 0)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), EXISTS({
LogicalFilter(condition=[>($1, 0)])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[>($1, 10)])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($1, 0)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, 'abc'), NOT(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})))))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, 'abc'), NOT(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
})))))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition4[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE EXISTS (SELECT d, j + 1 FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($1, $3)], joinType=[full])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(j=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(j=[$1])
                  +- LogicalFilter(condition=[>($0, 10)])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition4[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE EXISTS (SELECT d, j + 1 FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($1, $3)], joinType=[full])
  LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(j=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(j=[$1])
                  +- LogicalFilter(condition=[>($0, 10)])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition5[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT MAX(e), MIN(d) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
  LogicalProject(f=[$2], e=[$1], d=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
               +- LogicalProject(f=[$2], e=[$1], d=[$0])
                  +- LogicalFilter(condition=[<($0, 3)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition5[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT MAX(e), MIN(d) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
  LogicalProject(f=[$2], e=[$1], d=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
               +- LogicalProject(f=[$2], e=[$1], d=[$0])
                  +- LogicalFilter(condition=[<($0, 3)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition6[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT e, f FROM r WHERE d > 10 UNION SELECT j, k FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalUnion(all=[false])
  LogicalProject(e=[$1], f=[$2])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(j=[$1], k=[$2])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalUnion(all=[false])
               :- LogicalProject(e=[$1], f=[$2])
               :  +- LogicalFilter(condition=[>($0, 10)])
               :     +- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(j=[$1], k=[$2])
                  +- LogicalFilter(condition=[<($0, 100)])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition6[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT e, f FROM r WHERE d > 10 UNION SELECT j, k FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalUnion(all=[false])
  LogicalProject(e=[$1], f=[$2])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(j=[$1], k=[$2])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalUnion(all=[false])
               :- LogicalProject(e=[$1], f=[$2])
               :  +- LogicalFilter(condition=[>($0, 10)])
               :     +- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(j=[$1], k=[$2])
                  +- LogicalFilter(condition=[<($0, 100)])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a = r.d) AND a IN (SELECT i FROM t1 WHERE l.b = t1.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($0, {
LogicalProject(i=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, t1]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(i=[$0], j=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a = r.d) AND a IN (SELECT i FROM t1 WHERE l.b = t1.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($0, {
LogicalProject(i=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, t1]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(i=[$0], j=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT j FROM t1)  AND EXISTS (SELECT * FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($1, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(j=[$1])
   :     +- LogicalTableScan(table=[[builtin, default, t1]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT j FROM t1)  AND EXISTS (SELECT * FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($1, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(j=[$1])
   :     +- LogicalTableScan(table=[[builtin, default, t1]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnLateralTable1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[=($cor1.a, $0)])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($2, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnLateralTable1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[=($cor1.a, $0)])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($2, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r where l.b = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r where l.b = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 1 AND a IN (SELECT c FROM r WHERE l.b = r.d AND r.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 1)])
   +- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[>($0, 10)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 1 AND a IN (SELECT c FROM r WHERE l.b = r.d AND r.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 1)])
   +- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[>($0, 10)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 1 AND a + 1 IN (SELECT c FROM r WHERE l.b = r.d AND r.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, 1)])
      +- SemiJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
         :  +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(c=[$0], d=[$1])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 1 AND a + 1 IN (SELECT c FROM r WHERE l.b = r.d AND r.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, 1)])
      +- SemiJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
         :  +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(c=[$0], d=[$1])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE l.b > r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE l.b > r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere5[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l l1 WHERE a IN (SELECT a FROM l WHERE a < 3 AND l1.b = l.b GROUP BY a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[AND(<($0, 3), =($cor0.b, $1))])
      LogicalTableScan(table=[[builtin, default, l]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalProject(a=[$0], b=[$1])
               +- LogicalFilter(condition=[<($0, 3)])
                  +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere5[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l l1 WHERE a IN (SELECT a FROM l WHERE a < 3 AND l1.b = l.b GROUP BY a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[AND(<($0, 3), =($cor0.b, $1))])
      LogicalTableScan(table=[[builtin, default, l]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalProject(a=[$0], b=[$1])
               +- LogicalFilter(condition=[<($0, 3)])
                  +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere6[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r where CAST(l.b AS INTEGER) = r.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER NOT NULL, $0)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), =($2, $3))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], b0=[CAST($1):INTEGER NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere6[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r where CAST(l.b AS INTEGER) = r.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, $0)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), =($2, $3))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere7[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE l.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), $2)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[>($1, 10)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere7[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE l.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($0, $3), $2)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[>($1, 10)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE l.c = r.f AND r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$0], e=[$1])
            +- LogicalProject(f=[$2], e=[$1])
               +- LogicalFilter(condition=[<($0, 3)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE l.c = r.f AND r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$0], e=[$1])
            +- LogicalProject(f=[$2], e=[$1])
               +- LogicalFilter(condition=[<($0, 3)])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r WHERE l.b = r.e) r1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalFilter(condition=[=($cor0.b, $1)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[*($1, 5)], e=[$0])
      +- LogicalAggregate(group=[{0}], d=[SUM($1)])
         +- LogicalProject(e=[$1], d=[$0])
            +- LogicalProject(d=[$0], e=[$1])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r WHERE l.b = r.e) r1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalFilter(condition=[=($cor0.b, $1)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[*($1, 5)], e=[$0])
      +- LogicalAggregate(group=[{0}], d=[SUM($1)])
         +- LogicalProject(e=[$1], d=[$0])
            +- LogicalProject(d=[$0], e=[$1])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$1], $f0=[$0])
            +- LogicalProject($f0=[0], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$1], $f0=[$0])
            +- LogicalProject($f0=[0], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r WHERE l.c = r.f GROUP BY d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], EXPR$1=[$2], f=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$1=[COUNT()])
         +- LogicalProject(d=[$0], f=[$1])
            +- LogicalProject(d=[$0], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r WHERE l.c = r.f GROUP BY d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], EXPR$1=[$2], f=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$1=[COUNT()])
         +- LogicalProject(d=[$0], f=[$1])
            +- LogicalProject(d=[$0], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate5[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE l.c = r.f GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$4], f=[$1])
      +- LogicalProject(d=[$0], f=[$1], $f2=[true], $f3=[1], EXPR$0=[$2])
         +- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($4)])
            +- LogicalProject(d=[$0], f=[$4], $f1=[$1], $f2=[$2], e=[$3])
               +- LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate5[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE l.c = r.f GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$4], f=[$1])
      +- LogicalProject(d=[$0], f=[$1], $f2=[true], $f3=[1], EXPR$0=[$2])
         +- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($4)])
            +- LogicalProject(d=[$0], f=[$4], $f1=[$1], $f2=[$2], e=[$3])
               +- LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate6[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r WHERE l.c = r.f GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$5], d=[$0], f=[$2])
      +- LogicalProject(d=[$0], e=[$1], f=[$2], $f3=[true], $f4=[1], EXPR$0=[$3])
         +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[COUNT()])
            +- LogicalProject(d=[$0], e=[$2], f=[$4], $f1=[$1], $f3=[$3])
               +- LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate6[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r WHERE l.c = r.f GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$5], d=[$0], f=[$2])
      +- LogicalProject(d=[$0], e=[$1], f=[$2], $f3=[true], $f4=[1], EXPR$0=[$3])
         +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[COUNT()])
            +- LogicalProject(d=[$0], e=[$2], f=[$4], $f1=[$1], $f3=[$3])
               +- LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate7[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT min(e) FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE rk < 2 AND l.a = t.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[AND(<($2, 2), =($cor0.a, $0))])
      LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], d=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MIN($1)])
         +- LogicalProject(d=[$1], e=[$0])
            +- LogicalProject(e=[$1], d=[$0])
               +- LogicalFilter(condition=[<($2, 2)])
                  +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate7[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT min(e) FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE rk < 2 AND l.a = t.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[AND(<($2, 2), =($cor0.a, $0))])
      LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1], d=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MIN($1)])
         +- LogicalProject(d=[$1], e=[$0])
            +- LogicalProject(e=[$1], d=[$0])
               +- LogicalFilter(condition=[<($2, 2)])
                  +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate8[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT AVG(e) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(CAST($1):DOUBLE NOT NULL, {
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):DOUBLE NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[$1], f=[$0])
         +- LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])
            +- LogicalProject(f=[$1], e=[$0])
               +- LogicalProject(e=[$1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate8[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT AVG(e) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(CAST($1):DOUBLE, {
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):DOUBLE])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[$1], f=[$0])
         +- LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])
            +- LogicalProject(f=[$1], e=[$0])
               +- LogicalProject(e=[$1], f=[$2])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate9[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[>($cor0.c, $1)])
    LogicalProject(d=[$1], f=[$0])
      LogicalAggregate(group=[{0}], d=[MAX($1)])
        LogicalProject(f=[$2], d=[$0])
          LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), >($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$1], d0=[CAST($0):BIGINT NOT NULL])
      +- LogicalProject(d=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalProject(d=[$1], f=[$0])
               +- LogicalAggregate(group=[{0}], d=[MAX($1)])
                  +- LogicalProject(f=[$0], d=[$1])
                     +- LogicalProject(f=[$2], d=[$0])
                        +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate9[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[>($cor0.c, $1)])
    LogicalProject(d=[$1], f=[$0])
      LogicalAggregate(group=[{0}], d=[MAX($1)])
        LogicalProject(f=[$2], d=[$0])
          LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), >($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalProject(d=[$1], f=[$0])
               +- LogicalAggregate(group=[{0}], d=[MAX($1)])
                  +- LogicalProject(f=[$0], d=[$1])
                     +- LogicalProject(f=[$2], d=[$0])
                        +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_AggregateOver1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$0], f=[$1])
            +- LogicalProject(e=[$1], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_AggregateOver1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$0], f=[$1])
            +- LogicalProject(e=[$1], f=[$2])
               +- LogicalFilter(condition=[true])
                  +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case1[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.a, $0)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($0, $4))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case1[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.a, $0)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($0, $4))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case2[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[$0], i=[true])
      :           +- LogicalProject(EXPR$0=[1])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case2[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[$0], i=[true])
      :           +- LogicalProject(EXPR$0=[1])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case3[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalProject(i=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case3[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalProject(i=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case4[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, CASE(IS NOT NULL($6), true, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{0, 1}])
      :     :     +- LogicalProject(i=[$0], i0=[true])
      :     :        +- LogicalProject(i=[$0])
      :     :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$1])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case4[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, CASE(=($7, 0), false, IS NULL($0), null, IS NOT NULL($10), true, <($8, $7), null, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalProject(i=[$0])
      :     :  :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$1])
      :     :        +- LogicalTableScan(table=[[builtin, default, t2]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$1])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case5[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($1, $4), =($3, $5), =($2, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, CASE(IS NOT NULL($6), true, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{0, 1}])
      :     :     +- LogicalProject(i=[$0], i0=[true])
      :     :        +- LogicalProject(i=[$0])
      :     :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$1])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(e=[$1], d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case5[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($1, $4), =($3, $5), =($2, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, CASE(=($7, 0), false, IS NULL($0), null, IS NOT NULL($10), true, <($8, $7), null, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalProject(i=[$0])
      :     :  :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$1])
      :     :        +- LogicalTableScan(table=[[builtin, default, t2]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$1])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(e=[$1], d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT CAST(e AS INTEGER) FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[CAST($1):INTEGER NOT NULL])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER NOT NULL, CAST($0):INTEGER NOT NULL)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($0, $4), =($3, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[$0], d=[$1], d0=[CAST($1):INTEGER NOT NULL])
         +- LogicalProject(EXPR$0=[CAST($1):INTEGER NOT NULL], d=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT CAST(e AS INTEGER) FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[CAST($1):INTEGER])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, CAST($0):INTEGER)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($0, $4), =($3, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[$0], d=[$1], d0=[CAST($1):INTEGER])
         +- LogicalProject(EXPR$0=[CAST($1):INTEGER], d=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE NOT(NOT(substring(c, 1, 5) IN (SELECT substring(f, 1, 5) FROM r WHERE l.b + 1 = r.e)))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[IN(SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3])
      +- SemiJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[+($1, 1)])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
         :     +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE NOT(NOT(substring(c, 1, 5) IN (SELECT substring(f, 1, 5) FROM r WHERE l.b + 1 = r.e)))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[IN(SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3])
      +- SemiJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[+($1, 1)])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
         :     +- LogicalTableScan(table=[[builtin, default, l]])
         +- LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r where l.b = r.e))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r where l.b = r.e))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin1[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT NOT NULL])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[inner])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin1[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[inner])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin2[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin2[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin3[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e FROM r WHERE l.a = r.d AND r.e < 50) SELECT e FROM r1 INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r1.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(e=[$0])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(e=[$0], d=[$1], k=[$3])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(e=[$1], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(j=[$1], k=[$2])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin3[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e FROM r WHERE l.a = r.d AND r.e < 50) SELECT e FROM r1 INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r1.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(e=[$0])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(e=[$0], d=[$1], k=[$3])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(e=[$1], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(j=[$1], k=[$2])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_LeftJoin2[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[left])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[left])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_LeftJoin2[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[left])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[left])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($2, $4), =($1, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$2], e=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($2, $4), =($1, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$2], e=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, SUBSTRING(c, 1, 5)) IN (SELECT d, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, SUBSTRING($2, 1, 5), {
LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($0, $4), =($3, $5), =($1, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, SUBSTRING(c, 1, 5)) IN (SELECT d, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, SUBSTRING($2, 1, 5), {
LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($0, $4), =($3, $5), =($1, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $5), =($4, $6), =($1, $7))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $5), =($4, $6), =($1, $7))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], f=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], f=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over5[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT rk FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE l.a <> t.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(rk=[$2])
  LogicalFilter(condition=[<>($cor0.a, $0)])
    LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), <>($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(rk=[$2], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over5[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT rk FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE l.a <> t.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(rk=[$2])
  LogicalFilter(condition=[<>($cor0.a, $0)])
    LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), <>($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(rk=[$2], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_RightJoin1[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r RIGHT JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[right])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[right])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_RightJoin1[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r RIGHT JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[right])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[right])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery1[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c > 0) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery1[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c > 0) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t)) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[builtin, default, r]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t)) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[builtin, default, r]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery3[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t WHERE r.d = t.f)) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($cor1.d, $1)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor1]])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$0])
      :        +- LogicalProject(d=[$1])
      :           +- LogicalProject(c=[$0], d=[$1])
      :              +- LogicalJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[inner])
      :                 :- LogicalTableScan(table=[[builtin, default, r]])
      :                 +- LogicalAggregate(group=[{0, 1}])
      :                    +- LogicalProject(e=[$0], f=[$1])
      :                       +- LogicalProject(e=[$0], f=[$1])
      :                          +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery3[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t WHERE r.d = t.f)) IN (SELECT f FROM t WHERE t.e = l.a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($cor1.d, $1)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor1]])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$0])
      :        +- LogicalProject(d=[$1])
      :           +- LogicalProject(c=[$0], d=[$1])
      :              +- LogicalJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[inner])
      :                 :- LogicalTableScan(table=[[builtin, default, r]])
      :                 +- LogicalAggregate(group=[{0, 1}])
      :                    +- LogicalProject(e=[$0], f=[$1])
      :                       +- LogicalProject(e=[$0], f=[$1])
      :                          +- LogicalFilter(condition=[IS NOT NULL($1)])
      :                             +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery5[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
         :  :- LogicalTableScan(table=[[builtin, default, l]])
         :  +- LogicalProject(c=[$0], d=[$1])
         :     +- LogicalFilter(condition=[>($0, 10)])
         :        +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5, $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery5[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
         :  :- LogicalTableScan(table=[[builtin, default, l]])
         :  +- LogicalProject(c=[$0], d=[$1])
         :     +- LogicalFilter(condition=[>($0, 10)])
         :        +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5, $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery6[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE l.a = t.e AND t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalProject(a=[$0], b=[$1], $f0=[CAST(*(0.5, $3)):DECIMAL(12, 1)])
      +- LogicalFilter(condition=[>($1, CAST(*(0.5, $3)):DECIMAL(12, 1))])
         +- LogicalJoin(condition=[=($0, $2)], joinType=[left])
            :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
            :  :- LogicalTableScan(table=[[builtin, default, l]])
            :  +- LogicalProject(c=[$0], d=[$1])
            :     +- LogicalFilter(condition=[>($0, 10)])
            :        +- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
               +- LogicalProject(e1=[$1], e=[$0])
                  +- LogicalProject(e=[$0], e1=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery6[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE l.a = t.e AND t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalProject(a=[$0], b=[$1], $f0=[CAST(*(0.5, $3)):DECIMAL(12, 1)])
      +- LogicalFilter(condition=[>($1, CAST(*(0.5, $3)):DECIMAL(12, 1))])
         +- LogicalJoin(condition=[=($0, $2)], joinType=[left])
            :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
            :  :- LogicalTableScan(table=[[builtin, default, l]])
            :  +- LogicalProject(c=[$0], d=[$1])
            :     +- LogicalFilter(condition=[>($0, 10)])
            :        +- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
               +- LogicalProject(e1=[$1], e=[$0])
                  +- LogicalProject(e=[$0], e1=[$0])
                     +- LogicalFilter(condition=[AND(=($0, $0), <($1, 100))])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery7[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > (SELECT SUM(e) FROM t WHERE r.c = t.e AND t.f < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor1.c, $0), <($1, 100))])
      LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalProject(c=[$0], d=[$1], EXPR$0=[$3])
            +- LogicalProject(c=[$0], d=[$1], e1=[CAST($2):INTEGER], EXPR$0=[CAST($3):INTEGER])
               +- LogicalJoin(condition=[AND(=($0, $2), >($0, $3))], joinType=[inner])
                  :- LogicalTableScan(table=[[builtin, default, r]])
                  +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
                     +- LogicalProject(e1=[$1], e=[$0])
                        +- LogicalProject(e=[$0], e1=[$0])
                           +- LogicalFilter(condition=[<($1, 100)])
                              +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery7[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d AND c > (SELECT SUM(e) FROM t WHERE r.c = t.e AND t.f < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor1.c, $0), <($1, 100))])
      LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalProject(c=[$0], d=[$1], EXPR$0=[$3])
            +- LogicalJoin(condition=[AND(=($0, $2), >($0, $3))], joinType=[inner])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
                  +- LogicalProject(e1=[$1], e=[$0])
                     +- LogicalProject(e=[$0], e1=[$0])
                        +- LogicalFilter(condition=[AND(=($0, $0), <($1, 100))])
                           +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_UnsupportedCondition1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a IN (SELECT d FROM r WHERE r.d = l.b)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(IN($0, {
LogicalProject(d=[$1])
  LogicalFilter(condition=[=($1, $cor4.b)])
    LogicalTableScan(table=[[builtin, default, r]])
}))], variablesSet=[[$cor4]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[AND(=($2, $3), =($3, $1))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving1[false]">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM l GROUP BY b HAVING COUNT(*) > 2 AND b IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($0, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving1[true]">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM l GROUP BY b HAVING COUNT(*) > 2 AND b IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($0, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving2[false]">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM l GROUP BY b HAVING COUNT(*) > 2 AND MAX(b) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($3, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving2[true]">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM l GROUP BY b HAVING COUNT(*) > 2 AND MAX(b) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($3, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE d IN (SELECT i FROM x))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, x]])
})])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- SemiJoin(condition=[=($0, $4)], joinType=[inner], isAnti=[false])
         :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :  :- LogicalTableScan(table=[[builtin, default, r]])
         :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(i=[$0])
            +- LogicalTableScan(table=[[builtin, default, x]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE d IN (SELECT i FROM x))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, x]])
})])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- SemiJoin(condition=[=($0, $4)], joinType=[inner], isAnti=[false])
         :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :  :- LogicalTableScan(table=[[builtin, default, r]])
         :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(i=[$0])
            +- LogicalTableScan(table=[[builtin, default, x]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r WHERE d IN (SELECT i FROM x)) t, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalProject(d=[$0], e=[$1], f=[$2])
      LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, x]])
})])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalProject(d=[$0], e=[$1], f=[$2])
         :  +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
         :     :- LogicalTableScan(table=[[builtin, default, r]])
         :     +- LogicalProject(i=[$0])
         :        +- LogicalTableScan(table=[[builtin, default, x]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r WHERE d IN (SELECT i FROM x)) t, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalProject(d=[$0], e=[$1], f=[$2])
      LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, x]])
})])
        LogicalTableScan(table=[[builtin, default, r]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalProject(d=[$0], e=[$1], f=[$2])
         :  +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
         :     :- LogicalTableScan(table=[[builtin, default, r]])
         :     +- LogicalProject(i=[$0])
         :        +- LogicalTableScan(table=[[builtin, default, x]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalProject(d=[$0], e=[$1], f=[$2], f1=[$3])
    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalProject(d=[$0], e=[$1], f=[$2], f1=[$3])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalProject(d=[$0], e=[$1], f=[$2], f1=[$3])
    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
      LogicalTableScan(table=[[builtin, default, r]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(f1=[$3])
      +- LogicalProject(d=[$0], e=[$1], f=[$2], f1=[$3])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d < 100) AND b > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[<($1, 100)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, 10))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 10)])
   +- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d < 100) AND b > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[<($1, 100)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, 10))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 10)])
   +- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a + 1 IN (SELECT c FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a + 1 IN (SELECT c FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(c=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a * b IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(*($0, $1), {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[*($0, $1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a * b IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(*($0, $1), {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[*($0, $1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere5[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE CAST(a AS BIGINT) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(CAST($0):BIGINT NOT NULL, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT NOT NULL])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere5[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE CAST(a AS BIGINT) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(CAST($0):BIGINT, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere6[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l l1 WHERE a IN (SELECT a FROM l WHERE a < 3 GROUP BY a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[builtin, default, l]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{0}])
      +- LogicalProject(a=[$0])
         +- LogicalFilter(condition=[<($0, 3)])
            +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere6[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l l1 WHERE a IN (SELECT a FROM l WHERE a < 3 GROUP BY a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[builtin, default, l]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{0}])
      +- LogicalProject(a=[$0])
         +- LogicalFilter(condition=[<($0, 3)])
            +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r) r1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[*($0, 5)])
      +- LogicalAggregate(group=[{}], d=[SUM($0)])
         +- LogicalProject(d=[$0])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r) r1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[*($0, 5)])
      +- LogicalAggregate(group=[{}], d=[SUM($0)])
         +- LogicalProject(d=[$0])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
      +- LogicalProject($f0=[0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
      +- LogicalProject($f0=[0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r GROUP BY d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r GROUP BY d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate5[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$3])
      +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
         +- LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate5[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$3])
      +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
         +- LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate6[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$4], d=[$0])
      +- LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
         +- LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate6[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$4], d=[$0])
      +- LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
         +- LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_AggregateOver[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      +- LogicalAggregate(group=[{0}])
         +- LogicalProject(e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_AggregateOver[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r GROUP BY r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      +- LogicalAggregate(group=[{0}])
         +- LogicalProject(e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case1[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case1[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case2[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[$0], i=[true])
      :           +- LogicalProject(EXPR$0=[1])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case2[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[$0], i=[true])
      :           +- LogicalProject(EXPR$0=[1])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case3[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalProject(i=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case3[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalProject(i=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t1]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case4[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, CASE(IS NOT NULL($6), true, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{0, 1}])
      :     :     +- LogicalProject(i=[$0], i0=[true])
      :     :        +- LogicalProject(i=[$0])
      :     :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case4[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[=($3, $4)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, CASE(=($7, 0), false, IS NULL($0), null, IS NOT NULL($10), true, <($8, $7), null, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalProject(i=[$0])
      :     :  :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[builtin, default, t2]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case5[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($1, $4), =($3, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, CASE(IS NOT NULL($6), true, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  +- LogicalAggregate(group=[{0, 1}])
      :     :     +- LogicalProject(i=[$0], i0=[true])
      :     :        +- LogicalProject(i=[$0])
      :     :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(e=[$1], d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case5[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($1, $4), =($3, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, CASE(=($7, 0), false, IS NULL($0), null, IS NOT NULL($10), true, <($8, $7), null, false), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalProject(i=[$0])
      :     :  :           +- LogicalTableScan(table=[[builtin, default, t1]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[builtin, default, t2]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalProject(j=[$0])
      :              +- LogicalTableScan(table=[[builtin, default, t2]])
      +- LogicalProject(e=[$1], d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case6[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE ( (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END),  (CASE WHEN b IN (SELECT j FROM t2) THEN 3 ELSE 4 END))  IN (SELECT d, e FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), CASE(IN($1, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 3, 4), {
LogicalProject(d=[$0], e=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4])
      +- SemiJoin(condition=[AND(=($3, $6), =($5, $7))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4], $f40=[CAST($4):BIGINT NOT NULL])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(IS NOT NULL($4), true, false), 1, 2)], $f4=[CASE(CASE(IS NOT NULL($6), true, false), 3, 4)])
         :     +- LogicalJoin(condition=[=($1, $5)], joinType=[left])
         :        :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
         :        :  :- LogicalTableScan(table=[[builtin, default, l]])
         :        :  +- LogicalAggregate(group=[{0, 1}])
         :        :     +- LogicalProject(i=[$0], i0=[true])
         :        :        +- LogicalProject(i=[$0])
         :        :           +- LogicalTableScan(table=[[builtin, default, t1]])
         :        +- LogicalAggregate(group=[{0, 1}])
         :           +- LogicalProject(j=[$0], i=[true])
         :              +- LogicalProject(j=[$0])
         :                 +- LogicalTableScan(table=[[builtin, default, t2]])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case6[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE ( (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END),  (CASE WHEN b IN (SELECT j FROM t2) THEN 3 ELSE 4 END))  IN (SELECT d, e FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[builtin, default, t1]])
}), 1, 2), CASE(IN($1, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[builtin, default, t2]])
}), 3, 4), {
LogicalProject(d=[$0], e=[$1])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4])
      +- SemiJoin(condition=[AND(=($3, $6), =($5, $7))], joinType=[inner], isAnti=[false])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4], $f40=[CAST($4):BIGINT NOT NULL])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(CASE(=($3, 0), false, IS NULL($0), null, IS NOT NULL($6), true, <($4, $3), null, false), 1, 2)], $f4=[CASE(CASE(=($7, 0), false, IS NULL($1), null, IS NOT NULL($10), true, <($8, $7), null, false), 3, 4)])
         :     +- LogicalJoin(condition=[=($1, $9)], joinType=[left])
         :        :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
         :        :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :  :  :- LogicalTableScan(table=[[builtin, default, l]])
         :        :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
         :        :  :  :     +- LogicalProject(i=[$0])
         :        :  :  :        +- LogicalTableScan(table=[[builtin, default, t1]])
         :        :  :  +- LogicalAggregate(group=[{0, 1}])
         :        :  :     +- LogicalProject(i=[$0], i0=[true])
         :        :  :        +- LogicalProject(i=[$0])
         :        :  :           +- LogicalTableScan(table=[[builtin, default, t1]])
         :        :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
         :        :     +- LogicalProject(j=[$0])
         :        :        +- LogicalTableScan(table=[[builtin, default, t2]])
         :        +- LogicalAggregate(group=[{0, 1}])
         :           +- LogicalProject(j=[$0], i=[true])
         :              +- LogicalProject(j=[$0])
         :                 +- LogicalTableScan(table=[[builtin, default, t2]])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, 'abc')))])
   +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition3[false]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[full])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[>($0, 10)])
        LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[=($1, $4)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition3[true]">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[full])
    LogicalTableScan(table=[[builtin, default, r]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[>($0, 10)])
        LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- SemiJoin(condition=[=($1, $4)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
            :- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalProject(j=[$1])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition4[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition4[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition5[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT e FROM r WHERE d > 10 UNION SELECT i FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalUnion(all=[false])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalUnion(all=[false])
      :- LogicalProject(e=[$1])
      :  +- LogicalFilter(condition=[>($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($0, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition5[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT e FROM r WHERE d > 10 UNION SELECT i FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalUnion(all=[false])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[builtin, default, r]])
  LogicalProject(i=[$0])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalUnion(all=[false])
      :- LogicalProject(e=[$1])
      :  +- LogicalFilter(condition=[>($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($0, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 1, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 1), $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 1, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 1), $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 1)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- SemiJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
         +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery1[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c > 0) IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery1[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c > 0) IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery2[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t)) IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[builtin, default, r]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery2[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE (SELECT MAX(d) FROM r WHERE c IN (SELECT e FROM t)) IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
})])
      LogicalTableScan(table=[[builtin, default, r]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[builtin, default, r]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery3[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[builtin, default, t]])
})))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
         :  :- LogicalTableScan(table=[[builtin, default, l]])
         :  +- LogicalProject(c=[$0])
         :     +- LogicalFilter(condition=[>($1, 10)])
         :        +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5, $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery3[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[builtin, default, t]])
})))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
         :  :- LogicalTableScan(table=[[builtin, default, l]])
         :  +- LogicalProject(c=[$0])
         :     +- LogicalFilter(condition=[>($1, 10)])
         :        +- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5, $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery4[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE l.a = t.e AND t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalProject(a=[$0], b=[$1], $f0=[CAST(*(0.5, $3)):DECIMAL(12, 1)])
      +- LogicalFilter(condition=[>($1, CAST(*(0.5, $3)):DECIMAL(12, 1))])
         +- LogicalJoin(condition=[=($0, $2)], joinType=[left])
            :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
            :  :- LogicalTableScan(table=[[builtin, default, l]])
            :  +- LogicalProject(c=[$0])
            :     +- LogicalFilter(condition=[>($1, 10)])
            :        +- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
               +- LogicalProject(e1=[$1], e=[$0])
                  +- LogicalProject(e=[$0], e1=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery4[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM t WHERE l.a = t.e AND t.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5, $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[builtin, default, t]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalProject(a=[$0], b=[$1], $f0=[CAST(*(0.5, $3)):DECIMAL(12, 1)])
      +- LogicalFilter(condition=[>($1, CAST(*(0.5, $3)):DECIMAL(12, 1))])
         +- LogicalJoin(condition=[=($0, $2)], joinType=[left])
            :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
            :  :- LogicalTableScan(table=[[builtin, default, l]])
            :  +- LogicalProject(c=[$0])
            :     +- LogicalFilter(condition=[>($1, 10)])
            :        +- LogicalTableScan(table=[[builtin, default, r]])
            +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
               +- LogicalProject(e1=[$1], e=[$0])
                  +- LogicalProject(e=[$0], e1=[$0])
                     +- LogicalFilter(condition=[AND(=($0, $0), <($1, 100))])
                        +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery6[false]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > (SELECT SUM(e) FROM t WHERE r.c = t.e AND t.f < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor0.c, $0), <($1, 100))])
      LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalProject(c=[$0], d=[$1], EXPR$0=[$3])
            +- LogicalProject(c=[$0], d=[$1], e1=[CAST($2):INTEGER], EXPR$0=[CAST($3):INTEGER])
               +- LogicalJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[inner])
                  :- LogicalTableScan(table=[[builtin, default, r]])
                  +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
                     +- LogicalProject(e1=[$1], e=[$0])
                        +- LogicalProject(e=[$0], e1=[$0])
                           +- LogicalFilter(condition=[<($1, 100)])
                              +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery6[true]">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE a IN (SELECT c FROM r WHERE d > (SELECT SUM(e) FROM t WHERE r.c = t.e AND t.f < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor0.c, $0), <($1, 100))])
      LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalProject(c=[$0], d=[$1], EXPR$0=[$3])
            +- LogicalJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[inner])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
                  +- LogicalProject(e1=[$1], e=[$0])
                     +- LogicalProject(e=[$0], e1=[$0])
                        +- LogicalFilter(condition=[AND(=($0, $0), <($1, 100))])
                           +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_UnsupportedCondition[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a IN (SELECT c FROM r)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):INTEGER NOT NULL, 50))])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=(CAST($2):INTEGER NOT NULL, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):INTEGER NOT NULL, 1))])
   +- SemiJoin(condition=[=($0, $6)], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[=($1, $6)], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):INTEGER NOT NULL, 50)])
      :        +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):INTEGER, 50))])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=(CAST($2):INTEGER, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):INTEGER, 1))])
   +- SemiJoin(condition=[=($0, $6)], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[=($1, $6)], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):INTEGER, 50)])
      :        +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND (c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):INTEGER NOT NULL, 50))])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=(CAST($2):INTEGER NOT NULL, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):INTEGER NOT NULL, 1))])
   +- SemiJoin(condition=[=($0, $6)], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[=($1, $6)], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):INTEGER NOT NULL, 50)])
      :        +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND (c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):INTEGER, 50))])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=(CAST($2):INTEGER, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):INTEGER, 1))])
   +- SemiJoin(condition=[=($0, $6)], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[=($1, $6)], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):INTEGER, 50)])
      :        +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r) AND EXISTS (SELECT * FROM t WHERE l.a = t.i AND t.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject($f0=[IS NOT NULL($0)])
   :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
   :        +- LogicalProject(i=[true])
   :           +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(i=[$0])
      +- LogicalFilter(condition=[<($1, 100)])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r) AND EXISTS (SELECT * FROM t WHERE l.a = t.i AND t.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[builtin, default, r]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject($f0=[IS NOT NULL($0)])
   :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
   :        +- LogicalProject(i=[true])
   :           +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(i=[$0])
      +- LogicalFilter(condition=[<($1, 100)])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a <> r.d) AND EXISTS (SELECT * FROM t WHERE j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[<>($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[<>($0, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalFilter(condition=[<($1, 100)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a <> r.d) AND EXISTS (SELECT * FROM t WHERE j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[<>($cor0.a, $0)])
  LogicalTableScan(table=[[builtin, default, r]])
}), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[<>($0, $3)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalFilter(condition=[<($1, 100)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t) AND l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[builtin, default, t]])
}), =($cor0.a, $0))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0])
      +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject($f0=[IS NOT NULL($0)])
            +- LogicalAggregate(group=[{}], m=[MIN($0)])
               +- LogicalProject(i=[true])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t) AND l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[builtin, default, t]])
}), =($cor0.a, $0))])
  LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0])
      +- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject($f0=[IS NOT NULL($0)])
            +- LogicalAggregate(group=[{}], m=[MIN($0)])
               +- LogicalProject(i=[true])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t WHERE r.d = t.i))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.d, $0)])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(i=[$0])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t WHERE r.d = t.i))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.d, $0)])
  LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
  LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[$3], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- SemiJoin(condition=[=($0, $3)], joinType=[inner], isAnti=[false])
               :- LogicalTableScan(table=[[builtin, default, r]])
               +- LogicalProject(i=[$0])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedOnWhere_AND1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.c AND EXISTS (SELECT * FROM t t1 WHERE t1.e > 50) AND b >= 1 AND EXISTS (SELECT * FROM t t2 WHERE t2.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), EXISTS({
LogicalFilter(condition=[>($0, 50)])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=($1, 1), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), >=($1, 1))])
   +- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject($f0=[IS NOT NULL($0)])
      :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
      :        +- LogicalProject(i=[true])
      :           +- LogicalFilter(condition=[>($0, 50)])
      :              +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[<($1, 100)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedOnWhere_AND1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.c AND EXISTS (SELECT * FROM t t1 WHERE t1.e > 50) AND b >= 1 AND EXISTS (SELECT * FROM t t2 WHERE t2.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), EXISTS({
LogicalFilter(condition=[>($0, 50)])
  LogicalTableScan(table=[[builtin, default, t]])
}), >=($1, 1), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, l]])
      +- LogicalTableScan(table=[[builtin, default, r]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), >=($1, 1))])
   +- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
      :- SemiJoin(condition=[$4], joinType=[inner], isAnti=[false])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[builtin, default, l]])
      :  :  +- LogicalTableScan(table=[[builtin, default, r]])
      :  +- LogicalProject($f0=[IS NOT NULL($0)])
      :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
      :        +- LogicalProject(i=[true])
      :           +- LogicalFilter(condition=[>($0, 50)])
      :              +- LogicalTableScan(table=[[builtin, default, t]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[<($1, 100)])
                  +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE c = k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(j=[$1], k=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE c = k)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(j=[$1], k=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE a = i AND k <> 'test')]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[AND(=($cor0.a, $0), <>($2, 'test'))])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(j=[$1], i=[$0])
      +- LogicalFilter(condition=[<>($2, 'test')])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE a = i AND k <> 'test')]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[AND(=($cor0.a, $0), <>($2, 'test'))])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(j=[$1], i=[$0])
      +- LogicalFilter(condition=[<>($2, 'test')])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT r.d FROM r WHERE l.b = r.e AND r.f IN (SELECT t.k FROM t WHERE r.e = t.j))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), IN($2, {
LogicalProject(k=[$2])
  LogicalFilter(condition=[=($cor1.e, $1)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], e=[$1])
      +- SemiJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(k=[$2], j=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT r.d FROM r WHERE l.b = r.e AND r.f IN (SELECT t.k FROM t WHERE r.e = t.j))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), IN($2, {
LogicalProject(k=[$2])
  LogicalFilter(condition=[=($cor1.e, $1)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- SemiJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(d=[$0], e=[$1])
      +- SemiJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(k=[$2], j=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d) AND b IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0], d=[$1])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(f=[$1])
      +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE a IN (SELECT c FROM r WHERE l.b = r.d) AND b IN (SELECT f FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0], d=[$1])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(f=[$1])
      +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN ( SELECT c FROM r) AND b IN (SELECT e FROM t WHERE t.f = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($1, $cor0.b)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($1, $4), =($3, $1))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(e=[$0], f=[$1], e0=[CAST($0):BIGINT NOT NULL])
      +- LogicalProject(e=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN ( SELECT c FROM r) AND b IN (SELECT e FROM t WHERE t.f = l.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($1, $cor0.b)])
    LogicalTableScan(table=[[builtin, default, t]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($1, $4), =($3, $1))], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(e=[$0], f=[$1], e0=[CAST($0):BIGINT])
      +- LogicalProject(e=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t) AND l.b = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
}), =($cor0.b, $1))])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t) AND l.b = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
}), =($cor0.b, $1))])
    LogicalTableScan(table=[[builtin, default, r]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0], d=[$1])
      +- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere4[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t WHERE t.e = r.c))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.c)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- SemiJoin(condition=[AND(=($1, $2), =($3, $0))], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1], e=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere4[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t WHERE t.e = r.c))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.c)])
    LogicalTableScan(table=[[builtin, default, t]])
})], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- SemiJoin(condition=[AND(=($1, $2), =($3, $0))], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1], e=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere1[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN ( SELECT c FROM r) AND b IN (SELECT e FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT NOT NULL])
      +- LogicalProject(e=[$0])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere1[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN ( SELECT c FROM r) AND b IN (SELECT e FROM t)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[builtin, default, r]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($1, $3)], joinType=[inner], isAnti=[false])
   :- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :  :- LogicalTableScan(table=[[builtin, default, l]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[builtin, default, r]])
   +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT])
      +- LogicalProject(e=[$0])
         +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere2[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere2[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT c FROM r WHERE d IN (SELECT f FROM t))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[builtin, default, t]])
})])
    LogicalTableScan(table=[[builtin, default, r]])
})])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- SemiJoin(condition=[=($0, $2)], joinType=[inner], isAnti=[false])
   :- LogicalTableScan(table=[[builtin, default, l]])
   +- LogicalProject(c=[$0])
      +- SemiJoin(condition=[=($1, $2)], joinType=[inner], isAnti=[false])
         :- LogicalTableScan(table=[[builtin, default, r]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere3[true]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a + 1 IN ( SELECT c FROM r WHERE d > 10) AND b * 2 IN (SELECT e FROM t WHERE f < 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN(*($1, 2), {
LogicalProject(e=[$0])
  LogicalFilter(condition=[<($1, 10)])
    LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($3, $5)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[$2], $f3=[*($1, 2)])
      :  +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :     :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :     :  +- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalProject(c=[$0])
      :        +- LogicalFilter(condition=[>($1, 10)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT])
         +- LogicalProject(e=[$0])
            +- LogicalFilter(condition=[<($1, 10)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere3[false]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a + 1 IN ( SELECT c FROM r WHERE d > 10) AND b * 2 IN (SELECT e FROM t WHERE f < 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[builtin, default, r]])
}), IN(*($1, 2), {
LogicalProject(e=[$0])
  LogicalFilter(condition=[<($1, 10)])
    LogicalTableScan(table=[[builtin, default, t]])
}))])
   +- LogicalTableScan(table=[[builtin, default, l]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- SemiJoin(condition=[=($3, $5)], joinType=[inner], isAnti=[false])
      :- LogicalProject(a=[$0], b=[$1], $f2=[$2], $f3=[*($1, 2)])
      :  +- SemiJoin(condition=[=($2, $3)], joinType=[inner], isAnti=[false])
      :     :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :     :  +- LogicalTableScan(table=[[builtin, default, l]])
      :     +- LogicalProject(c=[$0])
      :        +- LogicalFilter(condition=[>($1, 10)])
      :           +- LogicalTableScan(table=[[builtin, default, r]])
      +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT NOT NULL])
         +- LogicalProject(e=[$0])
            +- LogicalFilter(condition=[<($1, 10)])
               +- LogicalTableScan(table=[[builtin, default, t]])
]]>
    </Resource>
  </TestCase>
</Root>
