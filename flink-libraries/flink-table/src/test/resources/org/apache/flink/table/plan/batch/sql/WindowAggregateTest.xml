<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testDecomposableAggFunctions">
    <Resource name="sql">
      <![CDATA[SELECT VAR_POP(c), VAR_SAMP(c), STDDEV_POP(c), STDDEV_SAMP(c), TUMBLE_START(rowtime, INTERVAL '15' MINUTE), TUMBLE_END(rowtime, INTERVAL '15' MINUTE) FROM MyTable1 GROUP BY TUMBLE(rowtime, INTERVAL '15' MINUTE)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1], EXPR$1=[$2], EXPR$2=[$3], EXPR$3=[$4], EXPR$4=[TUMBLE_START($0)], EXPR$5=[TUMBLE_END($0)])
+- LogicalAggregate(group=[{0}], EXPR$0=[VAR_POP($1)], EXPR$1=[VAR_SAMP($1)], EXPR$2=[STDDEV_POP($1)], EXPR$3=[STDDEV_SAMP($1)])
   +- LogicalProject($f0=[TUMBLE($3, 900000)], c=[$2])
      +- LogicalTableScan(table=[[builtin, default, MyTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[CAST(/(-($f0, /(*(CAST($f1), CAST($f1)), $f2)), $f2)) AS EXPR$0, CAST(/(-($f3, /(*(CAST($f1), CAST($f1)), $f2)), CASE(=($f2, 1), null, -($f2, 1)))) AS EXPR$1, CAST(POWER(/(-($f4, /(*(CAST($f1), CAST($f1)), $f2)), $f2), 0.5)) AS EXPR$2, CAST(POWER(/(-($f5, /(*(CAST($f1), CAST($f1)), $f2)), CASE(=($f2, 1), null, -($f2, 1))), 0.5)) AS EXPR$3, CAST(w$start) AS EXPR$4, CAST(w$end) AS EXPR$5])
+- HashWindowAggregate(window=[TumblingGroupWindow('w$, 'rowtime, 900000.millis)], properties=[w$start, w$end, w$rowtime], select=[Final_SUM(sum$0) AS $f0, Final_SUM(sum$1) AS $f1, Final_COUNT(count$2) AS $f2, Final_SUM(sum$3) AS $f3, Final_SUM(sum$4) AS $f4, Final_SUM(sum$5) AS $f5])
   +- Exchange(distribution=[single])
      +- LocalHashWindowAggregate(window=[TumblingGroupWindow('w$, 'rowtime, 900000.millis)], properties=[w$start, w$end, w$rowtime], select=[Partial_SUM($f2) AS sum$0, Partial_SUM(c) AS sum$1, Partial_COUNT(c) AS count$2, Partial_SUM($f3) AS sum$3, Partial_SUM($f4) AS sum$4, Partial_SUM($f5) AS sum$5])
         +- Calc(select=[rowtime, c, *(CAST(c), CAST(c)) AS $f2, *(CAST(c), CAST(c)) AS $f3, *(CAST(c), CAST(c)) AS $f4, *(CAST(c), CAST(c)) AS $f5])
            +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[a, b, c, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoPhaseTumblingWindowHashAgg">
    <Resource name="sql">
      <![CDATA[SELECT avg(c), count(a) FROM MyTable GROUP BY a, d, TUMBLE(b, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$3], EXPR$1=[$4])
+- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[AVG($3)], EXPR$1=[COUNT($0)])
   +- LogicalProject(a=[$0], d=[$3], $f2=[TUMBLE($1, 3000)], c=[$2])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0, EXPR$1])
+- HashWindowAggregate(groupBy=[a, d], window=[TumblingGroupWindow('w$, 'b, 3000.millis)], select=[a, d, Final_AVG(sum$0, count$1) AS EXPR$0, Final_COUNT(count$2) AS EXPR$1])
   +- Exchange(distribution=[hash[a, d]])
      +- LocalHashWindowAggregate(groupBy=[a, d], window=[TumblingGroupWindow('w$, 'b, 3000.millis)], select=[a, d, Partial_AVG(c) AS (sum$0, count$1), Partial_COUNT(a) AS count$2])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoGroupingSlidingWindow">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a), HOP_START(b, INTERVAL '3' SECOND, INTERVAL '3' SECOND), HOP_END(b, INTERVAL '3' SECOND, INTERVAL '3' SECOND)FROM MyTable GROUP BY HOP(b, INTERVAL '3' SECOND, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1], EXPR$1=[HOP_START($0)], EXPR$2=[HOP_END($0)])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
   +- LogicalProject($f0=[HOP($1, 3000, 3000)], a=[$0])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0, CAST(w$start) AS EXPR$1, CAST(w$end) AS EXPR$2])
+- HashWindowAggregate(window=[SlidingGroupWindow('w$, 'b, 3000.millis, 3000.millis)], properties=[w$start, w$end, w$rowtime], select=[Final_SUM(sum$0) AS EXPR$0])
   +- Exchange(distribution=[single])
      +- LocalHashWindowAggregate(window=[SlidingGroupWindow('w$, 'b, 3000.millis, 3000.millis)], properties=[w$start, w$end, w$rowtime], select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[b, a])
            +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoGroupingTumblingWindow">
    <Resource name="sql">
      <![CDATA[SELECT avg(c), sum(a) FROM MyTable GROUP BY TUMBLE(b, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1], EXPR$1=[$2])
+- LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)], EXPR$1=[SUM($2)])
   +- LogicalProject($f0=[TUMBLE($1, 3000)], c=[$2], a=[$0])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(window=[TumblingGroupWindow('w$, 'b, 3000.millis)], select=[Final_AVG(sum$0, count$1) AS EXPR$0, Final_SUM(sum$2) AS EXPR$1])
+- Exchange(distribution=[single])
   +- LocalHashWindowAggregate(window=[TumblingGroupWindow('w$, 'b, 3000.millis)], select=[Partial_AVG(c) AS (sum$0, count$1), Partial_SUM(a) AS sum$2])
      +- Calc(select=[b, c, a])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnePhaseSlidingWindowSortAgg">
    <Resource name="sql">
      <![CDATA[select max(colLarge) from t1 group by customerId, HOP(ts, INTERVAL '3' SECOND, INTERVAL '1' HOUR)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($2)])
   +- LogicalProject(customerId=[$1], $f1=[HOP($0, 3000, 3600000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[customerId], window=[SlidingGroupWindow('w$, 'ts, 3600000.millis, 3000.millis)], select=[customerId, MAX(colLarge) AS EXPR$0])
   +- Sort(orderBy=[customerId ASC, ts ASC])
      +- Exchange(distribution=[hash[customerId]])
         +- Calc(select=[customerId, ts, colLarge])
            +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnePhaseSlidingWindowSortAggWithPaneOptimization">
    <Resource name="sql">
      <![CDATA[select count(colLarge) from t1 group by customerId, HOP(ts, INTERVAL '3' SECOND, INTERVAL '1' HOUR)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT($2)])
   +- LogicalProject(customerId=[$1], $f1=[HOP($0, 3000, 3600000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[customerId], window=[SlidingGroupWindow('w$, 'ts, 3600000.millis, 3000.millis)], select=[customerId, COUNT(colLarge) AS EXPR$0])
   +- Sort(orderBy=[customerId ASC, ts ASC])
      +- Exchange(distribution=[hash[customerId]])
         +- Calc(select=[customerId, ts, colLarge])
            +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnePhaseTumblingWindowHashAgg">
    <Resource name="sql">
      <![CDATA[select count(colLarge) from t1 group by customerId, TUMBLE(ts, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT($2)])
   +- LogicalProject(customerId=[$1], $f1=[TUMBLE($0, 3000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashWindowAggregate(groupBy=[customerId], window=[TumblingGroupWindow('w$, 'ts, 3000.millis)], select=[customerId, COUNT(colLarge) AS EXPR$0])
   +- Exchange(distribution=[hash[customerId]])
      +- Calc(select=[customerId, ts, colLarge])
         +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnePhaseTumblingWindowSortAgg">
    <Resource name="sql">
      <![CDATA[select max(colLarge) from t1 group by customerId, TUMBLE(ts, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($2)])
   +- LogicalProject(customerId=[$1], $f1=[TUMBLE($0, 3000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[customerId], window=[TumblingGroupWindow('w$, 'ts, 3000.millis)], select=[customerId, MAX(colLarge) AS EXPR$0])
   +- Sort(orderBy=[customerId ASC, ts ASC])
      +- Exchange(distribution=[hash[customerId]])
         +- Calc(select=[customerId, ts, colLarge])
            +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoPhaseSlidingWindowHashAgg">
    <Resource name="sql">
      <![CDATA[select count(colLarge) from t1 group by productId, HOP(ts, INTERVAL '3' SECOND, INTERVAL '1' HOUR)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT($2)])
   +- LogicalProject(productId=[$2], $f1=[HOP($0, 3000, 3600000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashWindowAggregate(groupBy=[productId], window=[SlidingGroupWindow('w$, 'ts, 3600000.millis, 3000.millis)], select=[productId, Final_COUNT(count$0) AS EXPR$0])
   +- Exchange(distribution=[hash[productId]])
      +- LocalHashWindowAggregate(groupBy=[productId], window=[SlidingGroupWindow('w$, 'ts, 3600000.millis, 3000.millis)], select=[productId, Partial_COUNT(colLarge) AS count$0])
         +- Calc(select=[productId, ts, colLarge])
            +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoPhaseSlidingWindowSortAgg">
    <Resource name="sql">
      <![CDATA[SELECT countFun(c) FROM MyTable  GROUP BY a, d, HOP(b, INTERVAL '3' SECOND, INTERVAL '1' HOUR)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$3])
+- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[countFun($3)])
   +- LogicalProject(a=[$0], d=[$3], $f2=[HOP($1, 3000, 3600000)], c=[$2])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[a, d], window=[SlidingGroupWindow('w$, 'b, 3600000.millis, 3000.millis)], select=[a, d, countFun(c) AS EXPR$0])
   +- Sort(orderBy=[a ASC, d ASC, b ASC])
      +- Exchange(distribution=[hash[a, d]])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnePhaseSlidingWindowSortAgg2">
    <Resource name="sql">
      <![CDATA[select max(colLarge) from t1 group by productId, HOP(ts, INTERVAL '0.111' SECOND(1,3), INTERVAL '1' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($2)])
   +- LogicalProject(productId=[$2], $f1=[HOP($0, 111, 1000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[productId], window=[SlidingGroupWindow('w$, 'ts, 1000.millis, 111.millis)], select=[productId, MAX(colLarge) AS EXPR$0])
   +- Sort(orderBy=[productId ASC, ts ASC])
      +- Exchange(distribution=[hash[productId]])
         +- Calc(select=[productId, ts, colLarge])
            +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoPhaseTumblingWindowSortAgg">
    <Resource name="sql">
      <![CDATA[SELECT avg(c), countFun(a) FROM MyTable GROUP BY a, d, TUMBLE(b, INTERVAL '3' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$3], EXPR$1=[$4])
+- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[AVG($3)], EXPR$1=[countFun($0)])
   +- LogicalProject(a=[$0], d=[$3], $f2=[TUMBLE($1, 3000)], c=[$2])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0, EXPR$1])
+- SortWindowAggregate(groupBy=[a, d], window=[TumblingGroupWindow('w$, 'b, 3000.millis)], select=[a, d, AVG(c) AS EXPR$0, countFun(a) AS EXPR$1])
   +- Sort(orderBy=[a ASC, d ASC, b ASC])
      +- Exchange(distribution=[hash[a, d]])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoPhaseSlidingWindowSortAgg2">
    <Resource name="sql">
      <![CDATA[select max(colLarge) from t1 group by productId, HOP(ts, INTERVAL '0.1' SECOND(1,1), INTERVAL '1' SECOND)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($2)])
   +- LogicalProject(productId=[$2], $f1=[HOP($0, 100, 1000)], colLarge=[$3])
      +- LogicalTableScan(table=[[builtin, default, t1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortWindowAggregate(groupBy=[productId], window=[SlidingGroupWindow('w$, 'ts, 1000.millis, 100.millis)], select=[productId, Final_MAX(max$0) AS EXPR$0])
   +- Sort(orderBy=[productId ASC, assignedPane$ ASC])
      +- Exchange(distribution=[hash[productId]])
         +- LocalSortWindowAggregate(groupBy=[productId], window=[SlidingGroupWindow('w$, 'ts, 1000.millis, 100.millis)], select=[productId, Partial_MAX(colLarge) AS max$0])
            +- Sort(orderBy=[productId ASC, ts ASC])
               +- Calc(select=[productId, ts, colLarge])
                  +- TableSourceScan(table=[[builtin, default, t1]], fields=[ts, customerId, productId, colLarge])
]]>
    </Resource>
  </TestCase>
</Root>
