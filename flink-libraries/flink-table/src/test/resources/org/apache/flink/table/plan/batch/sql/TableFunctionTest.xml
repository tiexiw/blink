<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testConstantTableFunc_DiffTypeParameters">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split('a,b,c', ',', 1)) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',', 1)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:- Calc(select=[a])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split('a,b,c', ',', 1)], correlate=[table(str_split('a,b,c',',',1))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_EmptyParameters">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split()) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split()], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:- Calc(select=[a])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split()], correlate=[table(str_split())], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_FullJoin1">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable FULL JOIN LATERAL TABLE(str_split('a,b,c', ',')) as T(s) ON s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[=($3, $2)], joinType=[full])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[a, c, f0], joinType=[FullOuterJoin], build=[right])
   :- Exchange(distribution=[single])
   :  +- Calc(select=[a, c])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Exchange(distribution=[single])
         +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_FullJoin2">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM LATERAL TABLE(str_split('a,b,c', ',')) as T(s) FULL JOIN MyTable ON s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$1], s=[$0])
+- LogicalJoin(condition=[=($0, $3)], joinType=[full])
   :- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[f0, a, c], joinType=[FullOuterJoin], build=[left])
   :- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :  +- Exchange(distribution=[single])
   :     +- Values(tuples=[[{  }]], values=[])
   +- Exchange(distribution=[single])
      +- Calc(select=[a, c])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_InnerJoin">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM LATERAL TABLE(str_split('a,b,c', ',')) as T(s), MyTable WHERE s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$1], s=[$0])
+- LogicalFilter(condition=[=($0, $3)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[f0, a, c], joinType=[InnerJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :     +- Values(tuples=[[{  }]], values=[])
   +- Calc(select=[a, c])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_LeftJoin2">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM LATERAL TABLE(str_split('a,b,c', ',')) as T(s) LEFT JOIN MyTable ON s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$1], s=[$0])
+- LogicalJoin(condition=[=($0, $3)], joinType=[left])
   :- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[f0, a, c], joinType=[LeftOuterJoin], build=[right])
   :- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :  +- Values(tuples=[[{  }]], values=[])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[a, c])
         +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_MultiUDTFs1">
    <Resource name="sql">
      <![CDATA[SELECT a, s, x FROM MyTable, LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T1(s), LATERAL TABLE(str_split('a,b,c', ',')) as T2(x)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3], x=[$4])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalJoin(condition=[true], joinType=[inner])
   :  :- LogicalTableScan(table=[[builtin, default, MyTable]])
   :  +- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0, f00], joinType=[InnerJoin], build=[right])
:- NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:  :- Calc(select=[a])
:  :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
:  +- Exchange(distribution=[broadcast])
:     +- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
:        +- Values(tuples=[[{  }]], values=[])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_MultiUDTFs2">
    <Resource name="sql">
      <![CDATA[SELECT a, s, x FROM LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T1(s), LATERAL TABLE(str_split('a,b,c', ',')) as T2(x),MyTable where a > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$2], s=[$0], x=[$1])
+- LogicalFilter(condition=[>($2, 10)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
      :  +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
      +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s, f00 AS x])
+- NestedLoopJoin(where=[true], join=[f0, f00, a], joinType=[InnerJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- NestedLoopJoin(where=[true], join=[f0, f00], joinType=[InnerJoin], build=[left])
   :     :- Exchange(distribution=[broadcast])
   :     :  +- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :     :     +- Values(tuples=[[{  }]], values=[])
   :     +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :        +- Values(tuples=[[{  }]], values=[])
   +- Calc(select=[a], where=[>(a, 10)])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_OneParameter">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split('a,b,c')) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:- Calc(select=[a])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split('a,b,c')], correlate=[table(str_split('a,b,c'))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_RightJoin">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T1(s) RIGHT JOIN LATERAL TABLE(str_split('a,b,c', ',')) as T2(x) ON TRUE WHERE s = x]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$0], x=[$1])
+- LogicalFilter(condition=[=($0, $1)])
   +- LogicalJoin(condition=[true], joinType=[right])
      :- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
      +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[=(f0, f00)], join=[f0, f00], joinType=[InnerJoin], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
:     +- Values(tuples=[[{  }]], values=[])
+- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_RightJoin1">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable RIGHT JOIN LATERAL TABLE(str_split('a,b,c', ',')) as T(s) ON s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[=($3, $2)], joinType=[right])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[a, c, f0], joinType=[RightOuterJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, c])
   :     +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_RightJoin2">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM LATERAL TABLE(str_split('a,b,c', ',')) as T(s) RIGHT JOIN MyTable ON s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$1], s=[$0])
+- LogicalJoin(condition=[=($0, $3)], joinType=[right])
   :- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableScan(table=[[builtin, default, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[f0, a, c], joinType=[RightOuterJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   :     +- Values(tuples=[[{  }]], values=[])
   +- Calc(select=[a, c])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_SameTypeParameters">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split('a,b,c', ',')) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:- Calc(select=[a])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_WithDynamicType">
    <Resource name="sql">
      <![CDATA[SELECT c, name0, len0, len1, name1, len2 FROM MyTable JOIN LATERAL TABLE(funcDyn('test', 'string,int,int')) AS T1(name0,len0,len1) ON TRUE JOIN LATERAL TABLE(funcDyn('abc', 'string,int')) AS T2(name1,len2) ON TRUE WHERE c = 'Anna#44' AND name0 = 'test']]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2], name0=[$3], len0=[$4], len1=[$5], name1=[$6], len2=[$7])
+- LogicalFilter(condition=[AND(=($2, 'Anna#44'), =($3, 'test'))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[builtin, default, MyTable]])
      :  +- LogicalTableFunctionScan(invocation=[funcDyn('test', 'string,int,int')], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1, INTEGER f2)], elementType=[class [Ljava.lang.Object;])
      +- LogicalTableFunctionScan(invocation=[funcDyn('abc', 'string,int')], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[CAST('Anna#44') AS c, CAST('test') AS name0, f1 AS len0, f2 AS len1, f0 AS name1, f10 AS len2])
+- NestedLoopJoin(where=[true], join=[f1, f2, f0, f10], joinType=[InnerJoin], build=[right])
   :- Calc(select=[f1, f2])
   :  +- NestedLoopJoin(where=[true], join=[a, f1, f2], joinType=[InnerJoin], build=[right])
   :     :- Calc(select=[a], where=[=(c, 'Anna#44')])
   :     :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   :     +- Exchange(distribution=[broadcast])
   :        +- Calc(select=[f1, f2], where=[=(f0, 'test')])
   :           +- Correlate(invocation=[funcDyn('test', 'string,int,int')], correlate=[table(funcDyn('test','string,int,int'))], select=[f0,f1,f2], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1, INTEGER f2)], joinType=[INNER])
   :              +- Values(tuples=[[{  }]], values=[])
   +- Exchange(distribution=[broadcast])
      +- Correlate(invocation=[funcDyn('abc', 'string,int')], correlate=[table(funcDyn('abc','string,int'))], select=[f0,f1], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1)], joinType=[INNER])
         +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_WithJoinCondition">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split('a,b,c', ',')) as T(s) WHERE s = c]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalFilter(condition=[=($3, $2)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, MyTable]])
      +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- NestedLoopJoin(where=[=(f0, c)], join=[a, c, f0], joinType=[InnerJoin], build=[right])
   :- Calc(select=[a, c])
   :  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
         +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testConstantTableFunc_WithUDF">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[builtin, default, MyTable]])
   +- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[a, f0], joinType=[InnerJoin], build=[right])
:- Calc(select=[a])
:  +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCorrelate">
    <Resource name="sql">
      <![CDATA[SELECT a, d, s FROM MyTable2, LATERAL TABLE(str_split(d)) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], d=[$3], s=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
   :- LogicalTableScan(table=[[builtin, default, MyTable2]])
   +- LogicalTableFunctionScan(invocation=[str_split($cor0.d)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Correlate(invocation=[str_split($cor0.d)], correlate=[table(str_split($cor0.d))], select=[a,d,s], rowType=[RecordType(INTEGER a, VARBINARY d, VARCHAR(65536) s)], joinType=[INNER])
+- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinAsSubQuery">
    <Resource name="sql">
      <![CDATA[
 SELECT *
 FROM MyTable2 LEFT OUTER JOIN
  (SELECT c, s
   FROM MyTable LEFT OUTER JOIN LATERAL TABLE(func1(c)) AS T(s) on true)
 ON c2 = s ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], c2=[$2], c=[$3], s=[$4])
+- LogicalJoin(condition=[=($2, $4)], joinType=[left])
   :- LogicalTableScan(table=[[builtin, default, MyTable2]])
   +- LogicalProject(c=[$2], s=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[builtin, default, MyTable]])
         +- LogicalTableFunctionScan(invocation=[func1($cor0.c)], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashJoin(where=[=(c2, s)], join=[a2, b2, c2, c, s], joinType=[LeftOuterJoin], isBroadcast=[true], build=[right])
:- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_1]], fields=[a2, b2, c2])
+- Exchange(distribution=[broadcast])
   +- Correlate(invocation=[func1($cor0.c)], correlate=[table(func1($cor0.c))], select=[c,s], rowType=[RecordType(VARCHAR(65536) c, VARCHAR(65536) s)], joinType=[LEFT])
      +- BoundedStreamScan(table=[[builtin, default, _DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_EmptyParameters">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(str_split()) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$0])
+- LogicalTableFunctionScan(invocation=[str_split()], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Correlate(invocation=[str_split()], correlate=[table(str_split())], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
+- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_FullJoin">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T1(s) FULL JOIN LATERAL TABLE(str_split('a,b,c', ',')) as T2(x) ON s = x]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$0], x=[$1])
+- LogicalJoin(condition=[=($0, $1)], joinType=[full])
   :- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[=(f0, f00)], join=[f0, f00], joinType=[FullOuterJoin], build=[left])
:- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
:  +- Exchange(distribution=[single])
:     +- Values(tuples=[[{  }]], values=[])
+- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   +- Exchange(distribution=[single])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_OneParameter">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(str_split('a,b,c')) as T(s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$0])
+- LogicalTableFunctionScan(invocation=[str_split('a,b,c')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Correlate(invocation=[str_split('a,b,c')], correlate=[table(str_split('a,b,c'))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
+- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_WithDynamicType">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(funcDyn('test#Hello world#Hi', 'string,int,int')) AS T1(name0,len0,len1), LATERAL TABLE(funcDyn('abc#defijk', 'string,int')) AS T2(name1,len2) WHERE name0 = 'test']]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name0=[$0], len0=[$1], len1=[$2], name1=[$3], len2=[$4])
+- LogicalFilter(condition=[=($0, 'test')])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableFunctionScan(invocation=[funcDyn('test#Hello world#Hi', 'string,int,int')], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1, INTEGER f2)], elementType=[class [Ljava.lang.Object;])
      +- LogicalTableFunctionScan(invocation=[funcDyn('abc#defijk', 'string,int')], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[CAST('test') AS name0, f1 AS len0, f2 AS len1, f0 AS name1, f10 AS len2])
+- NestedLoopJoin(where=[true], join=[f1, f2, f0, f10], joinType=[InnerJoin], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[f1, f2], where=[=(f0, 'test')])
   :     +- Correlate(invocation=[funcDyn('test#Hello world#Hi', 'string,int,int')], correlate=[table(funcDyn('test#Hello world#Hi','string,int,int'))], select=[f0,f1,f2], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1, INTEGER f2)], joinType=[INNER])
   :        +- Values(tuples=[[{  }]], values=[])
   +- Correlate(invocation=[funcDyn('abc#defijk', 'string,int')], correlate=[table(funcDyn('abc#defijk','string,int'))], select=[f0,f1], rowType=[RecordType(VARCHAR(65536) f0, INTEGER f1)], joinType=[INNER])
      +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyConstantTableFunc_MultiUDTFs">
    <Resource name="sql">
      <![CDATA[SELECT * FROM LATERAL TABLE(str_split(SUBSTRING('a,b,c', 1, 3), ',')) as T1(s), LATERAL TABLE(str_split('a,b,c', ',')) as T2(x)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(s=[$0], x=[$1])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableFunctionScan(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
   +- LogicalTableFunctionScan(invocation=[str_split('a,b,c', ',')], rowType=[RecordType(VARCHAR(65536) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
NestedLoopJoin(where=[true], join=[f0, f00], joinType=[InnerJoin], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Correlate(invocation=[str_split(SUBSTRING('a,b,c', 1, 3), ',')], correlate=[table(str_split(SUBSTRING('a,b,c', 1, 3),','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
:     +- Values(tuples=[[{  }]], values=[])
+- Correlate(invocation=[str_split('a,b,c', ',')], correlate=[table(str_split('a,b,c',','))], select=[f0], rowType=[RecordType(VARCHAR(65536) f0)], joinType=[INNER])
   +- Values(tuples=[[{  }]], values=[])
]]>
    </Resource>
  </TestCase>
</Root>
