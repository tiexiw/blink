<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testCalcite1018">
    <Resource name="sql">
      <![CDATA[
select * from (select * from scott_emp) e left join (
    select * from scott_dept d) using (deptno)
    order by empno limit 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[10])
+- LogicalProject(deptno=[COALESCE($7, $8)], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[left])
      :- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7])
      :  +- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalProject(deptno=[$0], dname=[$1], loc=[$2])
         +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[10])
+- LogicalProject($f0=[CASE(IS NOT NULL($7), $7, $8)], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[left])
      :- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7])
      :  +- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalProject(deptno=[$0], dname=[$1], loc=[$2])
         +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCalcite864_1">
    <Resource name="sql">
      <![CDATA[
select *
    from scott_emp as e
    join scott_dept as d using (deptno)
    where sal = (
      select max(sal)
      from scott_emp as e2
      join scott_dept as d2 using (deptno)
      where d2.deptno = d.deptno)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[COALESCE($7, $8)], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalFilter(condition=[=($5, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(sal=[$5])
    LogicalFilter(condition=[=($8, $cor0.deptno0)])
      LogicalJoin(condition=[=($7, $8)], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, scott_emp]])
        LogicalTableScan(table=[[builtin, default, scott_dept]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject($f0=[$7], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7], deptno0=[$8], dname=[$9], loc=[$10])
   +- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7], deptno0=[$8], dname=[$9], loc=[$10], EXPR$0=[$12])
      +- LogicalJoin(condition=[AND(=($8, $11), =($5, $12))], joinType=[inner])
         :- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
         :  :- LogicalTableScan(table=[[builtin, default, scott_emp]])
         :  +- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
            +- LogicalProject(deptno0=[$1], sal=[$0])
               +- LogicalProject(sal=[$5], deptno0=[$8])
                  +- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
                     :- LogicalTableScan(table=[[builtin, default, scott_emp]])
                     +- LogicalFilter(condition=[IS NOT NULL($0)])
                        +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCalcite864_3">
    <Resource name="sql">
      <![CDATA[
select *
    from scott_emp as e
    join scott_dept as d using (deptno)
    where d.dname = (
      select max(dname)
      from scott_dept as d2
      where d2.deptno = d.deptno)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[COALESCE($7, $8)], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalFilter(condition=[=($9, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(dname=[$1])
    LogicalFilter(condition=[=($0, $cor0.deptno0)])
      LogicalTableScan(table=[[builtin, default, scott_dept]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject($f0=[$7], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7], deptno0=[$8], dname=[$9], loc=[$10])
   +- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7], deptno0=[$8], dname=[$9], loc=[$10], EXPR$0=[$12])
      +- LogicalJoin(condition=[AND(=($8, $11), =($9, $12))], joinType=[inner])
         :- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
         :  :- LogicalTableScan(table=[[builtin, default, scott_emp]])
         :  +- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
            +- LogicalProject(deptno=[$1], dname=[$0])
               +- LogicalProject(dname=[$1], deptno=[$0])
                  +- LogicalFilter(condition=[IS NOT NULL($0)])
                     +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCoalesceConstantReduce">
    <Resource name="sql">
      <![CDATA[
select * from lateral (select * from scott_emp) as e
    join (table scott_dept) using (deptno)
    where e.deptno = 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[COALESCE($7, $8)], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalFilter(condition=[=($7, 10)])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
      :- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7])
      :  +- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalProject(deptno=[$0], dname=[$1], loc=[$2])
         +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject($f0=[CAST(10):INTEGER], empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], dname=[$9], loc=[$10])
+- LogicalFilter(condition=[=($7, 10)])
   +- LogicalJoin(condition=[=($7, $8)], joinType=[inner])
      :- LogicalProject(empno=[$0], ename=[$1], job=[$2], mgr=[$3], hiredate=[$4], sal=[$5], comm=[$6], deptno=[$7])
      :  +- LogicalTableScan(table=[[builtin, default, scott_emp]])
      +- LogicalProject(deptno=[$0], dname=[$1], loc=[$2])
         +- LogicalTableScan(table=[[builtin, default, scott_dept]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNaturalJoinLeftOuter">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM scott_dept
    natural left join scott_emp
    order by scott_dept.deptno, scott_emp.deptno
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[$0], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalSort(sort0=[$10], sort1=[$11], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first])
   +- LogicalProject(deptno=[COALESCE($0, $10)], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9], deptno0=[$0], deptno1=[$10])
      +- LogicalJoin(condition=[=($0, $10)], joinType=[left])
         :- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(deptno=[$0], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalSort(sort0=[$10], sort1=[$11], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first])
   +- LogicalProject($f0=[CASE(IS NOT NULL($0), $0, $10)], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9], deptno=[$0], deptno0=[$10])
      +- LogicalJoin(condition=[=($0, $10)], joinType=[left])
         :- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNaturalJoinRightOuter">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM scott_dept
    natural right join scott_emp
    order by scott_dept.deptno, scott_emp.deptno
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[$0], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalSort(sort0=[$10], sort1=[$11], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first])
   +- LogicalProject(deptno=[COALESCE($0, $10)], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9], deptno0=[$0], deptno1=[$10])
      +- LogicalJoin(condition=[=($0, $10)], joinType=[right])
         :- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(deptno=[$0], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalSort(sort0=[$10], sort1=[$11], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first])
   +- LogicalProject($f0=[CASE(IS NOT NULL($0), $0, $10)], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9], deptno=[$0], deptno0=[$10])
      +- LogicalJoin(condition=[=($0, $10)], joinType=[right])
         :- LogicalTableScan(table=[[builtin, default, scott_dept]])
         +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNaturalJoinWithPredicates">
    <Resource name="sql">
      <![CDATA[
select * from scott_dept natural join scott_emp where empno = 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(deptno=[COALESCE($0, $10)], dname=[$1], loc=[$2], empno=[$3], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalFilter(condition=[=($3, 1)])
   +- LogicalJoin(condition=[=($0, $10)], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, scott_dept]])
      +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject($f0=[CASE(IS NOT NULL($0), $0, $10)], dname=[$1], loc=[$2], empno=[CAST(1):INTEGER], ename=[$4], job=[$5], mgr=[$6], hiredate=[$7], sal=[$8], comm=[$9])
+- LogicalFilter(condition=[=($3, 1)])
   +- LogicalJoin(condition=[=($0, $10)], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, scott_dept]])
      +- LogicalTableScan(table=[[builtin, default, scott_emp]])
]]>
    </Resource>
  </TestCase>
</Root>
