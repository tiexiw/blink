<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="test[caseName=q1, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query1.tpl
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(sr_return_amt) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =1998
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'TN'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100

-- end query 1 in stream 0 using template query1.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$33])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_store_sk, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$3], ctr_store_sk=[$7], sr_return_amt=[$11])
            LogicalFilter(condition=[AND(=($0, $20), =($26, 1998))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})), =($3, $1), =($27, 'TN'), =($0, $32))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$3], ctr_store_sk=[$7], sr_return_amt=[$11])
         :  :     +- LogicalFilter(condition=[AND(=($0, $20), =($26, 1998))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_customer_id])
+- SortLimit(orderBy=[c_customer_id ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[=(ctr_customer_sk, c_customer_sk)], join=[ctr_customer_sk, c_customer_sk, c_customer_id], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ctr_customer_sk]])
            :  +- Calc(select=[ctr_customer_sk])
            :     +- HashJoin(where=[AND(>(ctr_total_return, *($f1, 1.2)), =(ctr_store_sk, s_store_sk))], join=[ctr_customer_sk, ctr_store_sk, ctr_total_return, $f1, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, Final_SUM(sum$0) AS ctr_total_return])
            :        :  +- Exchange(distribution=[hash[ctr_customer_sk, ctr_store_sk]])
            :        :     +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, Partial_SUM(sr_return_amt) AS sum$0])
            :        :        +- Calc(select=[sr_customer_sk AS ctr_customer_sk, sr_store_sk AS ctr_store_sk, sr_return_amt])
            :        :           +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :              :- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt])
            :        :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :        :                 +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :        :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :        +- Exchange(distribution=[broadcast])
            :           +- Calc(select=[$f1, s_store_sk])
            :              +- HashJoin(where=[=(ctr_store_sk, s_store_sk)], join=[ctr_store_sk, $f1, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- HashAggregate(isMerge=[true], groupBy=[ctr_store_sk], select=[ctr_store_sk, Final_AVG(sum$0, count$1) AS $f1])
            :                 :  +- Exchange(distribution=[hash[ctr_store_sk]])
            :                 :     +- LocalHashAggregate(groupBy=[ctr_store_sk], select=[ctr_store_sk, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
            :                 :        +- Calc(select=[ctr_store_sk, ctr_total_return])
            :                 :           +- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, Final_SUM(sum$0) AS ctr_total_return])
            :                 :              +- Exchange(distribution=[hash[ctr_customer_sk, ctr_store_sk]])
            :                 :                 +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, Partial_SUM(sr_return_amt) AS sum$0])
            :                 :                    +- Calc(select=[sr_customer_sk AS ctr_customer_sk, sr_store_sk AS ctr_store_sk, sr_return_amt])
            :                 :                       +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :                          :- Calc(select=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt], where=[IS NOT NULL(sr_store_sk)])
            :                 :                          :  +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_return_amt])
            :                 :                          +- Reused(reference_id=[1])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- Calc(select=[s_store_sk], where=[=(s_state, 'TN')])
            :                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_state])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q10, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 10 in stream 0 using template query10.tpl
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3,
  cd_dep_count,
  count(*) cnt4,
  cd_dep_employed_count,
  count(*) cnt5,
  cd_dep_college_count,
  count(*) cnt6
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in ('Washington County','Williamson County','Ziebach County','Walker County','Fairfield County') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_moy between 1 and 1+3) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 ANd 1+3) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
limit 100

-- end query 10 in stream 0 using template query10.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$6], sort5=[$8], sort6=[$10], sort7=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], fetch=[100])
+- LogicalProject(cd_gender=[$0], cd_marital_status=[$1], cd_education_status=[$2], cnt1=[$8], cd_purchase_estimate=[$3], cnt2=[$8], cd_credit_rating=[$4], cnt3=[$8], cd_dep_count=[$5], cnt4=[$8], cd_dep_employed_count=[$6], cnt5=[$8], cd_dep_college_count=[$7], cnt6=[$8])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], cnt6=[COUNT()])
      +- LogicalProject(cd_gender=[$32], cd_marital_status=[$33], cd_education_status=[$34], cd_purchase_estimate=[$35], cd_credit_rating=[$36], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
         +- LogicalFilter(condition=[AND(=($4, $18), OR(=($25, 'Washington County'), =($25, 'Williamson County'), =($25, 'Ziebach County'), =($25, 'Walker County'), =($25, 'Fairfield County')), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 1999), >=($31, 1), <=($31, +(1, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[cd_gender, cd_marital_status, cd_education_status, cnt6 AS cnt1, cd_purchase_estimate, cnt6 AS cnt2, cd_credit_rating, cnt6 AS cnt3, cd_dep_count, cnt6 AS cnt4, cd_dep_employed_count, cnt6 AS cnt5, cd_dep_college_count, cnt6])
+- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count$0) AS cnt6])
            +- Exchange(distribution=[hash[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count$0])
                  +- Calc(select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[OR(IS NOT NULL(ws_bill_customer_sk), IS NOT NULL(cs_ship_customer_sk))])
                     +- HashJoin(where=[=(c_customer_sk, cs_ship_customer_sk)], join=[cs_ship_customer_sk, c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ws_bill_customer_sk], joinType=[RightOuterJoin], build=[left])
                        :- HashAggregate(isMerge=[true], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :  +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                        :     +- LocalHashAggregate(groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :        +- Calc(select=[cs_ship_customer_sk, true AS i])
                        :           +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :              :- Calc(select=[cs_sold_date_sk, cs_ship_customer_sk], where=[IS NOT NULL(cs_ship_customer_sk)])
                        :              :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ship_customer_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
                        :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1999), >=(d_moy, 1), <=(d_moy, 4))])
                        :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                        +- Exchange(distribution=[hash[c_customer_sk]])
                           +- Calc(select=[c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ws_bill_customer_sk])
                              +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ca_address_sk], joinType=[InnerJoin], build=[right])
                                 :- Exchange(distribution=[hash[c_current_addr_sk]])
                                 :  +- Calc(select=[ws_bill_customer_sk, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                                 :     +- HashJoin(where=[=(cd_demo_sk, c_current_cdemo_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], joinType=[InnerJoin], build=[right])
                                 :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                                 :        :  +- Calc(select=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                                 :        :     +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_customer_sk, ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[InnerJoin], build=[right])
                                 :        :        :- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk], select=[ss_customer_sk])
                                 :        :        :  +- Exchange(distribution=[hash[ss_customer_sk]])
                                 :        :        :     +- LocalHashAggregate(groupBy=[ss_customer_sk], select=[ss_customer_sk])
                                 :        :        :        +- Calc(select=[ss_customer_sk, true AS i])
                                 :        :        :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :        :        :              :- Calc(select=[ss_sold_date_sk, ss_customer_sk], where=[IS NOT NULL(ss_customer_sk)])
                                 :        :        :              :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk])
                                 :        :        :              +- Reused(reference_id=[1])
                                 :        :        +- HashJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[RightOuterJoin], build=[left])
                                 :        :           :- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                 :        :           :  +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                                 :        :           :     +- LocalHashAggregate(groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                 :        :           :        +- Calc(select=[ws_bill_customer_sk, true AS i])
                                 :        :           :           +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :        :           :              :- Calc(select=[ws_sold_date_sk, ws_bill_customer_sk], where=[IS NOT NULL(ws_bill_customer_sk)])
                                 :        :           :              :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                                 :        :           :              +- Reused(reference_id=[1])
                                 :        :           +- Exchange(distribution=[hash[c_customer_sk]])
                                 :        :              +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                                 :        +- Exchange(distribution=[hash[cd_demo_sk]])
                                 :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                                 +- Exchange(distribution=[hash[ca_address_sk]])
                                    +- Calc(select=[ca_address_sk], where=[IN(ca_county, 'Washington County', 'Williamson County', 'Ziebach County', 'Walker County', 'Fairfield County')])
                                       +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_county];filterPredicates=[]]]], fields=[ca_address_sk, ca_county])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q11, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 11 in stream 0 using template query11.tpl
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag 
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag 
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 1998
         and t_s_secyear.dyear = 1998+1
         and t_w_firstyear.dyear = 1998
         and t_w_secyear.dyear = 1998+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_preferred_cust_flag
limit 100

-- end query 11 in stream 0 using template query11.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$10], customer_first_name=[$11], customer_last_name=[$12], customer_preferred_cust_flag=[$13])
   +- LogicalFilter(condition=[AND(=($10, $0), =($0, $30), =($0, $20), =($9, 's'), =($29, 'w'), =($19, 's'), =($39, 'w'), =($7, 1998), =($17, CAST(+(1998, 1)):BIGINT NOT NULL), =($27, 1998), =($37, CAST(+(1998, 1)):BIGINT NOT NULL), >($8, 0), >($28, 0), >(CASE(>($28, 0), /($38, $28), 0.0), CASE(>($8, 0), /($18, $8), 0.0)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalUnion(all=[true])
         :  :  :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[-($35, $32)])
         :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[-($43, $40)])
         :  :  :           +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :                 :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :  :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  +- LogicalUnion(all=[true])
         :  :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :     :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[-($35, $32)])
         :  :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :     :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :     :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[-($43, $40)])
         :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :     :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[-($35, $32)])
         :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :     :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :     :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[-($43, $40)])
         :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalUnion(all=[true])
            :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
            :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
            :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[-($35, $32)])
            :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
            :           +- LogicalJoin(condition=[true], joinType=[inner])
            :              :- LogicalJoin(condition=[true], joinType=[inner])
            :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
               +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
                  +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[-($43, $40)])
                     +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[customer_id0 AS customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag])
+- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC, customer_preferred_cust_flag ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC, customer_preferred_cust_flag ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(CASE(CAST(IS NOT NULL(year_total)), CASE(CAST(IS NOT NULL(year_total000)), >(/(year_total00, year_total000), /(year_total0, year_total)), >(0.0, /(year_total0, year_total))), CASE(CAST(IS NOT NULL(year_total000)), >(/(year_total00, year_total000), 0.0), CAST(false))), =(customer_id, customer_id00))], join=[customer_id, year_total, customer_id0, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total0, year_total00, customer_id00, year_total000], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
            :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
            :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
            :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
            :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1998) AS dyear, -(ss_ext_list_price, ss_ext_discount_amt) AS $f8])
            :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], reuse_id=[1])
            :                    :  +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], joinType=[InnerJoin], build=[right])
            :                    :     :- Exchange(distribution=[hash[ss_customer_sk]])
            :                    :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_list_price])
            :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
            :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
            :                    +- Exchange(distribution=[broadcast], reuse_id=[4])
            :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            +- HashJoin(where=[=(customer_id, customer_id0)], join=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total, year_total0, customer_id0, year_total00], joinType=[InnerJoin], build=[right])
               :- Exchange(distribution=[hash[customer_id]])
               :  +- Calc(select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total])
               :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
               :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
               :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
               :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1999) AS dyear, -(ss_ext_list_price, ss_ext_discount_amt) AS $f8])
               :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                    :- Reused(reference_id=[1])
               :                    +- Exchange(distribution=[broadcast], reuse_id=[2])
               :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
               :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
               +- Calc(select=[year_total, customer_id0, year_total0])
                  +- HashJoin(where=[=(customer_id, customer_id0)], join=[customer_id, year_total, customer_id0, year_total0], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[customer_id]])
                     :  +- Calc(select=[customer_id, year_total])
                     :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                     :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                     :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                     :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1999) AS dyear, -(ws_ext_list_price, ws_ext_discount_amt) AS $f8])
                     :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :                    :- Calc(select=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], reuse_id=[3])
                     :                    :  +- HashJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], joinType=[InnerJoin], build=[right])
                     :                    :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                     :                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_list_price])
                     :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
                     :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                     :                    +- Reused(reference_id=[2])
                     +- Exchange(distribution=[hash[customer_id]])
                        +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
                           +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                              +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                                 +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                                    +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1998) AS dyear, -(ws_ext_list_price, ws_ext_discount_amt) AS $f8])
                                       +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                          :- Reused(reference_id=[3])
                                          +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q12, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 12 in stream 0 using template query12.tpl
SELECT  i_item_id
      ,i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
FROM
	  web_sales, item, date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Electronics', 'Women', 'Men')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('1998-01-02' as date) 
				and (cast('1998-01-02' as date) + INTERVAL '30' day)
GROUP BY
  i_item_id, i_item_desc, i_category, i_class, i_current_price
ORDER BY
  i_category, i_class, i_item_id, i_item_desc, revenueratio
LIMIT 100

-- end query 12 in stream 0 using template query12.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$3], sort2=[$0], sort3=[$1], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_id=[$0], i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null))])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
      +- LogicalProject(i_item_id=[$35], i_item_desc=[$38], i_category=[$46], i_class=[$44], i_current_price=[$39], ws_ext_sales_price=[$23])
         +- LogicalFilter(condition=[AND(=($3, $34), OR(=($46, 'Electronics'), =($46, 'Women'), =($46, 'Men')), =($0, $56), >=($58, CAST('1998-01-02'):DATE NOT NULL), <=($58, +(CAST('1998-01-02'):DATE NOT NULL, 2592000000)))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, /($6, CASE(>(w0$o0, 0), CAST(w0$o1), null)) AS revenueratio])
         +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
            +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, *(itemrevenue, 100) AS $6])
               +- Sort(orderBy=[i_class ASC])
                  +- Exchange(distribution=[hash[i_class]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Final_SUM(sum$0) AS itemrevenue])
                        +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_category, i_class, i_current_price]])
                           +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Partial_SUM(ws_ext_sales_price) AS sum$0])
                              +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, ws_ext_sales_price])
                                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], joinType=[InnerJoin], build=[right])
                                    :     :- Exchange(distribution=[hash[ws_item_sk]])
                                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
                                    :     +- Exchange(distribution=[hash[i_item_sk]])
                                    :        +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[OR(=(i_category, 'Electronics'), =(i_category, 'Women'), =(i_category, 'Men'))])
                                    :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-02-01))])
                                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q13, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 13 in stream 0 using template query13.tpl
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Unknown'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'S'
  and cd_education_status = 'Secondary'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('ID', 'TN', 'SD')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('AL', 'SC', 'OH')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('LA', 'MO', 'GA')
  and ss_net_profit between 50 and 250  
     ))


-- end query 13 in stream 0 using template query13.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)], EXPR$1=[AVG($1)], EXPR$2=[AVG($2)], EXPR$3=[SUM($2)])
+- LogicalProject(ss_quantity=[$10], ss_ext_sales_price=[$15], ss_ext_wholesale_cost=[$16])
   +- LogicalFilter(condition=[AND(=($23, $7), =($0, $79), =($85, 2001), OR(AND(=($5, $61), =($52, $4), =($54, 'U'), =($55, 'Unknown'), >=($13, 100.00), <=($13, 150.00), =($64, 3)), AND(=($5, $61), =($52, $4), =($54, 'M'), =($55, 'Primary'), >=($13, 50.00), <=($13, 100.00), =($64, 1)), AND(=($5, $61), =($52, $4), =($54, 'S'), =($55, 'Secondary'), >=($13, 150.00), <=($13, 200.00), =($64, 1))), OR(AND(=($6, $66), =($76, 'United States'), OR(=($74, 'ID'), =($74, 'TN'), =($74, 'SD')), >=($22, 100), <=($22, 200)), AND(=($6, $66), =($76, 'United States'), OR(=($74, 'AL'), =($74, 'SC'), =($74, 'OH')), >=($22, 150), <=($22, 300)), AND(=($6, $66), =($76, 'United States'), OR(=($74, 'LA'), =($74, 'MO'), =($74, 'GA')), >=($22, 50), <=($22, 250))))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
         :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0, Final_AVG(sum$2, count$3) AS EXPR$1, Final_AVG(sum$4, count$5) AS EXPR$2, Final_SUM(sum$6) AS EXPR$3])
+- Exchange(distribution=[single])
   +- LocalSortAggregate(select=[Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_ext_sales_price) AS (sum$2, count$3), Partial_AVG(ss_ext_wholesale_cost) AS (sum$4, count$5), Partial_SUM(ss_ext_wholesale_cost) AS sum$6])
      +- Calc(select=[ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
         +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :- Calc(select=[ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
            :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
            :     :  +- HashJoin(where=[AND(=(ss_addr_sk, ca_address_sk), OR(AND(OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD')), >=(ss_net_profit, 100), <=(ss_net_profit, 200)), AND(OR(=(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH')), >=(ss_net_profit, 150), <=(ss_net_profit, 300)), AND(OR(=(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')), >=(ss_net_profit, 50), <=(ss_net_profit, 250))))], join=[ca_address_sk, ca_state, ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :     :- Calc(select=[ca_address_sk, ca_state], where=[AND(=(ca_country, 'United States'), OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD'), =(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH'), =(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')))])
            :     :     :  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state, ca_country];filterPredicates=[]]]], fields=[ca_address_sk, ca_state, ca_country])
            :     :     +- Exchange(distribution=[broadcast])
            :     :        +- Calc(select=[ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit])
            :     :           +- HashJoin(where=[AND(=(ss_hdemo_sk, hd_demo_sk), OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown'), >=(ss_sales_price, 100.00), <=(ss_sales_price, 150.00), =(hd_dep_count, 3)), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary'), >=(ss_sales_price, 50.00), <=(ss_sales_price, 100.00), =(hd_dep_count, 1)), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary'), >=(ss_sales_price, 150.00), <=(ss_sales_price, 200.00), =(hd_dep_count, 1))))], join=[ss_sold_date_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_marital_status, cd_education_status, hd_demo_sk, hd_dep_count], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :- Calc(select=[ss_sold_date_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_marital_status, cd_education_status])
            :     :              :  +- HashJoin(where=[AND(=(cd_demo_sk, ss_cdemo_sk), OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown'), >=(ss_sales_price, 100.00), <=(ss_sales_price, 150.00)), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary'), >=(ss_sales_price, 50.00), <=(ss_sales_price, 100.00)), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary'), >=(ss_sales_price, 150.00), <=(ss_sales_price, 200.00))))], join=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_demo_sk, cd_marital_status, cd_education_status], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :     :- Calc(select=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit], where=[AND(OR(AND(>=(ss_net_profit, 100), <=(ss_net_profit, 200)), AND(>=(ss_net_profit, 150), <=(ss_net_profit, 300)), AND(>=(ss_net_profit, 50), <=(ss_net_profit, 250))), OR(AND(>=(ss_sales_price, 100.00), <=(ss_sales_price, 150.00)), AND(>=(ss_sales_price, 50.00), <=(ss_sales_price, 100.00)), AND(>=(ss_sales_price, 150.00), <=(ss_sales_price, 200.00))))])
            :     :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit])
            :     :              :     +- Exchange(distribution=[broadcast])
            :     :              :        +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown')), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary')), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary')))])
            :     :              :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
            :     :              +- Exchange(distribution=[broadcast])
            :     :                 +- Calc(select=[hd_demo_sk, hd_dep_count], where=[OR(=(hd_dep_count, 3), =(hd_dep_count, 1))])
            :     :                    +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count])
            :     +- Exchange(distribution=[broadcast])
            :        +- Calc(select=[d_date_sk], where=[=(d_year, 2001)])
            :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            +- Exchange(distribution=[broadcast])
               +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q14a, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 14 in stream 0 using template query14.tpl
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1998 AND 1998 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1998 AND 1998 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1998 AND 1998 + 2)
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100


-- end query 14 in stream 0 using template query14.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], EXPR$4=[SUM($4)], EXPR$5=[SUM($5)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=['store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
      :  :  +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
      :  :     +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
      :  :        +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
      :  :           +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalProject(ss_item_sk=[$0])
    LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
        LogicalIntersect(all=[false])
          LogicalIntersect(all=[false])
            LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
              LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1998), <=($51, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
              LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($2, $23), =($0, $45), =($51, CAST(+(1998, 2)):BIGINT NOT NULL), =($53, 11))])
      :  :              +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :                 :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :  :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  +- LogicalProject(channel=['catalog'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
      :     +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
      :        +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
      :           +- LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], $f3=[*($18, $20)])
      :              +- LogicalFilter(condition=[AND(IN($15, {
LogicalProject(ss_item_sk=[$0])
  LogicalProject(ss_item_sk=[$0])
    LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
        LogicalIntersect(all=[false])
          LogicalIntersect(all=[false])
            LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
              LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1998), <=($51, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
              LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($15, $34), =($0, $56), =($62, CAST(+(1998, 2)):BIGINT NOT NULL), =($64, 11))])
      :                 +- LogicalJoin(condition=[true], joinType=[inner])
      :                    :- LogicalJoin(condition=[true], joinType=[inner])
      :                    :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                    :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalProject(channel=['web'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
         +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
            +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
               +- LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], $f3=[*($18, $20)])
                  +- LogicalFilter(condition=[AND(IN($3, {
LogicalProject(ss_item_sk=[$0])
  LogicalProject(ss_item_sk=[$0])
    LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
        LogicalIntersect(all=[false])
          LogicalIntersect(all=[false])
            LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
              LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1998), <=($51, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
              LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($3, $34), =($0, $56), =($62, CAST(+(1998, 2)):BIGINT NOT NULL), =($64, 11))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(channel) AS channel, i_brand_id, i_class_id, i_category_id, EXPR$4, EXPR$5])
         +- HashAggregate(isMerge=[true], groupBy=[channel, i_brand_id, i_class_id, i_category_id, $e], select=[channel, i_brand_id, i_class_id, i_category_id, $e, Final_SUM(sum$0) AS EXPR$4, Final_SUM(sum$1) AS EXPR$5])
            +- Exchange(distribution=[hash[channel, i_brand_id, i_class_id, i_category_id, $e]])
               +- LocalHashAggregate(groupBy=[channel, i_brand_id, i_class_id, i_category_id, $e], select=[channel, i_brand_id, i_class_id, i_category_id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(number_sales) AS sum$1])
                  +- Expand(projects=[{channel, i_brand_id, i_class_id, i_category_id, sales, number_sales, 0 AS $e}, {channel, i_brand_id, i_class_id, null AS i_category_id, sales, number_sales, 1 AS $e}, {channel, i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 3 AS $e}, {channel, null AS i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 7 AS $e}, {null AS channel, null AS i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 15 AS $e}])
                     +- Union(all=[true], union=[channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])
                        :- Union(all=[true], union=[channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])
                        :  :- Calc(select=['store' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])
                        :  :  +- NestedLoopJoin(where=[>(sales, $f0)], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                        :  :     :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count$1) AS number_sales])
                        :  :     :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count$1])
                        :  :     :        +- Calc(select=[i_brand_id, i_class_id, i_category_id, *(ss_quantity, ss_list_price) AS $f3])
                        :  :     :           +- HashSemiJoin(where=[=(ss_item_sk, ss_item_sk0)], join=[ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
                        :  :     :              :- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id])
                        :  :     :              :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :              :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id])
                        :  :     :              :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
                        :  :     :              :     :     :- Exchange(distribution=[hash[ss_item_sk]])
                        :  :     :              :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])
                        :  :     :              :     :     +- Exchange(distribution=[hash[i_item_sk]])
                        :  :     :              :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :              :     +- Exchange(distribution=[broadcast], reuse_id=[2])
                        :  :     :              :        +- Calc(select=[d_date_sk], where=[AND(=(d_year, 2000), =(d_moy, 11))])
                        :  :     :              :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                        :  :     :              +- Exchange(distribution=[broadcast], reuse_id=[3])
                        :  :     :                 +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
                        :  :     :                    +- Calc(select=[i_item_sk AS ss_item_sk])
                        :  :     :                       +- HashJoin(where=[AND(=(i_brand_id0, i_brand_id), =(i_class_id0, i_class_id), =(i_category_id0, i_category_id))], join=[i_brand_id, i_class_id, i_category_id, i_item_sk, i_brand_id0, i_class_id0, i_category_id0], joinType=[InnerJoin], build=[right])
                        :  :     :                          :- HashSemiJoin(where=[AND(OR(=(i_brand_id, i_brand_id0), AND(IS NULL(i_brand_id), IS NULL(i_brand_id0))), OR(=(i_class_id, i_class_id0), AND(IS NULL(i_class_id), IS NULL(i_class_id0))), OR(=(i_category_id, i_category_id0), AND(IS NULL(i_category_id), IS NULL(i_category_id0))))], join=[i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], build=[right])
                        :  :     :                          :  :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :                          :  :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :        +- Calc(select=[i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :                          :  :              :- Calc(select=[ss_sold_date_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :              :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :                          :  :              :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk])
                        :  :     :                          :  :              :     +- Exchange(distribution=[broadcast])
                        :  :     :                          :  :              :        +- HashSemiJoin(where=[AND(OR(=(i_brand_id, i_brand_id0), AND(IS NULL(i_brand_id), IS NULL(i_brand_id0))), OR(=(i_class_id, i_class_id0), AND(IS NULL(i_class_id), IS NULL(i_class_id0))), OR(=(i_category_id, i_category_id0), AND(IS NULL(i_category_id), IS NULL(i_category_id0))))], join=[i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], build=[left])
                        :  :     :                          :  :              :           :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :                          :  :              :           :  +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :              :           +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :                          :  :              :              +- Calc(select=[i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :              :                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :                          :  :              :                    :- Calc(select=[cs_sold_date_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :              :                    :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
                        :  :     :                          :  :              :                    :     :- Exchange(distribution=[hash[cs_item_sk]])
                        :  :     :                          :  :              :                    :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk])
                        :  :     :                          :  :              :                    :     +- Exchange(distribution=[hash[i_item_sk]])
                        :  :     :                          :  :              :                    :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :  :              :                    +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :  :     :                          :  :              :                       +- Calc(select=[d_date_sk], where=[AND(>=(d_year, 1998), <=(d_year, 2000))])
                        :  :     :                          :  :              :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                        :  :     :                          :  :              +- Reused(reference_id=[1])
                        :  :     :                          :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :                          :     +- Calc(select=[i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :                          :           :- Calc(select=[ws_sold_date_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
                        :  :     :                          :           :     :- Exchange(distribution=[hash[ws_item_sk]])
                        :  :     :                          :           :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk])
                        :  :     :                          :           :     +- Exchange(distribution=[hash[i_item_sk]])
                        :  :     :                          :           :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     :                          :           +- Reused(reference_id=[1])
                        :  :     :                          +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  :     :                             +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :  :     +- Exchange(distribution=[broadcast], reuse_id=[4])
                        :  :        +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(average_sales) AS $f0])
                        :  :           +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS average_sales])
                        :  :              +- Exchange(distribution=[single])
                        :  :                 +- LocalSortAggregate(select=[Partial_AVG($f0) AS (sum$0, count$1)])
                        :  :                    +- Calc(select=[*(quantity, list_price) AS $f0])
                        :  :                       +- Union(all=[true], union=[quantity, list_price])
                        :  :                          :- Union(all=[true], union=[quantity, list_price])
                        :  :                          :  :- Calc(select=[ss_quantity AS quantity, ss_list_price AS list_price])
                        :  :                          :  :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :                          :  :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_quantity, ss_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])
                        :  :                          :  :     +- Reused(reference_id=[1])
                        :  :                          :  +- Calc(select=[cs_quantity AS quantity, cs_list_price AS list_price])
                        :  :                          :     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :                          :        :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_quantity, cs_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])
                        :  :                          :        +- Reused(reference_id=[1])
                        :  :                          +- Calc(select=[ws_quantity AS quantity, ws_list_price AS list_price])
                        :  :                             +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_quantity, ws_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :                                :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_quantity, ws_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])
                        :  :                                +- Reused(reference_id=[1])
                        :  +- Calc(select=['catalog' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])
                        :     +- NestedLoopJoin(where=[>(sales, $f0)], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                        :        :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count$1) AS number_sales])
                        :        :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :        :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count$1])
                        :        :        +- Calc(select=[i_brand_id, i_class_id, i_category_id, *(cs_quantity, cs_list_price) AS $f3])
                        :        :           +- HashSemiJoin(where=[=(cs_item_sk, ss_item_sk)], join=[cs_item_sk, cs_quantity, cs_list_price, i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
                        :        :              :- Calc(select=[cs_item_sk, cs_quantity, cs_list_price, i_brand_id, i_class_id, i_category_id])
                        :        :              :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :              :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, i_brand_id, i_class_id, i_category_id])
                        :        :              :     :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
                        :        :              :     :     :- Exchange(distribution=[hash[cs_item_sk]])
                        :        :              :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price])
                        :        :              :     :     +- Exchange(distribution=[hash[i_item_sk]])
                        :        :              :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :        :              :     +- Reused(reference_id=[2])
                        :        :              +- Reused(reference_id=[3])
                        :        +- Reused(reference_id=[4])
                        +- Calc(select=['web' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])
                           +- NestedLoopJoin(where=[>(sales, $f0)], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                              :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count$1) AS number_sales])
                              :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                              :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count$1])
                              :        +- Calc(select=[i_brand_id, i_class_id, i_category_id, *(ws_quantity, ws_list_price) AS $f3])
                              :           +- HashSemiJoin(where=[=(ws_item_sk, ss_item_sk)], join=[ws_item_sk, ws_quantity, ws_list_price, i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
                              :              :- Calc(select=[ws_item_sk, ws_quantity, ws_list_price, i_brand_id, i_class_id, i_category_id])
                              :              :  +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :              :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price, i_brand_id, i_class_id, i_category_id])
                              :              :     :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
                              :              :     :     :- Exchange(distribution=[hash[ws_item_sk]])
                              :              :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price])
                              :              :     :     +- Exchange(distribution=[hash[i_item_sk]])
                              :              :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                              :              :     +- Reused(reference_id=[2])
                              :              +- Reused(reference_id=[3])
                              +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q14b, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 14 in stream 0 using template query14.tpl

with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1998 AND 1998 + 2
 intersect
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1998 AND 1998 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1998 AND 1998 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
(select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select cs_quantity quantity
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  * from
 (select 'store' channel, i_brand_id,i_class_id,i_category_id
        ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales 
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998 + 1
                       and d_moy = 12
                       and d_dom = 1)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
 (select 'store' channel, i_brand_id,i_class_id
        ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998
                       and d_moy = 12
                       and d_dom = 1)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
 where this_year.i_brand_id= last_year.i_brand_id
   and this_year.i_class_id = last_year.i_class_id
   and this_year.i_category_id = last_year.i_category_id
 order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
 limit 100

-- end query 14 in stream 0 using template query14.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(channel=[$0], i_brand_id=[$1], i_class_id=[$2], i_category_id=[$3], sales=[$4], number_sales=[$5], channel0=[$6], i_brand_id0=[$7], i_class_id0=[$8], i_category_id0=[$9], sales0=[$10], number_sales0=[$11])
   +- LogicalFilter(condition=[AND(=($1, $7), =($2, $8), =($3, $9))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(channel=['store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
         :  +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
         :     +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
         :        +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
         :           +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalProject(ss_item_sk=[$0])
    LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
        LogicalIntersect(all=[false])
          LogicalIntersect(all=[false])
            LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
              LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1998), <=($51, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
              LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($2, $23), =($0, $45), =($49, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[AND(=($6, CAST(+(1998, 1)):BIGINT NOT NULL), =($8, 12), =($9, 1))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :                 :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalProject(channel=['store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
            +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
               +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
                  +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
                     +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalProject(ss_item_sk=[$0])
    LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
        LogicalIntersect(all=[false])
          LogicalIntersect(all=[false])
            LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
              LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1998), <=($51, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
              LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1998), <=($62, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($2, $23), =($0, $45), =($49, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[AND(=($6, 1998), =($8, 12), =($9, 1))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=['store' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales, 'store' AS channel0, i_brand_id0, i_class_id0, i_category_id0, sales0, number_sales0])
         +- HashJoin(where=[AND(=(i_brand_id, i_brand_id0), =(i_class_id, i_class_id0), =(i_category_id, i_category_id0))], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, i_brand_id0, i_class_id0, i_category_id0, sales0, number_sales0], joinType=[InnerJoin], build=[left])
            :- Calc(select=[i_brand_id, i_class_id, i_category_id, sales, number_sales])
            :  +- NestedLoopJoin(where=[>(sales, $f0)], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :     :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count$1) AS number_sales])
            :     :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count$1])
            :     :        +- Calc(select=[i_brand_id, i_class_id, i_category_id, *(ss_quantity, ss_list_price) AS $f3])
            :     :           +- NestedLoopJoin(where=[=(d_week_seq, $f0)], join=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :     :              :- Calc(select=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq], reuse_id=[2])
            :     :              :  +- HashSemiJoin(where=[=(ss_item_sk, ss_item_sk0)], join=[ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
            :     :              :     :- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq])
            :     :              :     :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_date_sk, d_week_seq], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id])
            :     :              :     :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
            :     :              :     :     :     :- Exchange(distribution=[hash[ss_item_sk]])
            :     :              :     :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])
            :     :              :     :     :     +- Exchange(distribution=[hash[i_item_sk]])
            :     :              :     :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :     :     +- Exchange(distribution=[broadcast])
            :     :              :     :        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_week_seq];filterPredicates=[]]]], fields=[d_date_sk, d_week_seq])
            :     :              :     +- Exchange(distribution=[broadcast])
            :     :              :        +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
            :     :              :           +- Calc(select=[i_item_sk AS ss_item_sk])
            :     :              :              +- HashJoin(where=[AND(=(i_brand_id0, i_brand_id), =(i_class_id0, i_class_id), =(i_category_id0, i_category_id))], join=[i_brand_id, i_class_id, i_category_id, i_item_sk, i_brand_id0, i_class_id0, i_category_id0], joinType=[InnerJoin], build=[right])
            :     :              :                 :- HashSemiJoin(where=[AND(OR(=(i_brand_id, i_brand_id0), AND(IS NULL(i_brand_id), IS NULL(i_brand_id0))), OR(=(i_class_id, i_class_id0), AND(IS NULL(i_class_id), IS NULL(i_class_id0))), OR(=(i_category_id, i_category_id0), AND(IS NULL(i_category_id), IS NULL(i_category_id0))))], join=[i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], build=[right])
            :     :              :                 :  :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :              :                 :  :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :        +- Calc(select=[i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :                 :  :              :- Calc(select=[ss_sold_date_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :              :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :                 :  :              :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk])
            :     :              :                 :  :              :     +- Exchange(distribution=[broadcast])
            :     :              :                 :  :              :        +- HashSemiJoin(where=[AND(OR(=(i_brand_id, i_brand_id0), AND(IS NULL(i_brand_id), IS NULL(i_brand_id0))), OR(=(i_class_id, i_class_id0), AND(IS NULL(i_class_id), IS NULL(i_class_id0))), OR(=(i_category_id, i_category_id0), AND(IS NULL(i_category_id), IS NULL(i_category_id0))))], join=[i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[LeftSemiJoin], build=[left])
            :     :              :                 :  :              :           :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :              :                 :  :              :           :  +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :              :           +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :              :                 :  :              :              +- Calc(select=[i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :              :                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :                 :  :              :                    :- Calc(select=[cs_sold_date_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :              :                    :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
            :     :              :                 :  :              :                    :     :- Exchange(distribution=[hash[cs_item_sk]])
            :     :              :                 :  :              :                    :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk])
            :     :              :                 :  :              :                    :     +- Exchange(distribution=[hash[i_item_sk]])
            :     :              :                 :  :              :                    :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :  :              :                    +- Exchange(distribution=[broadcast], reuse_id=[1])
            :     :              :                 :  :              :                       +- Calc(select=[d_date_sk], where=[AND(>=(d_year, 1998), <=(d_year, 2000))])
            :     :              :                 :  :              :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :     :              :                 :  :              +- Reused(reference_id=[1])
            :     :              :                 :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :              :                 :     +- Calc(select=[i_brand_id, i_class_id, i_category_id])
            :     :              :                 :        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, i_brand_id, i_class_id, i_category_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :                 :           :- Calc(select=[ws_sold_date_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], joinType=[InnerJoin], build=[right])
            :     :              :                 :           :     :- Exchange(distribution=[hash[ws_item_sk]])
            :     :              :                 :           :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk])
            :     :              :                 :           :     +- Exchange(distribution=[hash[i_item_sk]])
            :     :              :                 :           :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :     :              :                 :           +- Reused(reference_id=[1])
            :     :              :                 +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :     :              :                    +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :     :              +- Exchange(distribution=[broadcast])
            :     :                 +- SortAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
            :     :                    +- Exchange(distribution=[single])
            :     :                       +- LocalSortAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
            :     :                          +- Calc(select=[d_week_seq], where=[AND(=(d_year, 1999), =(d_moy, 12), =(d_dom, 1))])
            :     :                             +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_week_seq, d_year, d_moy, d_dom];filterPredicates=[]]]], fields=[d_week_seq, d_year, d_moy, d_dom])
            :     +- Exchange(distribution=[broadcast], reuse_id=[3])
            :        +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(average_sales) AS $f0])
            :           +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS average_sales])
            :              +- Exchange(distribution=[single])
            :                 +- LocalSortAggregate(select=[Partial_AVG($f0) AS (sum$0, count$1)])
            :                    +- Calc(select=[*(quantity, list_price) AS $f0])
            :                       +- Union(all=[true], union=[quantity, list_price])
            :                          :- Union(all=[true], union=[quantity, list_price])
            :                          :  :- Calc(select=[ss_quantity AS quantity, ss_list_price AS list_price])
            :                          :  :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :  :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_quantity, ss_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])
            :                          :  :     +- Reused(reference_id=[1])
            :                          :  +- Calc(select=[cs_quantity AS quantity, cs_list_price AS list_price])
            :                          :     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :        :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_quantity, cs_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])
            :                          :        +- Reused(reference_id=[1])
            :                          +- Calc(select=[ws_quantity AS quantity, ws_list_price AS list_price])
            :                             +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_quantity, ws_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                                :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_quantity, ws_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])
            :                                +- Reused(reference_id=[1])
            +- Calc(select=[i_brand_id, i_class_id, i_category_id, sales, number_sales])
               +- NestedLoopJoin(where=[>(sales, $f0)], join=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                  :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count$1) AS number_sales])
                  :  +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                  :     +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count$1])
                  :        +- Calc(select=[i_brand_id, i_class_id, i_category_id, *(ss_quantity, ss_list_price) AS $f3])
                  :           +- NestedLoopJoin(where=[=(d_week_seq, $f0)], join=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                  :              :- Reused(reference_id=[2])
                  :              +- Exchange(distribution=[broadcast])
                  :                 +- SortAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                  :                    +- Exchange(distribution=[single])
                  :                       +- LocalSortAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
                  :                          +- Calc(select=[d_week_seq], where=[AND(=(d_year, 1998), =(d_moy, 12), =(d_dom, 1))])
                  :                             +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_week_seq, d_year, d_moy, d_dom];filterPredicates=[]]]], fields=[d_week_seq, d_year, d_moy, d_dom])
                  +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q15, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 15 in stream 0 using template query15.tpl
select  ca_zip
       ,sum(cs_sales_price)
 from catalog_sales
     ,customer
     ,customer_address
     ,date_dim
 where cs_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',
                                   '85392', '85460', '80348', '81792')
 	      or ca_state in ('CA','WA','GA')
 	      or cs_sales_price > 500)
 	and cs_sold_date_sk = d_date_sk
 	and d_qoy = 1 and d_year = 1998
 group by ca_zip
 order by ca_zip
 limit 100

-- end query 15 in stream 0 using template query15.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
   +- LogicalProject(ca_zip=[$61], cs_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($3, $34), =($38, $52), OR(=(SUBSTR($61, 1, 5), '85669'), =(SUBSTR($61, 1, 5), '86197'), =(SUBSTR($61, 1, 5), '88274'), =(SUBSTR($61, 1, 5), '83405'), =(SUBSTR($61, 1, 5), '86475'), =(SUBSTR($61, 1, 5), '85392'), =(SUBSTR($61, 1, 5), '85460'), =(SUBSTR($61, 1, 5), '80348'), =(SUBSTR($61, 1, 5), '81792'), =($60, 'CA'), =($60, 'WA'), =($60, 'GA'), >($21, 500)), =($0, $65), =($75, 1), =($71, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[ca_zip ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ca_zip ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[ca_zip], select=[ca_zip, Final_SUM(sum$0) AS EXPR$1])
         +- Exchange(distribution=[hash[ca_zip]])
            +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip, Partial_SUM(cs_sales_price) AS sum$0])
               +- Calc(select=[ca_zip, cs_sales_price])
                  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_sales_price, ca_zip, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_sold_date_sk, cs_sales_price, ca_zip])
                     :  +- HashJoin(where=[AND(=(cs_bill_customer_sk, c_customer_sk), OR(>(cs_sales_price, 500), IN(SUBSTR(ca_zip, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), =(ca_state, 'CA'), =(ca_state, 'WA'), =(ca_state, 'GA')))], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price, c_customer_sk, ca_state, ca_zip], joinType=[InnerJoin], build=[right])
                     :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price])
                     :     +- Exchange(distribution=[hash[c_customer_sk]])
                     :        +- Calc(select=[c_customer_sk, ca_state, ca_zip])
                     :           +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_state, ca_zip], joinType=[InnerJoin], build=[left])
                     :              :- Exchange(distribution=[hash[c_current_addr_sk]])
                     :              :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
                     :              +- Exchange(distribution=[hash[ca_address_sk]])
                     :                 +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_state, ca_zip])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 1), =(d_year, 1998))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q16, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 16 in stream 0 using template query16.tpl
select  
   count(distinct cs_order_number) as  `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '1999-02-01' and
           (cast('1999-02-01' as date) + INTERVAL '60' day)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'TN'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Williamson County','Ziebach County','Walker County','Fairfield County',
                  'Richland County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100

-- end query 16 in stream 0 using template query16.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count=[COUNT(DISTINCT $0)], total shipping cost=[SUM($1)], total net profit=[SUM($2)])
   +- LogicalProject(cs_order_number=[$17], cs_ext_ship_cost=[$28], cs_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST('1999-02-01'):DATE NOT NULL), <=($36, +(CAST('1999-02-01'):DATE NOT NULL, 5184000000)), =($2, $34), =($10, $62), =($70, 'TN'), =($11, $75), OR(=($100, 'Williamson County'), =($100, 'Ziebach County'), =($100, 'Walker County'), =($100, 'Fairfield County'), =($100, 'Richland County')), EXISTS({
LogicalFilter(condition=[AND(=($cor0.cs_order_number, $17), <>($cor0.cs_warehouse_sk, $14))])
  LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
}), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.cs_order_number, $16)])
  LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[order count ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count ASC], offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count, Final_MIN(min$1) AS total shipping cost, Final_MIN(min$2) AS total net profit])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(cs_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost) FILTER $g_1 AS min$1, Partial_MIN(total net profit) FILTER $g_1 AS min$2])
               +- Calc(select=[CAST(cs_order_number) AS cs_order_number, total shipping cost, total net profit, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[cs_order_number, $e], select=[cs_order_number, $e, Final_SUM(sum$0) AS total shipping cost, Final_SUM(sum$1) AS total net profit])
                     +- Exchange(distribution=[hash[cs_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[cs_order_number, $e], select=[cs_order_number, $e, Partial_SUM(cs_ext_ship_cost) AS sum$0, Partial_SUM(cs_net_profit) AS sum$1])
                           +- Expand(projects=[{cs_order_number, cs_ext_ship_cost, cs_net_profit, 0 AS $e}, {null AS cs_order_number, cs_ext_ship_cost, cs_net_profit, 1 AS $e}])
                              +- HashSemiJoin(where=[=(cs_order_number, cr_order_number)], join=[cs_order_number, cs_ext_ship_cost, cs_net_profit], joinType=[LeftAntiJoin], build=[left])
                                 :- Calc(select=[cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :  +- HashSemiJoin(where=[AND(=(cs_order_number, cs_order_number0), <>(cs_warehouse_sk, cs_warehouse_sk0))], join=[cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit], joinType=[LeftSemiJoin], build=[left])
                                 :     :- Exchange(distribution=[hash[cs_order_number]])
                                 :     :  +- Calc(select=[cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :     :     +- HashJoin(where=[=(cs_call_center_sk, cc_call_center_sk)], join=[cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, cc_call_center_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :        :- Calc(select=[cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :     :        :  +- HashJoin(where=[=(cs_ship_date_sk, d_date_sk)], join=[cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :        :     :- Calc(select=[cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :     :        :     :  +- HashJoin(where=[=(cs_ship_addr_sk, ca_address_sk)], join=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, ca_address_sk], joinType=[InnerJoin], build=[right])
                                 :     :        :     :     :- Exchange(distribution=[hash[cs_ship_addr_sk]])
                                 :     :        :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit];filterPredicates=[]]]], fields=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :     :        :     :     +- Exchange(distribution=[hash[ca_address_sk]])
                                 :     :        :     :        +- Calc(select=[ca_address_sk], where=[=(ca_state, 'TN')])
                                 :     :        :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
                                 :     :        :     +- Exchange(distribution=[broadcast])
                                 :     :        :        +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1999-02-01), <=(d_date, 1999-04-02))])
                                 :     :        :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                                 :     :        +- Exchange(distribution=[broadcast])
                                 :     :           +- Calc(select=[cc_call_center_sk], where=[IN(cc_county, 'Williamson County', 'Ziebach County', 'Walker County', 'Fairfield County', 'Richland County')])
                                 :     :              +- TableSourceScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_county];filterPredicates=[]]]], fields=[cc_call_center_sk, cc_county])
                                 :     +- Exchange(distribution=[hash[cs_order_number]])
                                 :        +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_warehouse_sk, cs_order_number];filterPredicates=[]]]], fields=[cs_warehouse_sk, cs_order_number])
                                 +- Exchange(distribution=[hash[cr_order_number]])
                                    +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_order_number];filterPredicates=[]]]], fields=[cr_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q17, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 17 in stream 0 using template query17.tpl
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as store_returns_quantitycount
       ,avg(sr_return_quantity) as store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '1998Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('1998Q1','1998Q2','1998Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100

-- end query 17 in stream 0 using template query17.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_id=[$0], i_item_desc=[$1], s_state=[$2], store_sales_quantitycount=[$3], store_sales_quantityave=[$4], store_sales_quantitystdev=[$5], store_sales_quantitycov=[/($5, $4)], store_returns_quantitycount=[$6], store_returns_quantityave=[$7], store_returns_quantitystdev=[$8], store_returns_quantitycov=[/($8, $7)], catalog_sales_quantitycount=[$9], catalog_sales_quantityave=[$10], catalog_sales_quantitystdev=[$11], catalog_sales_quantitycov=[/($11, $10)])
   +- LogicalAggregate(group=[{0, 1, 2}], store_sales_quantitycount=[COUNT($3)], store_sales_quantityave=[AVG($3)], store_sales_quantitystdev=[STDDEV_SAMP($3)], store_returns_quantitycount=[COUNT($4)], store_returns_quantityave=[AVG($4)], store_returns_quantitystdev=[STDDEV_SAMP($4)], catalog_sales_quantitycount=[COUNT($5)], catalog_sales_quantityave=[AVG($5)], catalog_sales_quantitystdev=[STDDEV_SAMP($5)])
      +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_state=[$185], ss_quantity=[$10], sr_return_quantity=[$33], cs_quantity=[$61])
         +- LogicalFilter(condition=[AND(=($92, '1998Q1'), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), OR(=($120, '1998Q1'), =($120, '1998Q2'), =($120, '1998Q3')), =($26, $46), =($25, $58), =($43, $133), OR(=($148, '1998Q1'), =($148, '1998Q2'), =($148, '1998Q3')))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
               :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
               :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_item_id, i_item_desc, s_state, store_sales_quantitycount, CAST(/(CAST($f4), store_sales_quantitycount)) AS store_sales_quantityave, CAST(POWER(/(-($f5, /(*(CAST($f4), CAST($f4)), store_sales_quantitycount)), CASE(=(store_sales_quantitycount, 1), null, -(store_sales_quantitycount, 1))), 0.5)) AS store_sales_quantitystdev, /(CAST(POWER(/(-($f5, /(*(CAST($f4), CAST($f4)), store_sales_quantitycount)), CASE(=(store_sales_quantitycount, 1), null, -(store_sales_quantitycount, 1))), 0.5)), CAST(/(CAST($f4), store_sales_quantitycount))) AS store_sales_quantitycov, store_returns_quantitycount, CAST(/(CAST($f7), store_returns_quantitycount)) AS store_returns_quantityave, CAST(POWER(/(-($f8, /(*(CAST($f7), CAST($f7)), store_returns_quantitycount)), CASE(=(store_returns_quantitycount, 1), null, -(store_returns_quantitycount, 1))), 0.5)) AS store_returns_quantitystdev, /(CAST(POWER(/(-($f8, /(*(CAST($f7), CAST($f7)), store_returns_quantitycount)), CASE(=(store_returns_quantitycount, 1), null, -(store_returns_quantitycount, 1))), 0.5)), CAST(/(CAST($f7), store_returns_quantitycount))) AS store_returns_quantitycov, catalog_sales_quantitycount, CAST(/(CAST($f10), catalog_sales_quantitycount)) AS catalog_sales_quantityave, CAST(POWER(/(-($f11, /(*(CAST($f10), CAST($f10)), catalog_sales_quantitycount)), CASE(=(catalog_sales_quantitycount, 1), null, -(catalog_sales_quantitycount, 1))), 0.5)) AS catalog_sales_quantitystdev, /(CAST(POWER(/(-($f11, /(*(CAST($f10), CAST($f10)), catalog_sales_quantitycount)), CASE(=(catalog_sales_quantitycount, 1), null, -(catalog_sales_quantitycount, 1))), 0.5)), CAST(/(CAST($f10), catalog_sales_quantitycount))) AS catalog_sales_quantitycov])
+- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_state ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_state ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, s_state], select=[i_item_id, i_item_desc, s_state, Final_COUNT(count$0) AS store_sales_quantitycount, Final_SUM(sum$1) AS $f4, Final_SUM(sum$2) AS $f5, Final_COUNT(count$3) AS store_returns_quantitycount, Final_SUM(sum$4) AS $f7, Final_SUM(sum$5) AS $f8, Final_COUNT(count$6) AS catalog_sales_quantitycount, Final_SUM(sum$7) AS $f10, Final_SUM(sum$8) AS $f11])
            +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_state]])
               +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, s_state], select=[i_item_id, i_item_desc, s_state, Partial_COUNT(ss_quantity) AS count$0, Partial_SUM(ss_quantity) AS sum$1, Partial_SUM($f6) AS sum$2, Partial_COUNT(sr_return_quantity) AS count$3, Partial_SUM(sr_return_quantity) AS sum$4, Partial_SUM($f7) AS sum$5, Partial_COUNT(cs_quantity) AS count$6, Partial_SUM(cs_quantity) AS sum$7, Partial_SUM($f8) AS sum$8])
                  +- Calc(select=[i_item_id, i_item_desc, s_state, ss_quantity, sr_return_quantity, cs_quantity, *(CAST(ss_quantity), CAST(ss_quantity)) AS $f6, *(CAST(sr_return_quantity), CAST(sr_return_quantity)) AS $f7, *(CAST(cs_quantity), CAST(cs_quantity)) AS $f8])
                     +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, s_store_sk, s_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                        :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                        :     :  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                        :     :     :  +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_return_quantity, i_item_id, i_item_desc])
                        :     :     :     :  +- HashJoin(where=[AND(=(cs_bill_customer_sk, sr_customer_sk), =(cs_item_sk, ss_item_sk))], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                        :     :     :     :     :- Exchange(distribution=[hash[cs_bill_customer_sk, cs_item_sk]])
                        :     :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity])
                        :     :     :     :     +- Exchange(distribution=[hash[sr_customer_sk, ss_item_sk]])
                        :     :     :     :        +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_id, i_item_desc])
                        :     :     :     :           +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_sk, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                        :     :     :     :              :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity])
                        :     :     :     :              :  +- HashJoin(where=[AND(=(ss_customer_sk, sr_customer_sk), =(ss_item_sk, sr_item_sk), =(ss_ticket_number, sr_ticket_number))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity, sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], joinType=[InnerJoin], build=[right])
                        :     :     :     :              :     :- Exchange(distribution=[hash[ss_item_sk]])
                        :     :     :     :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity])
                        :     :     :     :              :     +- Exchange(distribution=[hash[sr_item_sk]])
                        :     :     :     :              :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
                        :     :     :     :              +- Exchange(distribution=[hash[i_item_sk]])
                        :     :     :     :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc])
                        :     :     :     +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :     :     :        +- Calc(select=[d_date_sk], where=[OR(=(d_quarter_name, '1998Q1'), =(d_quarter_name, '1998Q2'), =(d_quarter_name, '1998Q3'))])
                        :     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_quarter_name];filterPredicates=[]]]], fields=[d_date_sk, d_quarter_name])
                        :     :     +- Exchange(distribution=[broadcast])
                        :     :        +- Calc(select=[d_date_sk], where=[=(d_quarter_name, '1998Q1')])
                        :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_quarter_name];filterPredicates=[]]]], fields=[d_date_sk, d_quarter_name])
                        :     +- Reused(reference_id=[1])
                        +- Exchange(distribution=[broadcast])
                           +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q18, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 18 in stream 0 using template query18.tpl
select  i_item_id,
        ca_country,
        ca_state, 
        ca_county,
        avg( cast(cs_quantity as decimal(12,2))) agg1,
        avg( cast(cs_list_price as decimal(12,2))) agg2,
        avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
        avg( cast(cs_sales_price as decimal(12,2))) agg4,
        avg( cast(cs_net_profit as decimal(12,2))) agg5,
        avg( cast(c_birth_year as decimal(12,2))) agg6,
        avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
 from catalog_sales, customer_demographics cd1, 
      customer_demographics cd2, customer, customer_address, date_dim, item
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd1.cd_demo_sk and
       cs_bill_customer_sk = c_customer_sk and
       cd1.cd_gender = 'M' and 
       cd1.cd_education_status = 'Primary' and
       c_current_cdemo_sk = cd2.cd_demo_sk and
       c_current_addr_sk = ca_address_sk and
       c_birth_month in (1,2,3,4,5,6) and
       d_year = 1998 and
       ca_state in ('ID','TN','SD'
                   ,'AL','SC','OH','LA')
 group by rollup (i_item_id, ca_country, ca_state, ca_county)
 order by ca_country,
        ca_state, 
        ca_county,
	i_item_id
 limit 100

-- end query 18 in stream 0 using template query18.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$2], sort2=[$3], sort3=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], agg1=[AVG($4)], agg2=[AVG($5)], agg3=[AVG($6)], agg4=[AVG($7)], agg5=[AVG($8)], agg6=[AVG($9)], agg7=[AVG($10)])
   +- LogicalProject(i_item_id=[$112], ca_country=[$80], ca_state=[$78], ca_county=[$77], $f4=[CAST($18):DECIMAL(12, 2)], $f5=[CAST($20):DECIMAL(12, 2)], $f6=[CAST($27):DECIMAL(12, 2)], $f7=[CAST($21):DECIMAL(12, 2)], $f8=[CAST($33):DECIMAL(12, 2)], $f9=[CAST($65):DECIMAL(12, 2)], $f10=[CAST($40):DECIMAL(12, 2)])
      +- LogicalFilter(condition=[AND(=($0, $83), =($15, $111), =($4, $34), =($3, $52), =($35, 'M'), =($37, 'Primary'), =($54, $43), =($56, $70), OR(=($64, 1), =($64, 2), =($64, 3), =($64, 4), =($64, 5), =($64, 6)), =($89, 1998), OR(=($78, 'ID'), =($78, 'TN'), =($78, 'SD'), =($78, 'AL'), =($78, 'SC'), =($78, 'OH'), =($78, 'LA')))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[ca_country ASC, ca_state ASC, ca_county ASC, i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ca_country ASC, ca_state ASC, ca_county ASC, i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(i_item_id) AS i_item_id, ca_country, ca_state, ca_county, agg1, agg2, agg3, agg4, agg5, agg6, agg7])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, ca_country, ca_state, ca_county, $e], select=[i_item_id, ca_country, ca_state, ca_county, $e, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4, Final_AVG(sum$8, count$9) AS agg5, Final_AVG(sum$10, count$11) AS agg6, Final_AVG(sum$12, count$13) AS agg7])
            +- Exchange(distribution=[hash[i_item_id, ca_country, ca_state, ca_county, $e]])
               +- LocalHashAggregate(groupBy=[i_item_id, ca_country, ca_state, ca_county, $e], select=[i_item_id, ca_country, ca_state, ca_county, $e, Partial_AVG($f4) AS (sum$0, count$1), Partial_AVG($f5) AS (sum$2, count$3), Partial_AVG($f6) AS (sum$4, count$5), Partial_AVG($f7) AS (sum$6, count$7), Partial_AVG($f8) AS (sum$8, count$9), Partial_AVG($f9) AS (sum$10, count$11), Partial_AVG($f10) AS (sum$12, count$13)])
                  +- Expand(projects=[{i_item_id, ca_country, ca_state, ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 0 AS $e}, {i_item_id, ca_country, ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 1 AS $e}, {i_item_id, ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 3 AS $e}, {i_item_id, null AS ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 7 AS $e}, {null AS i_item_id, null AS ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 15 AS $e}])
                     +- Calc(select=[i_item_id, ca_country, ca_state, ca_county, CAST(cs_quantity) AS $f4, CAST(cs_list_price) AS $f5, CAST(cs_coupon_amt) AS $f6, CAST(cs_sales_price) AS $f7, CAST(cs_net_profit) AS $f8, CAST(c_birth_year) AS $f9, CAST(cd_dep_count) AS $f10])
                        +- HashJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_bill_customer_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, i_item_id, c_customer_sk, c_birth_year, ca_county, ca_state, ca_country], joinType=[InnerJoin], build=[left])
                           :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                           :  +- Calc(select=[cs_bill_customer_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, i_item_id])
                           :     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :        :- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, i_item_id])
                           :        :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                           :        :     :- Exchange(distribution=[hash[cs_item_sk]])
                           :        :     :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count])
                           :        :     :     +- HashJoin(where=[=(cs_bill_cdemo_sk, cd_demo_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_demo_sk, cd_dep_count], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :        :     :        :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit])
                           :        :     :        +- Exchange(distribution=[broadcast])
                           :        :     :           +- Calc(select=[cd_demo_sk, cd_dep_count], where=[AND(=(cd_gender, 'M'), =(cd_education_status, 'Primary'))])
                           :        :     :              +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_education_status, cd_dep_count];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_education_status, cd_dep_count])
                           :        :     +- Exchange(distribution=[hash[i_item_sk]])
                           :        :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                           :        +- Exchange(distribution=[broadcast])
                           :           +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                           :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                           +- Exchange(distribution=[hash[c_customer_sk]])
                              +- Calc(select=[c_customer_sk, c_birth_year, ca_county, ca_state, ca_country])
                                 +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, c_birth_year, ca_address_sk, ca_county, ca_state, ca_country], joinType=[InnerJoin], build=[left])
                                    :- Exchange(distribution=[hash[c_current_addr_sk]])
                                    :  +- Calc(select=[c_customer_sk, c_current_addr_sk, c_birth_year])
                                    :     +- HashJoin(where=[=(c_current_cdemo_sk, cd_demo_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_year, cd_demo_sk], joinType=[InnerJoin], build=[right])
                                    :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                                    :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_year], where=[IN(c_birth_month, 1, 2, 3, 4, 5, 6)])
                                    :        :     +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_month, c_birth_year];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_month, c_birth_year])
                                    :        +- Exchange(distribution=[hash[cd_demo_sk]])
                                    :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk];filterPredicates=[]]]], fields=[cd_demo_sk])
                                    +- Exchange(distribution=[hash[ca_address_sk]])
                                       +- Calc(select=[ca_address_sk, ca_county, ca_state, ca_country], where=[IN(ca_state, 'ID', 'TN', 'SD', 'AL', 'SC', 'OH', 'LA')])
                                          +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_county, ca_state, ca_country];filterPredicates=[]]]], fields=[ca_address_sk, ca_county, ca_state, ca_country])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q19, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 19 in stream 0 using template query19.tpl
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=1
   and d_moy=11
   and d_year=1998
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100 

-- end query 19 in stream 0 using template query19.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$4], sort1=[$1], sort2=[$0], sort3=[$2], sort4=[$3], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(brand_id=[$1], brand=[$0], i_manufact_id=[$2], i_manufact=[$3], ext_price=[$4])
   +- LogicalAggregate(group=[{0, 1, 2, 3}], ext_price=[SUM($4)])
      +- LogicalProject(brand=[$59], brand_id=[$58], i_manufact_id=[$64], i_manufact=[$65], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 11), =($6, 1998), =($31, $73), =($77, $91), <>(SUBSTR($100, 1, 5), SUBSTR($129, 1, 5)), =($35, $104))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[brand_id, brand, i_manufact_id, i_manufact, ext_price])
+- SortLimit(orderBy=[ext_price DESC, brand ASC, brand_id ASC, i_manufact_id ASC, i_manufact ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ext_price DESC, brand ASC, brand_id ASC, i_manufact_id ASC, i_manufact ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[brand, brand_id, i_manufact_id, i_manufact], select=[brand, brand_id, i_manufact_id, i_manufact, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[brand, brand_id, i_manufact_id, i_manufact]])
               +- LocalHashAggregate(groupBy=[brand, brand_id, i_manufact_id, i_manufact], select=[brand, brand_id, i_manufact_id, i_manufact, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[i_brand AS brand, i_brand_id AS brand_id, i_manufact_id, i_manufact, ss_ext_sales_price])
                     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact])
                        :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                        :     :  +- HashJoin(where=[AND(<>(SUBSTR(ca_zip, 1, 5), SUBSTR(s_zip, 1, 5)), =(ss_store_sk, s_store_sk))], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ca_zip, s_store_sk, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ca_zip])
                        :     :     :  +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, c_customer_sk, ca_zip], joinType=[InnerJoin], build=[right])
                        :     :     :     :- Exchange(distribution=[hash[ss_customer_sk]])
                        :     :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                        :     :     :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :     :     :        +- Calc(select=[c_customer_sk, ca_zip])
                        :     :     :           +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_zip], joinType=[InnerJoin], build=[right])
                        :     :     :              :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :     :     :              :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
                        :     :     :              +- Exchange(distribution=[hash[ca_address_sk]])
                        :     :     :                 +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_zip])
                        :     :     +- Exchange(distribution=[broadcast])
                        :     :        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_zip])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- Calc(select=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact], where=[=(i_manager_id, 1)])
                        :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 11), =(d_year, 1998))])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q2, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 2 in stream 0 using template query2.tpl
with wscs as
 (select sold_date_sk
        ,sales_price
  from  (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales )
        union all
        (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 1998) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 1998+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1

-- end query 2 in stream 0 using template query2.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first])
+- LogicalProject(d_week_seq1=[$0], EXPR$1=[ROUND(/($1, $9), 2)], EXPR$2=[ROUND(/($2, $10), 2)], EXPR$3=[ROUND(/($3, $11), 2)], EXPR$4=[ROUND(/($4, $12), 2)], EXPR$5=[ROUND(/($5, $13), 2)], EXPR$6=[ROUND(/($6, $14), 2)], EXPR$7=[ROUND(/($7, $15), 2)])
   +- LogicalFilter(condition=[=($0, -($8, 53))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(d_week_seq1=[$0], sun_sales1=[$1], mon_sales1=[$2], tue_sales1=[$3], wed_sales1=[$4], thu_sales1=[$5], fri_sales1=[$6], sat_sales1=[$7])
         :  +- LogicalFilter(condition=[AND(=($12, $0), =($14, 1998))])
         :     +- LogicalJoin(condition=[true], joinType=[inner])
         :        :- LogicalAggregate(group=[{0}], sun_sales=[SUM($1)], mon_sales=[SUM($2)], tue_sales=[SUM($3)], wed_sales=[SUM($4)], thu_sales=[SUM($5)], fri_sales=[SUM($6)], sat_sales=[SUM($7)])
         :        :  +- LogicalProject(d_week_seq=[$6], $f1=[CASE(=($16, 'Sunday'), $1, null)], $f2=[CASE(=($16, 'Monday'), $1, null)], $f3=[CASE(=($16, 'Tuesday'), $1, null)], $f4=[CASE(=($16, 'Wednesday'), $1, null)], $f5=[CASE(=($16, 'Thursday'), $1, null)], $f6=[CASE(=($16, 'Friday'), $1, null)], $f7=[CASE(=($16, 'Saturday'), $1, null)])
         :        :     +- LogicalFilter(condition=[=($2, $0)])
         :        :        +- LogicalJoin(condition=[true], joinType=[inner])
         :        :           :- LogicalUnion(all=[true])
         :        :           :  :- LogicalProject(sold_date_sk=[$0], sales_price=[$1])
         :        :           :  :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
         :        :           :  :     +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :        :           :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
         :        :           :     +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :        :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalProject(d_week_seq2=[$0], sun_sales2=[$1], mon_sales2=[$2], tue_sales2=[$3], wed_sales2=[$4], thu_sales2=[$5], fri_sales2=[$6], sat_sales2=[$7])
            +- LogicalFilter(condition=[AND(=($12, $0), =($14, CAST(+(1998, 1)):BIGINT NOT NULL))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalAggregate(group=[{0}], sun_sales=[SUM($1)], mon_sales=[SUM($2)], tue_sales=[SUM($3)], wed_sales=[SUM($4)], thu_sales=[SUM($5)], fri_sales=[SUM($6)], sat_sales=[SUM($7)])
                  :  +- LogicalProject(d_week_seq=[$6], $f1=[CASE(=($16, 'Sunday'), $1, null)], $f2=[CASE(=($16, 'Monday'), $1, null)], $f3=[CASE(=($16, 'Tuesday'), $1, null)], $f4=[CASE(=($16, 'Wednesday'), $1, null)], $f5=[CASE(=($16, 'Thursday'), $1, null)], $f6=[CASE(=($16, 'Friday'), $1, null)], $f7=[CASE(=($16, 'Saturday'), $1, null)])
                  :     +- LogicalFilter(condition=[=($2, $0)])
                  :        +- LogicalJoin(condition=[true], joinType=[inner])
                  :           :- LogicalUnion(all=[true])
                  :           :  :- LogicalProject(sold_date_sk=[$0], sales_price=[$1])
                  :           :  :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
                  :           :  :     +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  :           :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
                  :           :     +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[d_week_seq1, ROUND(/(sun_sales1, sun_sales2), 2) AS EXPR$1, ROUND(/(mon_sales1, mon_sales2), 2) AS EXPR$2, ROUND(/(tue_sales1, tue_sales2), 2) AS EXPR$3, ROUND(/(wed_sales1, wed_sales2), 2) AS EXPR$4, ROUND(/(thu_sales1, thu_sales2), 2) AS EXPR$5, ROUND(/(fri_sales1, fri_sales2), 2) AS EXPR$6, ROUND(/(sat_sales1, sat_sales2), 2) AS EXPR$7])
+- SortLimit(orderBy=[d_week_seq1 ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[d_week_seq1 ASC], offset=[0], limit=[200], global=[false])
         +- HashJoin(where=[=(d_week_seq1, $f8)], join=[sun_sales2, mon_sales2, tue_sales2, wed_sales2, thu_sales2, fri_sales2, sat_sales2, $f8, d_week_seq1, sun_sales1, mon_sales1, tue_sales1, wed_sales1, thu_sales1, fri_sales1, sat_sales1], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[$f8]])
            :  +- Calc(select=[sun_sales AS sun_sales2, mon_sales AS mon_sales2, tue_sales AS tue_sales2, wed_sales AS wed_sales2, thu_sales AS thu_sales2, fri_sales AS fri_sales2, sat_sales AS sat_sales2, -(d_week_seq, 53) AS $f8])
            :     +- HashJoin(where=[=(d_week_seq, d_week_seq0)], join=[d_week_seq, d_week_seq0, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales], joinType=[InnerJoin], isBroadcast=[true], build=[left])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- Calc(select=[d_week_seq], where=[=(d_year, 1999)])
            :        :     +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_week_seq, d_year];filterPredicates=[]]]], fields=[d_week_seq, d_year])
            :        +- HashAggregate(isMerge=[true], groupBy=[d_week_seq], select=[d_week_seq, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales], reuse_id=[1])
            :           +- Exchange(distribution=[hash[d_week_seq]])
            :              +- LocalHashAggregate(groupBy=[d_week_seq], select=[d_week_seq, Partial_SUM($f1) AS sum$0, Partial_SUM($f2) AS sum$1, Partial_SUM($f3) AS sum$2, Partial_SUM($f4) AS sum$3, Partial_SUM($f5) AS sum$4, Partial_SUM($f6) AS sum$5, Partial_SUM($f7) AS sum$6])
            :                 +- Calc(select=[d_week_seq, CASE(=(d_day_name, 'Sunday'), ws_ext_sales_price, null) AS $f1, CASE(=(d_day_name, 'Monday'), ws_ext_sales_price, null) AS $f2, CASE(=(d_day_name, 'Tuesday'), ws_ext_sales_price, null) AS $f3, CASE(=(d_day_name, 'Wednesday'), ws_ext_sales_price, null) AS $f4, CASE(=(d_day_name, 'Thursday'), ws_ext_sales_price, null) AS $f5, CASE(=(d_day_name, 'Friday'), ws_ext_sales_price, null) AS $f6, CASE(=(d_day_name, 'Saturday'), ws_ext_sales_price, null) AS $f7])
            :                    +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, d_date_sk, d_week_seq, d_day_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                       :- Union(all=[true], union=[ws_sold_date_sk, ws_ext_sales_price])
            :                       :  :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_ext_sales_price])
            :                       :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ext_sales_price])
            :                       +- Exchange(distribution=[broadcast])
            :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_week_seq, d_day_name];filterPredicates=[]]]], fields=[d_date_sk, d_week_seq, d_day_name])
            +- Exchange(distribution=[hash[d_week_seq1]], exchange_mode=[BATCH])
               +- Calc(select=[d_week_seq AS d_week_seq1, sun_sales AS sun_sales1, mon_sales AS mon_sales1, tue_sales AS tue_sales1, wed_sales AS wed_sales1, thu_sales AS thu_sales1, fri_sales AS fri_sales1, sat_sales AS sat_sales1])
                  +- HashJoin(where=[=(d_week_seq, d_week_seq0)], join=[d_week_seq, d_week_seq0, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales], joinType=[InnerJoin], isBroadcast=[true], build=[left])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_week_seq], where=[=(d_year, 1998)])
                     :     +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_week_seq, d_year];filterPredicates=[]]]], fields=[d_week_seq, d_year])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q20, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 20 in stream 0 using template query20.tpl
select  i_item_id
       ,i_item_desc 
       ,i_category 
       ,i_class 
       ,i_current_price
       ,sum(cs_ext_sales_price) as itemrevenue 
       ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
           (partition by i_class) as revenueratio
 from	catalog_sales
     ,item 
     ,date_dim
 where cs_item_sk = i_item_sk 
   and i_category in ('Electronics', 'Women', 'Men')
   and cs_sold_date_sk = d_date_sk
 and d_date between cast('1998-01-02' as date) 
 				and (cast('1998-01-02' as date) + INTERVAL '30' day)
 group by i_item_id
         ,i_item_desc 
         ,i_category
         ,i_class
         ,i_current_price
 order by i_category
         ,i_class
         ,i_item_id
         ,i_item_desc
         ,revenueratio
limit 100

-- end query 20 in stream 0 using template query20.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$3], sort2=[$0], sort3=[$1], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_id=[$0], i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null))])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
      +- LogicalProject(i_item_id=[$35], i_item_desc=[$38], i_category=[$46], i_class=[$44], i_current_price=[$39], cs_ext_sales_price=[$23])
         +- LogicalFilter(condition=[AND(=($15, $34), OR(=($46, 'Electronics'), =($46, 'Women'), =($46, 'Men')), =($0, $56), >=($58, CAST('1998-01-02'):DATE NOT NULL), <=($58, +(CAST('1998-01-02'):DATE NOT NULL, 2592000000)))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, /($6, CASE(>(w0$o0, 0), CAST(w0$o1), null)) AS revenueratio])
         +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
            +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, *(itemrevenue, 100) AS $6])
               +- Sort(orderBy=[i_class ASC])
                  +- Exchange(distribution=[hash[i_class]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Final_SUM(sum$0) AS itemrevenue])
                        +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_category, i_class, i_current_price]])
                           +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Partial_SUM(cs_ext_sales_price) AS sum$0])
                              +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, cs_ext_sales_price])
                                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], joinType=[InnerJoin], build=[right])
                                    :     :- Exchange(distribution=[hash[cs_item_sk]])
                                    :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
                                    :     +- Exchange(distribution=[hash[i_item_sk]])
                                    :        +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[OR(=(i_category, 'Electronics'), =(i_category, 'Women'), =(i_category, 'Men'))])
                                    :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-02-01))])
                                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q21, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 21 in stream 0 using template query21.tpl
select  *
 from(select w_warehouse_name
            ,i_item_id
            ,sum(case when (cast(d_date as date) < cast ('1998-02-01' as date))
	                then inv_quantity_on_hand 
                      else 0 end) as inv_before
            ,sum(case when (cast(d_date as date) >= cast ('1998-02-01' as date))
                      then inv_quantity_on_hand 
                      else 0 end) as inv_after
   from inventory
       ,warehouse
       ,item
       ,date_dim
   where i_current_price between 0.99 and 1.49
     and i_item_sk          = inv_item_sk
     and inv_warehouse_sk   = w_warehouse_sk
     and inv_date_sk    = d_date_sk
     and d_date between (cast ('1998-02-01' as date) - INTERVAL '30' day)
                    and (cast ('1998-02-01' as date) + INTERVAL '30' day)
   group by w_warehouse_name, i_item_id) x
 where (case when inv_before > 0 
             then inv_after / inv_before 
             else null
             end) between 2.0/3.0 and 3.0/2.0
 order by w_warehouse_name
         ,i_item_id
 limit 100

-- end query 21 in stream 0 using template query21.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(w_warehouse_name=[$0], i_item_id=[$1], inv_before=[$2], inv_after=[$3])
   +- LogicalFilter(condition=[AND(>=(CASE(>($2, 0), /(CAST($3):DOUBLE, CAST($2):DOUBLE), null), /(2.0, 3.0)), <=(CASE(>($2, 0), /(CAST($3):DOUBLE, CAST($2):DOUBLE), null), /(3.0, 2.0)))])
      +- LogicalAggregate(group=[{0, 1}], inv_before=[SUM($2)], inv_after=[SUM($3)])
         +- LogicalProject(w_warehouse_name=[$6], i_item_id=[$19], $f2=[CASE(<(CAST($42):DATE, CAST('1998-02-01'):DATE NOT NULL), $3, 0)], $f3=[CASE(>=(CAST($42):DATE, CAST('1998-02-01'):DATE NOT NULL), $3, 0)])
            +- LogicalFilter(condition=[AND(>=($23, 0.99), <=($23, 1.49), =($18, $1), =($2, $4), =($0, $40), >=($42, -(CAST('1998-02-01'):DATE NOT NULL, 2592000000)), <=($42, +(CAST('1998-02-01'):DATE NOT NULL, 2592000000)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
                  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[w_warehouse_name ASC, i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_warehouse_name ASC, i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[w_warehouse_name, i_item_id, inv_before, inv_after], where=[AND(CASE(>(inv_before, 0), >=(/(CAST(inv_after), CAST(inv_before)), 0.666667), null), CASE(>(inv_before, 0), <=(/(CAST(inv_after), CAST(inv_before)), 1.500000), null))])
         +- HashAggregate(isMerge=[true], groupBy=[w_warehouse_name, i_item_id], select=[w_warehouse_name, i_item_id, Final_SUM(sum$0) AS inv_before, Final_SUM(sum$1) AS inv_after])
            +- Exchange(distribution=[hash[w_warehouse_name, i_item_id]])
               +- LocalHashAggregate(groupBy=[w_warehouse_name, i_item_id], select=[w_warehouse_name, i_item_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1])
                  +- Calc(select=[w_warehouse_name, i_item_id, CASE(<(d_date, 1998-02-01), inv_quantity_on_hand, 0) AS $f2, CASE(>=(d_date, 1998-02-01), inv_quantity_on_hand, 0) AS $f3])
                     +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, w_warehouse_name, i_item_id, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[inv_date_sk, inv_quantity_on_hand, w_warehouse_name, i_item_id])
                        :  +- HashJoin(where=[=(i_item_sk, inv_item_sk)], join=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_name, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- Calc(select=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_name])
                        :     :  +- HashJoin(where=[=(inv_warehouse_sk, w_warehouse_sk)], join=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                        :     :     +- Exchange(distribution=[broadcast])
                        :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- Calc(select=[i_item_sk, i_item_id], where=[AND(>=(i_current_price, 0.99), <=(i_current_price, 1.49))])
                        :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_current_price];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_current_price])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk, d_date], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-03-03))])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q22, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 22 in stream 0 using template query22.tpl
select  i_product_name
             ,i_brand
             ,i_class
             ,i_category
             ,avg(inv_quantity_on_hand) qoh
       from inventory
           ,date_dim
           ,item
       where inv_date_sk=d_date_sk
              and inv_item_sk=i_item_sk
              and d_month_seq between 1176 and 1176 + 11
       group by rollup(i_product_name
                       ,i_brand
                       ,i_class
                       ,i_category)
order by qoh, i_product_name, i_brand, i_class, i_category
limit 100

-- end query 22 in stream 0 using template query22.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$4], sort1=[$0], sort2=[$1], sort3=[$2], sort4=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], qoh=[AVG($4)])
   +- LogicalProject(i_product_name=[$53], i_brand=[$40], i_class=[$42], i_category=[$44], inv_quantity_on_hand=[$3])
      +- LogicalFilter(condition=[AND(=($0, $4), =($1, $32), >=($7, 1176), <=($7, +(1176, 11)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_product_name, i_brand, i_class, i_category, qoh])
+- SortLimit(orderBy=[qoh ASC, i_product_name ASC, i_brand ASC, i_class ASC, i_category ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[qoh ASC, i_product_name ASC, i_brand ASC, i_class ASC, i_category ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[i_product_name, i_brand, i_class, i_category, $e], select=[i_product_name, i_brand, i_class, i_category, $e, Final_AVG(sum$0, count$1) AS qoh])
            +- Exchange(distribution=[hash[i_product_name, i_brand, i_class, i_category, $e]])
               +- LocalHashAggregate(groupBy=[i_product_name, i_brand, i_class, i_category, $e], select=[i_product_name, i_brand, i_class, i_category, $e, Partial_AVG(inv_quantity_on_hand) AS (sum$0, count$1)])
                  +- Expand(projects=[{i_product_name, i_brand, i_class, i_category, inv_quantity_on_hand, 0 AS $e}, {i_product_name, i_brand, i_class, null AS i_category, inv_quantity_on_hand, 1 AS $e}, {i_product_name, i_brand, null AS i_class, null AS i_category, inv_quantity_on_hand, 3 AS $e}, {i_product_name, null AS i_brand, null AS i_class, null AS i_category, inv_quantity_on_hand, 7 AS $e}, {null AS i_product_name, null AS i_brand, null AS i_class, null AS i_category, inv_quantity_on_hand, 15 AS $e}])
                     +- Calc(select=[i_product_name, i_brand, i_class, i_category, inv_quantity_on_hand])
                        +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, i_brand, i_class, i_category, i_product_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[inv_date_sk, inv_quantity_on_hand, i_brand, i_class, i_category, i_product_name])
                           :  +- HashJoin(where=[=(inv_item_sk, i_item_sk)], join=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, i_item_sk, i_brand, i_class, i_category, i_product_name], joinType=[InnerJoin], build=[right])
                           :     :- Exchange(distribution=[hash[inv_item_sk]])
                           :     :  +- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])
                           :     +- Exchange(distribution=[hash[i_item_sk]])
                           :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_class, i_category, i_product_name];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_class, i_category, i_product_name])
                           +- Exchange(distribution=[broadcast])
                              +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                                 +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q23a, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 23 in stream 0 using template query23.tpl
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1998,1998+1,1998+2,1998+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1998,1998+1,1998+2,1998+3) 
        group by c_customer_sk)),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from (select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1998 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
      union all
      select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1998 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)) 
 limit 100

-- end query 23 in stream 0 using template query23.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
   +- LogicalUnion(all=[true])
      :- LogicalProject(sales=[*($18, $20)])
      :  +- LogicalFilter(condition=[AND(=($40, 1998), =($42, 1), =($0, $34), IN($15, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL), =($29, CAST(+(1998, 3)):BIGINT NOT NULL)))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), IN($3, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL), =($47, CAST(+(1998, 2)):BIGINT NOT NULL), =($47, CAST(+(1998, 3)):BIGINT NOT NULL)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
}))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalProject(sales=[*($18, $20)])
         +- LogicalFilter(condition=[AND(=($40, 1998), =($42, 1), =($0, $34), IN($3, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL), =($29, CAST(+(1998, 3)):BIGINT NOT NULL)))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), IN($4, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL), =($47, CAST(+(1998, 2)):BIGINT NOT NULL), =($47, CAST(+(1998, 3)):BIGINT NOT NULL)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
}))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Limit(offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_SUM(sales) AS sum$0])
               +- Union(all=[true], union=[sales])
                  :- Calc(select=[*(cs_quantity, cs_list_price) AS sales])
                  :  +- HashSemiJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_bill_customer_sk, cs_quantity, cs_list_price], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                  :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                  :     :  +- Calc(select=[cs_bill_customer_sk, cs_quantity, cs_list_price])
                  :     :     +- HashSemiJoin(where=[=(cs_item_sk, item_sk)], join=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                  :     :        :- Exchange(distribution=[hash[cs_item_sk]])
                  :     :        :  +- Calc(select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
                  :     :        :     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :     :        :        :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
                  :     :        :        +- Exchange(distribution=[broadcast], reuse_id=[1])
                  :     :        :           +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
                  :     :        :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                  :     :        +- Exchange(distribution=[hash[item_sk]], reuse_id=[2])
                  :     :           +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk])
                  :     :              +- Calc(select=[item_sk], where=[>(cnt, 4)])
                  :     :                 +- HashAggregate(isMerge=[true], groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Final_COUNT(count$0) AS cnt])
                  :     :                    +- Exchange(distribution=[hash[itemdesc, item_sk, solddate]])
                  :     :                       +- LocalHashAggregate(groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Partial_COUNT(*) AS count$0])
                  :     :                          +- Calc(select=[SUBSTR(i_item_desc, 1, 30) AS itemdesc, i_item_sk AS item_sk, d_date AS solddate])
                  :     :                             +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, i_item_sk, i_item_desc, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :     :                                :- Calc(select=[ss_sold_date_sk, i_item_sk, i_item_desc])
                  :     :                                :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, i_item_sk, i_item_desc], joinType=[InnerJoin], build=[right])
                  :     :                                :     :- Exchange(distribution=[hash[ss_item_sk]])
                  :     :                                :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk])
                  :     :                                :     +- Exchange(distribution=[hash[i_item_sk]])
                  :     :                                :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_desc])
                  :     :                                +- Exchange(distribution=[broadcast])
                  :     :                                   +- Calc(select=[d_date_sk, d_date], where=[IN(d_year, 1998, 1999, 2000, 2001)])
                  :     :                                      +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_year])
                  :     +- LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk], reuse_id=[3])
                  :        +- Calc(select=[c_customer_sk])
                  :           +- NestedLoopJoin(where=[>(ssales, *(0.950000, $f0))], join=[c_customer_sk, ssales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                  :              :- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS ssales])
                  :              :  +- Calc(select=[c_customer_sk, *(ss_quantity, ss_sales_price) AS $f1])
                  :              :     +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
                  :              :        :- Exchange(distribution=[hash[ss_customer_sk]])
                  :              :        :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_customer_sk, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_customer_sk, ss_quantity, ss_sales_price])
                  :              :        +- Exchange(distribution=[hash[c_customer_sk]])
                  :              :           +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk];filterPredicates=[]]]], fields=[c_customer_sk])
                  :              +- Exchange(distribution=[broadcast])
                  :                 +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(tpcds_cmax) AS $f0])
                  :                    +- SortAggregate(isMerge=[true], select=[Final_MAX(max$0) AS tpcds_cmax])
                  :                       +- Exchange(distribution=[single])
                  :                          +- LocalSortAggregate(select=[Partial_MAX(csales) AS max$0])
                  :                             +- Calc(select=[csales])
                  :                                +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS csales])
                  :                                   +- Calc(select=[c_customer_sk, *(ss_quantity, ss_sales_price) AS $f1])
                  :                                      +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_sales_price, c_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :                                         :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_sales_price, c_customer_sk])
                  :                                         :  +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
                  :                                         :     :- Exchange(distribution=[hash[ss_customer_sk]])
                  :                                         :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])
                  :                                         :     +- Exchange(distribution=[hash[c_customer_sk]])
                  :                                         :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk];filterPredicates=[]]]], fields=[c_customer_sk])
                  :                                         +- Exchange(distribution=[broadcast])
                  :                                            +- Calc(select=[d_date_sk], where=[IN(d_year, 1998, 1999, 2000, 2001)])
                  :                                               +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                  +- Calc(select=[*(ws_quantity, ws_list_price) AS sales])
                     +- HashSemiJoin(where=[=(ws_bill_customer_sk, c_customer_sk)], join=[ws_bill_customer_sk, ws_quantity, ws_list_price], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                        :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :  +- Calc(select=[ws_bill_customer_sk, ws_quantity, ws_list_price])
                        :     +- HashSemiJoin(where=[=(ws_item_sk, item_sk)], join=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                        :        :- Exchange(distribution=[hash[ws_item_sk]])
                        :        :  +- Calc(select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                        :        :     +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :        :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                        :        :        +- Reused(reference_id=[1])
                        :        +- Reused(reference_id=[2])
                        +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q23b, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 23 in stream 0 using template query23.tpl
with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (1998,1998 + 1,1998 + 2,1998 + 3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1998,1998+1,1998+2,1998+3)
        group by c_customer_sk)),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
 from max_store_sales))
  select  c_last_name,c_first_name,sales
 from (select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales
        from catalog_sales
            ,customer
            ,date_dim 
        where d_year = 1998 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and cs_bill_customer_sk = c_customer_sk 
       group by c_last_name,c_first_name
      union all
      select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales
       from web_sales
           ,customer
           ,date_dim 
       where d_year = 1998 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and ws_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name) 
     order by c_last_name,c_first_name,sales
  limit 100

-- end query 23 in stream 0 using template query23.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$0], c_first_name=[$1], sales=[$2])
   +- LogicalUnion(all=[true])
      :- LogicalAggregate(group=[{0, 1}], sales=[SUM($2)])
      :  +- LogicalProject(c_last_name=[$43], c_first_name=[$42], $f2=[*($18, $20)])
      :     +- LogicalFilter(condition=[AND(=($58, 1998), =($60, 1), =($0, $52), IN($15, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL), =($29, CAST(+(1998, 3)):BIGINT NOT NULL)))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), IN($3, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL), =($47, CAST(+(1998, 2)):BIGINT NOT NULL), =($47, CAST(+(1998, 3)):BIGINT NOT NULL)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
}), =($3, $34))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :           :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
      :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalAggregate(group=[{0, 1}], sales=[SUM($2)])
         +- LogicalProject(c_last_name=[$43], c_first_name=[$42], $f2=[*($18, $20)])
            +- LogicalFilter(condition=[AND(=($58, 1998), =($60, 1), =($0, $52), IN($3, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL), =($29, CAST(+(1998, 3)):BIGINT NOT NULL)))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), IN($4, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL), =($47, CAST(+(1998, 2)):BIGINT NOT NULL), =($47, CAST(+(1998, 3)):BIGINT NOT NULL)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
}), =($4, $34))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, sales ASC], offset=[0], limit=[100], global=[false])
      +- Union(all=[true], union=[c_last_name, c_first_name, sales])
         :- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, Final_SUM(sum$0) AS sales])
         :  +- Exchange(distribution=[hash[c_last_name, c_first_name]])
         :     +- LocalHashAggregate(groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, Partial_SUM($f2) AS sum$0])
         :        +- Calc(select=[c_last_name, c_first_name, *(cs_quantity, cs_list_price) AS $f2])
         :           +- HashSemiJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_bill_customer_sk, cs_quantity, cs_list_price, c_first_name, c_last_name], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
         :              :- Exchange(distribution=[hash[cs_bill_customer_sk]])
         :              :  +- Calc(select=[cs_bill_customer_sk, cs_quantity, cs_list_price, c_first_name, c_last_name])
         :              :     +- HashSemiJoin(where=[=(cs_item_sk, item_sk)], join=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, c_first_name, c_last_name], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
         :              :        :- Exchange(distribution=[hash[cs_item_sk]])
         :              :        :  +- Calc(select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, c_first_name, c_last_name])
         :              :        :     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
         :              :        :        :- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, c_first_name, c_last_name])
         :              :        :        :  +- HashJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
         :              :        :        :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
         :              :        :        :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
         :              :        :        :     +- Exchange(distribution=[hash[c_customer_sk]])
         :              :        :        :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
         :              :        :        +- Exchange(distribution=[broadcast], reuse_id=[1])
         :              :        :           +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
         :              :        :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
         :              :        +- Exchange(distribution=[hash[item_sk]], reuse_id=[2])
         :              :           +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk])
         :              :              +- Calc(select=[item_sk], where=[>(cnt, 4)])
         :              :                 +- HashAggregate(isMerge=[true], groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Final_COUNT(count$0) AS cnt])
         :              :                    +- Exchange(distribution=[hash[itemdesc, item_sk, solddate]])
         :              :                       +- LocalHashAggregate(groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Partial_COUNT(*) AS count$0])
         :              :                          +- Calc(select=[SUBSTR(i_item_desc, 1, 30) AS itemdesc, i_item_sk AS item_sk, d_date AS solddate])
         :              :                             +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, i_item_sk, i_item_desc, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
         :              :                                :- Calc(select=[ss_sold_date_sk, i_item_sk, i_item_desc])
         :              :                                :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, i_item_sk, i_item_desc], joinType=[InnerJoin], build=[right])
         :              :                                :     :- Exchange(distribution=[hash[ss_item_sk]])
         :              :                                :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk])
         :              :                                :     +- Exchange(distribution=[hash[i_item_sk]])
         :              :                                :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_desc])
         :              :                                +- Exchange(distribution=[broadcast])
         :              :                                   +- Calc(select=[d_date_sk, d_date], where=[IN(d_year, 1998, 1999, 2000, 2001)])
         :              :                                      +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_year])
         :              +- LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk], reuse_id=[3])
         :                 +- Calc(select=[c_customer_sk])
         :                    +- NestedLoopJoin(where=[>(ssales, *(0.950000, $f0))], join=[c_customer_sk, ssales, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
         :                       :- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS ssales])
         :                       :  +- Calc(select=[c_customer_sk, *(ss_quantity, ss_sales_price) AS $f1])
         :                       :     +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
         :                       :        :- Exchange(distribution=[hash[ss_customer_sk]])
         :                       :        :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_customer_sk, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_customer_sk, ss_quantity, ss_sales_price])
         :                       :        +- Exchange(distribution=[hash[c_customer_sk]])
         :                       :           +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk];filterPredicates=[]]]], fields=[c_customer_sk])
         :                       +- Exchange(distribution=[broadcast])
         :                          +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(tpcds_cmax) AS $f0])
         :                             +- SortAggregate(isMerge=[true], select=[Final_MAX(max$0) AS tpcds_cmax])
         :                                +- Exchange(distribution=[single])
         :                                   +- LocalSortAggregate(select=[Partial_MAX(csales) AS max$0])
         :                                      +- Calc(select=[csales])
         :                                         +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS csales])
         :                                            +- Calc(select=[c_customer_sk, *(ss_quantity, ss_sales_price) AS $f1])
         :                                               +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_sales_price, c_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
         :                                                  :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_sales_price, c_customer_sk])
         :                                                  :  +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
         :                                                  :     :- Exchange(distribution=[hash[ss_customer_sk]])
         :                                                  :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])
         :                                                  :     +- Exchange(distribution=[hash[c_customer_sk]])
         :                                                  :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk];filterPredicates=[]]]], fields=[c_customer_sk])
         :                                                  +- Exchange(distribution=[broadcast])
         :                                                     +- Calc(select=[d_date_sk], where=[IN(d_year, 1998, 1999, 2000, 2001)])
         :                                                        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
         +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, Final_SUM(sum$0) AS sales])
            +- Exchange(distribution=[hash[c_last_name, c_first_name]])
               +- LocalHashAggregate(groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, Partial_SUM($f2) AS sum$0])
                  +- Calc(select=[c_last_name, c_first_name, *(ws_quantity, ws_list_price) AS $f2])
                     +- HashSemiJoin(where=[=(ws_bill_customer_sk, c_customer_sk)], join=[ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                        :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :  +- Calc(select=[ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name])
                        :     +- HashSemiJoin(where=[=(ws_item_sk, item_sk)], join=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name], joinType=[LeftSemiJoin], build=[right], tryDistinctBuildRow=[true])
                        :        :- Exchange(distribution=[hash[ws_item_sk]])
                        :        :  +- Calc(select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name])
                        :        :     +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :        :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, c_first_name, c_last_name])
                        :        :        :  +- HashJoin(where=[=(ws_bill_customer_sk, c_customer_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                        :        :        :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :        :        :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                        :        :        :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :        :        :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
                        :        :        +- Reused(reference_id=[1])
                        :        +- Reused(reference_id=[2])
                        +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q24a, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 24 in stream 0 using template query24.tpl
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_net_paid) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=5
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'yellow'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)

-- end query 24 in stream 0 using template query24.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.05, $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(netpaid=[$10])
      LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
        LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_net_paid=[$20])
          LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($108, UPPER($122)), =($68, $121), =($53, 5))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalJoin(condition=[true], joinType=[inner])
                      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                      LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
}))])
+- LogicalAggregate(group=[{0, 1, 2}], paid=[SUM($3)])
   +- LogicalProject(c_last_name=[$0], c_first_name=[$1], s_store_name=[$2], netpaid=[$10])
      +- LogicalFilter(condition=[=($5, 'yellow')])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
            +- LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_net_paid=[$20])
               +- LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($108, UPPER($122)), =($68, $121), =($53, 5))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                     :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, s_store_name, paid])
+- NestedLoopJoin(where=[>(paid, $f0)], join=[c_last_name, c_first_name, s_store_name, paid, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name], select=[c_last_name, c_first_name, s_store_name, Final_SUM(sum$0) AS paid])
   :  +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name]])
   :     +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name], select=[c_last_name, c_first_name, s_store_name, Partial_SUM(netpaid) AS sum$0])
   :        +- Calc(select=[c_last_name, c_first_name, s_store_name, netpaid])
   :           +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Final_SUM(sum$0) AS netpaid])
   :              +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
   :                 +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Partial_SUM(ss_net_paid) AS sum$0])
   :                    +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, CAST('yellow') AS i_color, i_current_price, i_manager_id, i_units, i_size, ss_net_paid])
   :                       +- HashJoin(where=[=(sr_item_sk, i_item_sk)], join=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_units, i_manager_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                          :- Calc(select=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state], reuse_id=[1])
   :                          :  +- HashJoin(where=[AND(=(ss_ticket_number, sr_ticket_number), =(ss_item_sk, sr_item_sk))], join=[sr_item_sk, sr_ticket_number, ss_item_sk, ss_ticket_number, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state], joinType=[InnerJoin], build=[left])
   :                          :     :- Exchange(distribution=[hash[sr_item_sk]])
   :                          :     :  +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number])
   :                          :     +- Exchange(distribution=[hash[ss_item_sk]])
   :                          :        +- Calc(select=[ss_item_sk, ss_ticket_number, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state])
   :                          :           +- HashJoin(where=[AND(=(ss_customer_sk, c_customer_sk), =(ss_store_sk, s_store_sk))], join=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid, c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state], joinType=[InnerJoin], build=[right])
   :                          :              :- Exchange(distribution=[hash[ss_customer_sk, ss_store_sk]])
   :                          :              :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid];filterPredicates=[]]]], fields=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid])
   :                          :              +- Exchange(distribution=[hash[c_customer_sk, s_store_sk]])
   :                          :                 +- Calc(select=[c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state])
   :                          :                    +- HashJoin(where=[=(c_birth_country, $f13)], join=[c_customer_sk, c_first_name, c_last_name, c_birth_country, ca_state, $f13, s_store_sk, s_store_name, s_state], joinType=[InnerJoin], build=[right])
   :                          :                       :- Exchange(distribution=[hash[c_birth_country]])
   :                          :                       :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name, c_birth_country];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name, c_birth_country])
   :                          :                       +- Exchange(distribution=[hash[$f13]])
   :                          :                          +- Calc(select=[ca_state, $f13, s_store_sk, s_store_name, s_state])
   :                          :                             +- HashJoin(where=[=(s_zip, ca_zip)], join=[ca_state, ca_zip, $f13, s_store_sk, s_store_name, s_state, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                          :                                :- Calc(select=[ca_state, ca_zip, UPPER(ca_country) AS $f13])
   :                          :                                :  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_state, ca_zip, ca_country];filterPredicates=[]]]], fields=[ca_state, ca_zip, ca_country])
   :                          :                                +- Exchange(distribution=[broadcast])
   :                          :                                   +- Calc(select=[s_store_sk, s_store_name, s_state, s_zip], where=[=(s_market_id, 5)])
   :                          :                                      +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_market_id, s_state, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_market_id, s_state, s_zip])
   :                          +- Exchange(distribution=[broadcast])
   :                             +- Calc(select=[i_item_sk, i_current_price, i_size, i_units, i_manager_id], where=[=(i_color, 'yellow')])
   :                                +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
   +- Exchange(distribution=[broadcast])
      +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(EXPR$0) AS $f0])
         +- Calc(select=[*(0.05, $f0) AS EXPR$0])
            +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS $f0])
               +- Exchange(distribution=[single])
                  +- LocalSortAggregate(select=[Partial_AVG(netpaid) AS (sum$0, count$1)])
                     +- Calc(select=[netpaid])
                        +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Final_SUM(sum$0) AS netpaid])
                           +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
                              +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Partial_SUM(ss_net_paid) AS sum$0])
                                 +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, ss_net_paid])
                                    +- HashJoin(where=[=(sr_item_sk, i_item_sk)], join=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id], joinType=[InnerJoin], build=[right])
                                       :- Reused(reference_id=[1])
                                       +- Exchange(distribution=[hash[i_item_sk]])
                                          +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q24b, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 24 in stream 0 using template query24.tpl

with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_net_paid) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
  and s_market_id = 5
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'almond'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                           from ssales)


-- end query 24 in stream 0 using template query24.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.05, $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(netpaid=[$10])
      LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
        LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_net_paid=[$20])
          LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($108, UPPER($122)), =($68, $121), =($53, 5))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalJoin(condition=[true], joinType=[inner])
                      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                      LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                    LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
}))])
+- LogicalAggregate(group=[{0, 1, 2}], paid=[SUM($3)])
   +- LogicalProject(c_last_name=[$0], c_first_name=[$1], s_store_name=[$2], netpaid=[$10])
      +- LogicalFilter(condition=[=($5, 'almond')])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
            +- LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_net_paid=[$20])
               +- LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($108, UPPER($122)), =($68, $121), =($53, 5))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                     :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, s_store_name, paid])
+- NestedLoopJoin(where=[>(paid, $f0)], join=[c_last_name, c_first_name, s_store_name, paid, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name], select=[c_last_name, c_first_name, s_store_name, Final_SUM(sum$0) AS paid])
   :  +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name]])
   :     +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name], select=[c_last_name, c_first_name, s_store_name, Partial_SUM(netpaid) AS sum$0])
   :        +- Calc(select=[c_last_name, c_first_name, s_store_name, netpaid])
   :           +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Final_SUM(sum$0) AS netpaid])
   :              +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
   :                 +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Partial_SUM(ss_net_paid) AS sum$0])
   :                    +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, CAST('almond') AS i_color, i_current_price, i_manager_id, i_units, i_size, ss_net_paid])
   :                       +- HashJoin(where=[=(sr_item_sk, i_item_sk)], join=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_units, i_manager_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                          :- Calc(select=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state], reuse_id=[1])
   :                          :  +- HashJoin(where=[AND(=(ss_ticket_number, sr_ticket_number), =(ss_item_sk, sr_item_sk))], join=[sr_item_sk, sr_ticket_number, ss_item_sk, ss_ticket_number, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state], joinType=[InnerJoin], build=[left])
   :                          :     :- Exchange(distribution=[hash[sr_item_sk]])
   :                          :     :  +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number])
   :                          :     +- Exchange(distribution=[hash[ss_item_sk]])
   :                          :        +- Calc(select=[ss_item_sk, ss_ticket_number, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state])
   :                          :           +- HashJoin(where=[AND(=(ss_customer_sk, c_customer_sk), =(ss_store_sk, s_store_sk))], join=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid, c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state], joinType=[InnerJoin], build=[right])
   :                          :              :- Exchange(distribution=[hash[ss_customer_sk, ss_store_sk]])
   :                          :              :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid];filterPredicates=[]]]], fields=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_paid])
   :                          :              +- Exchange(distribution=[hash[c_customer_sk, s_store_sk]])
   :                          :                 +- Calc(select=[c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state])
   :                          :                    +- HashJoin(where=[=(c_birth_country, $f13)], join=[c_customer_sk, c_first_name, c_last_name, c_birth_country, ca_state, $f13, s_store_sk, s_store_name, s_state], joinType=[InnerJoin], build=[right])
   :                          :                       :- Exchange(distribution=[hash[c_birth_country]])
   :                          :                       :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name, c_birth_country];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name, c_birth_country])
   :                          :                       +- Exchange(distribution=[hash[$f13]])
   :                          :                          +- Calc(select=[ca_state, $f13, s_store_sk, s_store_name, s_state])
   :                          :                             +- HashJoin(where=[=(s_zip, ca_zip)], join=[ca_state, ca_zip, $f13, s_store_sk, s_store_name, s_state, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                          :                                :- Calc(select=[ca_state, ca_zip, UPPER(ca_country) AS $f13])
   :                          :                                :  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_state, ca_zip, ca_country];filterPredicates=[]]]], fields=[ca_state, ca_zip, ca_country])
   :                          :                                +- Exchange(distribution=[broadcast])
   :                          :                                   +- Calc(select=[s_store_sk, s_store_name, s_state, s_zip], where=[=(s_market_id, 5)])
   :                          :                                      +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_market_id, s_state, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_market_id, s_state, s_zip])
   :                          +- Exchange(distribution=[broadcast])
   :                             +- Calc(select=[i_item_sk, i_current_price, i_size, i_units, i_manager_id], where=[=(i_color, 'almond')])
   :                                +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
   +- Exchange(distribution=[broadcast])
      +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(EXPR$0) AS $f0])
         +- Calc(select=[*(0.05, $f0) AS EXPR$0])
            +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS $f0])
               +- Exchange(distribution=[single])
                  +- LocalSortAggregate(select=[Partial_AVG(netpaid) AS (sum$0, count$1)])
                     +- Calc(select=[netpaid])
                        +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Final_SUM(sum$0) AS netpaid])
                           +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
                              +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Partial_SUM(ss_net_paid) AS sum$0])
                                 +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, ss_net_paid])
                                    +- HashJoin(where=[=(sr_item_sk, i_item_sk)], join=[sr_item_sk, ss_net_paid, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id], joinType=[InnerJoin], build=[right])
                                       :- Reused(reference_id=[1])
                                       +- Exchange(distribution=[hash[i_item_sk]])
                                          +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q25, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 25 in stream 0 using template query25.tpl
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 1998
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 1998
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 1998
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100

-- end query 25 in stream 0 using template query25.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], store_sales_profit=[SUM($4)], store_returns_loss=[SUM($5)], catalog_sales_profit=[SUM($6)])
   +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_store_id=[$162], s_store_name=[$166], ss_net_profit=[$22], sr_net_loss=[$42], cs_net_profit=[$76])
      +- LogicalFilter(condition=[AND(=($85, 4), =($83, 1998), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), >=($113, 4), <=($113, 10), =($111, 1998), =($26, $46), =($25, $58), =($43, $133), >=($141, 4), <=($141, 10), =($139, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
            :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, Final_SUM(sum$0) AS store_sales_profit, Final_SUM(sum$1) AS store_returns_loss, Final_SUM(sum$2) AS catalog_sales_profit])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_store_id, s_store_name]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, Partial_SUM(ss_net_profit) AS sum$0, Partial_SUM(sr_net_loss) AS sum$1, Partial_SUM(cs_net_profit) AS sum$2])
               +- Calc(select=[i_item_id, i_item_desc, s_store_id, s_store_name, ss_net_profit, sr_net_loss, cs_net_profit])
                  +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc, s_store_sk, s_store_id, s_store_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc])
                     :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[cs_sold_date_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc])
                     :     :  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[cs_sold_date_sk, cs_net_profit, ss_sold_date_sk, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- Calc(select=[cs_sold_date_sk, cs_net_profit, ss_sold_date_sk, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc])
                     :     :     :  +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_net_profit, ss_sold_date_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_net_loss, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :     :- Calc(select=[cs_sold_date_sk, cs_net_profit, ss_sold_date_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_net_loss, i_item_id, i_item_desc])
                     :     :     :     :  +- HashJoin(where=[AND(=(cs_bill_customer_sk, sr_customer_sk), =(cs_item_sk, ss_item_sk))], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit, ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_customer_sk, sr_net_loss, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                     :     :     :     :     :- Exchange(distribution=[hash[cs_bill_customer_sk, cs_item_sk]])
                     :     :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit])
                     :     :     :     :     +- Exchange(distribution=[hash[sr_customer_sk, ss_item_sk]])
                     :     :     :     :        +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_customer_sk, sr_net_loss, i_item_id, i_item_desc])
                     :     :     :     :           +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_customer_sk, sr_net_loss, i_item_sk, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                     :     :     :     :              :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_returned_date_sk, sr_customer_sk, sr_net_loss])
                     :     :     :     :              :  +- HashJoin(where=[AND(=(ss_customer_sk, sr_customer_sk), =(ss_item_sk, sr_item_sk), =(ss_ticket_number, sr_ticket_number))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit, sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss], joinType=[InnerJoin], build=[right])
                     :     :     :     :              :     :- Exchange(distribution=[hash[ss_item_sk]])
                     :     :     :     :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit])
                     :     :     :     :              :     +- Exchange(distribution=[hash[sr_item_sk]])
                     :     :     :     :              :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss])
                     :     :     :     :              +- Exchange(distribution=[hash[i_item_sk]])
                     :     :     :     :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc])
                     :     :     :     +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :     :     :        +- Calc(select=[d_date_sk], where=[AND(>=(d_moy, 4), <=(d_moy, 10), =(d_year, 1998))])
                     :     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 4), =(d_year, 1998))])
                     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :     +- Reused(reference_id=[1])
                     +- Exchange(distribution=[broadcast])
                        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_id, s_store_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q26, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 26 in stream 0 using template query26.tpl
select  i_item_id, 
        avg(cs_quantity) agg1,
        avg(cs_list_price) agg2,
        avg(cs_coupon_amt) agg3,
        avg(cs_sales_price) agg4 
 from catalog_sales, customer_demographics, date_dim, item, promotion
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd_demo_sk and
       cs_promo_sk = p_promo_sk and
       cd_gender = 'M' and 
       cd_marital_status = 'M' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100

-- end query 26 in stream 0 using template query26.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], agg1=[AVG($1)], agg2=[AVG($2)], agg3=[AVG($3)], agg4=[AVG($4)])
   +- LogicalProject(i_item_id=[$72], cs_quantity=[$18], cs_list_price=[$20], cs_coupon_amt=[$27], cs_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($0, $43), =($15, $71), =($4, $34), =($16, $93), =($35, 'M'), =($36, 'M'), =($37, 'Primary'), OR(=($102, 'N'), =($107, 'N')), =($49, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
         +- Exchange(distribution=[hash[i_item_id]])
            +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_AVG(cs_quantity) AS (sum$0, count$1), Partial_AVG(cs_list_price) AS (sum$2, count$3), Partial_AVG(cs_coupon_amt) AS (sum$4, count$5), Partial_AVG(cs_sales_price) AS (sum$6, count$7)])
               +- Calc(select=[i_item_id, cs_quantity, cs_list_price, cs_coupon_amt, cs_sales_price])
                  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_sold_date_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, i_item_id])
                     :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                     :     :- Exchange(distribution=[hash[cs_item_sk]])
                     :     :  +- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])
                     :     :     +- HashJoin(where=[=(cs_promo_sk, p_promo_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, p_promo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :        :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])
                     :     :        :  +- HashJoin(where=[=(cs_bill_cdemo_sk, cd_demo_sk)], join=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :        :     :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])
                     :     :        :     +- Exchange(distribution=[broadcast])
                     :     :        :        +- Calc(select=[cd_demo_sk], where=[AND(=(cd_gender, 'M'), =(cd_marital_status, 'M'), =(cd_education_status, 'Primary'))])
                     :     :        :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                     :     :        +- Exchange(distribution=[broadcast])
                     :     :           +- Calc(select=[p_promo_sk], where=[OR(=(p_channel_email, 'N'), =(p_channel_event, 'N'))])
                     :     :              +- TableSourceScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_channel_email, p_channel_event];filterPredicates=[]]]], fields=[p_promo_sk, p_channel_email, p_channel_event])
                     :     +- Exchange(distribution=[hash[i_item_sk]])
                     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q27, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 27 in stream 0 using template query27.tpl
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'M' and
       cd_education_status = 'Primary' and
       d_year = 1998 and
       s_state in ('TN','SD', 'AL', 'SC', 'OH', 'LA')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100

-- end query 27 in stream 0 using template query27.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], g_state=[GROUPING($1)], agg1=[AVG($2)], agg2=[AVG($3)], agg3=[AVG($4)], agg4=[AVG($5)])
   +- LogicalProject(i_item_id=[$90], s_state=[$84], ss_quantity=[$10], ss_list_price=[$12], ss_coupon_amt=[$19], ss_sales_price=[$13])
      +- LogicalFilter(condition=[AND(=($0, $32), =($2, $89), =($7, $60), =($4, $23), =($24, 'M'), =($25, 'M'), =($26, 'Primary'), =($38, 1998), OR(=($84, 'TN'), =($84, 'SD'), =($84, 'AL'), =($84, 'SC'), =($84, 'OH'), =($84, 'LA')))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(i_item_id) AS i_item_id, s_state, CASE(=($e, 0), 0, =($e, 1), 1, 1) AS g_state, agg1, agg2, agg3, agg4])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
            +- Exchange(distribution=[hash[i_item_id, s_state, $e]])
               +- LocalHashAggregate(groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_list_price) AS (sum$2, count$3), Partial_AVG(ss_coupon_amt) AS (sum$4, count$5), Partial_AVG(ss_sales_price) AS (sum$6, count$7)])
                  +- Expand(projects=[{i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 0 AS $e}, {i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 1 AS $e}, {null AS i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 3 AS $e}])
                     +- Calc(select=[i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price])
                        +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id, s_store_sk, s_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id])
                           :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id])
                           :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                           :     :     :- Exchange(distribution=[hash[ss_item_sk]])
                           :     :     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                           :     :     :     +- HashJoin(where=[=(ss_cdemo_sk, cd_demo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, cd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :     :        :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                           :     :     :        +- Exchange(distribution=[broadcast])
                           :     :     :           +- Calc(select=[cd_demo_sk], where=[AND(=(cd_gender, 'M'), =(cd_marital_status, 'M'), =(cd_education_status, 'Primary'))])
                           :     :     :              +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                           :     :     +- Exchange(distribution=[hash[i_item_sk]])
                           :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                           :     +- Exchange(distribution=[broadcast])
                           :        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                           :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                           +- Exchange(distribution=[broadcast])
                              +- Calc(select=[s_store_sk, s_state], where=[IN(s_state, 'TN', 'SD', 'AL', 'SC', 'OH', 'LA')])
                                 +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q28, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 28 in stream 0 using template query28.tpl
select  *
from (select avg(ss_list_price) B1_LP
            ,count(ss_list_price) B1_CNT
            ,count(distinct ss_list_price) B1_CNTD
      from store_sales
      where ss_quantity between 0 and 5
        and (ss_list_price between 0 and 0+10 
             or ss_coupon_amt between 0 and 0+1000
             or ss_wholesale_cost between 0 and 0+20)) B1,
     (select avg(ss_list_price) B2_LP
            ,count(ss_list_price) B2_CNT
            ,count(distinct ss_list_price) B2_CNTD
      from store_sales
      where ss_quantity between 6 and 10
        and (ss_list_price between 1 and 1+10
          or ss_coupon_amt between 1 and 1+1000
          or ss_wholesale_cost between 1 and 1+20)) B2,
     (select avg(ss_list_price) B3_LP
            ,count(ss_list_price) B3_CNT
            ,count(distinct ss_list_price) B3_CNTD
      from store_sales
      where ss_quantity between 11 and 15
        and (ss_list_price between 2 and 2+10
          or ss_coupon_amt between 2 and 2+1000
          or ss_wholesale_cost between 2 and 2+20)) B3,
     (select avg(ss_list_price) B4_LP
            ,count(ss_list_price) B4_CNT
            ,count(distinct ss_list_price) B4_CNTD
      from store_sales
      where ss_quantity between 16 and 20
        and (ss_list_price between 3 and 3+10
          or ss_coupon_amt between 3 and 3+1000
          or ss_wholesale_cost between 3 and 3+20)) B4,
     (select avg(ss_list_price) B5_LP
            ,count(ss_list_price) B5_CNT
            ,count(distinct ss_list_price) B5_CNTD
      from store_sales
      where ss_quantity between 21 and 25
        and (ss_list_price between 4 and 4+10
          or ss_coupon_amt between 4 and 4+1000
          or ss_wholesale_cost between 4 and 4+20)) B5,
     (select avg(ss_list_price) B6_LP
            ,count(ss_list_price) B6_CNT
            ,count(distinct ss_list_price) B6_CNTD
      from store_sales
      where ss_quantity between 26 and 30
        and (ss_list_price between 5 and 5+10
          or ss_coupon_amt between 5 and 5+1000
          or ss_wholesale_cost between 5 and 5+20)) B6
limit 100

-- end query 28 in stream 0 using template query28.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalProject(B1_LP=[$0], B1_CNT=[$1], B1_CNTD=[$2], B2_LP=[$3], B2_CNT=[$4], B2_CNTD=[$5], B3_LP=[$6], B3_CNT=[$7], B3_CNTD=[$8], B4_LP=[$9], B4_CNT=[$10], B4_CNTD=[$11], B5_LP=[$12], B5_CNT=[$13], B5_CNTD=[$14], B6_LP=[$15], B6_CNT=[$16], B6_CNTD=[$17])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :  :  :- LogicalAggregate(group=[{}], B1_LP=[AVG($0)], B1_CNT=[COUNT($0)], B1_CNTD=[COUNT(DISTINCT $0)])
      :  :  :  :  :  +- LogicalProject(ss_list_price=[$12])
      :  :  :  :  :     +- LogicalFilter(condition=[AND(>=($10, 0), <=($10, 5), OR(AND(>=($12, 0), <=($12, +(0, 10))), AND(>=($19, 0), <=($19, +(0, 1000))), AND(>=($11, 0), <=($11, +(0, 20)))))])
      :  :  :  :  :        +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :  :  :  +- LogicalAggregate(group=[{}], B2_LP=[AVG($0)], B2_CNT=[COUNT($0)], B2_CNTD=[COUNT(DISTINCT $0)])
      :  :  :  :     +- LogicalProject(ss_list_price=[$12])
      :  :  :  :        +- LogicalFilter(condition=[AND(>=($10, 6), <=($10, 10), OR(AND(>=($12, 1), <=($12, +(1, 10))), AND(>=($19, 1), <=($19, +(1, 1000))), AND(>=($11, 1), <=($11, +(1, 20)))))])
      :  :  :  :           +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :  :  +- LogicalAggregate(group=[{}], B3_LP=[AVG($0)], B3_CNT=[COUNT($0)], B3_CNTD=[COUNT(DISTINCT $0)])
      :  :  :     +- LogicalProject(ss_list_price=[$12])
      :  :  :        +- LogicalFilter(condition=[AND(>=($10, 11), <=($10, 15), OR(AND(>=($12, 2), <=($12, +(2, 10))), AND(>=($19, 2), <=($19, +(2, 1000))), AND(>=($11, 2), <=($11, +(2, 20)))))])
      :  :  :           +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :  +- LogicalAggregate(group=[{}], B4_LP=[AVG($0)], B4_CNT=[COUNT($0)], B4_CNTD=[COUNT(DISTINCT $0)])
      :  :     +- LogicalProject(ss_list_price=[$12])
      :  :        +- LogicalFilter(condition=[AND(>=($10, 16), <=($10, 20), OR(AND(>=($12, 3), <=($12, +(3, 10))), AND(>=($19, 3), <=($19, +(3, 1000))), AND(>=($11, 3), <=($11, +(3, 20)))))])
      :  :           +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  +- LogicalAggregate(group=[{}], B5_LP=[AVG($0)], B5_CNT=[COUNT($0)], B5_CNTD=[COUNT(DISTINCT $0)])
      :     +- LogicalProject(ss_list_price=[$12])
      :        +- LogicalFilter(condition=[AND(>=($10, 21), <=($10, 25), OR(AND(>=($12, 4), <=($12, +(4, 10))), AND(>=($19, 4), <=($19, +(4, 1000))), AND(>=($11, 4), <=($11, +(4, 20)))))])
      :           +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      +- LogicalAggregate(group=[{}], B6_LP=[AVG($0)], B6_CNT=[COUNT($0)], B6_CNTD=[COUNT(DISTINCT $0)])
         +- LogicalProject(ss_list_price=[$12])
            +- LogicalFilter(condition=[AND(>=($10, 26), <=($10, 30), OR(AND(>=($12, 5), <=($12, +(5, 10))), AND(>=($19, 5), <=($19, +(5, 1000))), AND(>=($11, 5), <=($11, +(5, 20)))))])
               +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[B1_LP, B1_CNT, B1_CNTD, B2_LP, B2_CNT, B2_CNTD, B3_LP, B3_CNT, B3_CNTD, B4_LP, B4_CNT, B4_CNTD, B5_LP, B5_CNT, B5_CNTD, B6_LP, B6_CNT, B6_CNTD])
+- Limit(offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- Limit(offset=[0], limit=[100], global=[false])
         +- NestedLoopJoin(where=[true], join=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD, B3_LP, B3_CNT, B3_CNTD, B2_LP, B2_CNT, B2_CNTD], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :- NestedLoopJoin(where=[true], join=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD, B3_LP, B3_CNT, B3_CNTD], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :  :- NestedLoopJoin(where=[true], join=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :  :  :- NestedLoopJoin(where=[true], join=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :  :  :  :- NestedLoopJoin(where=[true], join=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD], joinType=[InnerJoin], build=[left], singleRowJoin=[true])
            :  :  :  :  :- Exchange(distribution=[broadcast])
            :  :  :  :  :  +- Calc(select=[CAST(/(CAST($f0), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B1_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B1_CNT, B1_CNTD])
            :  :  :  :  :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B1_CNTD])
            :  :  :  :  :        +- Exchange(distribution=[single])
            :  :  :  :  :           +- LocalHashAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :  :  :  :  :              +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
            :  :  :  :  :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_SUM(sum$0) AS $f0, Final_COUNT(count$1) AS $f1])
            :  :  :  :  :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :  :  :  :  :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_SUM(ss_list_price_0) AS sum$0, Partial_COUNT(ss_list_price_0) AS count$1])
            :  :  :  :  :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :  :  :  :  :                             +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 0), <=(ss_quantity, 5), OR(AND(>=(ss_list_price, 0), <=(ss_list_price, 10)), AND(>=(ss_coupon_amt, 0), <=(ss_coupon_amt, 1000)), AND(>=(ss_wholesale_cost, 0), <=(ss_wholesale_cost, 20))))])
            :  :  :  :  :                                +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :  :  :  :  +- Calc(select=[CAST(/(CAST($f0), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B6_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B6_CNT, B6_CNTD])
            :  :  :  :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B6_CNTD])
            :  :  :  :        +- Exchange(distribution=[single])
            :  :  :  :           +- LocalHashAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :  :  :  :              +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
            :  :  :  :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_SUM(sum$0) AS $f0, Final_COUNT(count$1) AS $f1])
            :  :  :  :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :  :  :  :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_SUM(ss_list_price_0) AS sum$0, Partial_COUNT(ss_list_price_0) AS count$1])
            :  :  :  :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :  :  :  :                             +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 26), <=(ss_quantity, 30), OR(AND(>=(ss_list_price, 5), <=(ss_list_price, 15)), AND(>=(ss_coupon_amt, 5), <=(ss_coupon_amt, 1005)), AND(>=(ss_wholesale_cost, 5), <=(ss_wholesale_cost, 25))))])
            :  :  :  :                                +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :  :  :  +- Exchange(distribution=[broadcast])
            :  :  :     +- Calc(select=[CAST(/(CAST($f0), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B5_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B5_CNT, B5_CNTD])
            :  :  :        +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B5_CNTD])
            :  :  :           +- Exchange(distribution=[single])
            :  :  :              +- LocalHashAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :  :  :                 +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
            :  :  :                    +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_SUM(sum$0) AS $f0, Final_COUNT(count$1) AS $f1])
            :  :  :                       +- Exchange(distribution=[hash[ss_list_price, $e]])
            :  :  :                          +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_SUM(ss_list_price_0) AS sum$0, Partial_COUNT(ss_list_price_0) AS count$1])
            :  :  :                             +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :  :  :                                +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 21), <=(ss_quantity, 25), OR(AND(>=(ss_list_price, 4), <=(ss_list_price, 14)), AND(>=(ss_coupon_amt, 4), <=(ss_coupon_amt, 1004)), AND(>=(ss_wholesale_cost, 4), <=(ss_wholesale_cost, 24))))])
            :  :  :                                   +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :  :  +- Exchange(distribution=[broadcast])
            :  :     +- Calc(select=[CAST(/(CAST($f0), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B4_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B4_CNT, B4_CNTD])
            :  :        +- SortAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B4_CNTD])
            :  :           +- Exchange(distribution=[single])
            :  :              +- LocalSortAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :  :                 +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
            :  :                    +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_SUM(sum$0) AS $f0, Final_COUNT(count$1) AS $f1])
            :  :                       +- Exchange(distribution=[hash[ss_list_price, $e]])
            :  :                          +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_SUM(ss_list_price_0) AS sum$0, Partial_COUNT(ss_list_price_0) AS count$1])
            :  :                             +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :  :                                +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 16), <=(ss_quantity, 20), OR(AND(>=(ss_list_price, 3), <=(ss_list_price, 13)), AND(>=(ss_coupon_amt, 3), <=(ss_coupon_amt, 1003)), AND(>=(ss_wholesale_cost, 3), <=(ss_wholesale_cost, 23))))])
            :  :                                   +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :  +- Exchange(distribution=[broadcast])
            :     +- Calc(select=[CAST(/(CAST($f0), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B3_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B3_CNT, B3_CNTD])
            :        +- SortAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B3_CNTD])
            :           +- Exchange(distribution=[single])
            :              +- LocalSortAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :                 +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
            :                    +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_SUM(sum$0) AS $f0, Final_COUNT(count$1) AS $f1])
            :                       +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                          +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_SUM(ss_list_price_0) AS sum$0, Partial_COUNT(ss_list_price_0) AS count$1])
            :                             +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                                +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 11), <=(ss_quantity, 15), OR(AND(>=(ss_list_price, 2), <=(ss_list_price, 12)), AND(>=(ss_coupon_amt, 2), <=(ss_coupon_amt, 1002)), AND(>=(ss_wholesale_cost, 2), <=(ss_wholesale_cost, 22))))])
            :                                   +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[CAST(/(CAST(CASE(=(CAST(CASE(IS NOT NULL($f1), $f1, 0)), 0), null, CAST($f0))), CAST(CASE(IS NOT NULL($f1), $f1, 0)))) AS B2_LP, CAST(CASE(IS NOT NULL($f1), $f1, 0)) AS B2_CNT, B2_CNTD])
                  +- SortAggregate(isMerge=[true], select=[Final_MIN(min$0) AS $f0, Final_MIN(min$1) AS $f1, Final_COUNT(count$2) AS B2_CNTD])
                     +- Exchange(distribution=[single])
                        +- LocalSortAggregate(select=[Partial_MIN($f0) FILTER $g_1 AS min$0, Partial_MIN($f1) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
                           +- Calc(select=[ss_list_price, $f0, $f1, =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
                              +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_$SUM0(sum0$0) AS $f0, Final_COUNT(count$1) AS $f1])
                                 +- Exchange(distribution=[hash[ss_list_price, $e]])
                                    +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_$SUM0(ss_list_price_0) AS sum0$0, Partial_COUNT(ss_list_price_0) AS count$1])
                                       +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
                                          +- Calc(select=[ss_list_price], where=[AND(>=(ss_quantity, 6), <=(ss_quantity, 10), OR(AND(>=(ss_list_price, 1), <=(ss_list_price, 11)), AND(>=(ss_coupon_amt, 1), <=(ss_coupon_amt, 1001)), AND(>=(ss_wholesale_cost, 1), <=(ss_wholesale_cost, 21))))])
                                             +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q29, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 29 in stream 0 using template query29.tpl
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1998
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1998
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1998,1998+1,1998+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100

-- end query 29 in stream 0 using template query29.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], store_sales_quantity=[SUM($4)], store_returns_quantity=[SUM($5)], catalog_sales_quantity=[SUM($6)])
   +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_store_id=[$162], s_store_name=[$166], ss_quantity=[$10], sr_return_quantity=[$33], cs_quantity=[$61])
      +- LogicalFilter(condition=[AND(=($85, 4), =($83, 1998), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), >=($113, 4), <=($113, +(4, 3)), =($111, 1998), =($26, $46), =($25, $58), =($43, $133), OR(=($139, 1998), =($139, CAST(+(1998, 1)):BIGINT NOT NULL), =($139, CAST(+(1998, 2)):BIGINT NOT NULL)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
            :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, Final_SUM(sum$0) AS store_sales_quantity, Final_SUM(sum$1) AS store_returns_quantity, Final_SUM(sum$2) AS catalog_sales_quantity])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_store_id, s_store_name]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, Partial_SUM(ss_quantity) AS sum$0, Partial_SUM(sr_return_quantity) AS sum$1, Partial_SUM(cs_quantity) AS sum$2])
               +- Calc(select=[i_item_id, i_item_desc, s_store_id, s_store_name, ss_quantity, sr_return_quantity, cs_quantity])
                  +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, s_store_sk, s_store_id, s_store_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                     :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                     :     :  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])
                     :     :     :  +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_sold_date_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_return_quantity, i_item_id, i_item_desc])
                     :     :     :     :  +- HashJoin(where=[AND(=(cs_bill_customer_sk, sr_customer_sk), =(cs_item_sk, ss_item_sk))], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                     :     :     :     :     :- Exchange(distribution=[hash[cs_bill_customer_sk, cs_item_sk]])
                     :     :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity])
                     :     :     :     :     +- Exchange(distribution=[hash[sr_customer_sk, ss_item_sk]])
                     :     :     :     :        +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_id, i_item_desc])
                     :     :     :     :           +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity, i_item_sk, i_item_id, i_item_desc], joinType=[InnerJoin], build=[right])
                     :     :     :     :              :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_returned_date_sk, sr_customer_sk, sr_return_quantity])
                     :     :     :     :              :  +- HashJoin(where=[AND(=(ss_customer_sk, sr_customer_sk), =(ss_item_sk, sr_item_sk), =(ss_ticket_number, sr_ticket_number))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity, sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], joinType=[InnerJoin], build=[right])
                     :     :     :     :              :     :- Exchange(distribution=[hash[ss_item_sk]])
                     :     :     :     :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity])
                     :     :     :     :              :     +- Exchange(distribution=[hash[sr_item_sk]])
                     :     :     :     :              :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
                     :     :     :     :              +- Exchange(distribution=[hash[i_item_sk]])
                     :     :     :     :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc])
                     :     :     :     +- Exchange(distribution=[broadcast])
                     :     :     :        +- Calc(select=[d_date_sk], where=[AND(>=(d_moy, 4), <=(d_moy, 7), =(d_year, 1998))])
                     :     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 4), =(d_year, 1998))])
                     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[d_date_sk], where=[OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000))])
                     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                     +- Exchange(distribution=[broadcast])
                        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_id, s_store_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q3, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 3 in stream 0 using template query3.tpl
select  dt.d_year 
       ,item.i_brand_id brand_id 
       ,item.i_brand brand
       ,sum(ss_ext_sales_price) sum_agg
 from  date_dim dt 
      ,store_sales
      ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
   and store_sales.ss_item_sk = item.i_item_sk
   and item.i_manufact_id = 1
   and dt.d_moy=11
 group by dt.d_year
      ,item.i_brand
      ,item.i_brand_id
 order by dt.d_year
         ,sum_agg desc
         ,brand_id
 limit 100

-- end query 3 in stream 0 using template query3.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], dir0=[ASC-nulls-first], dir1=[DESC-nulls-last], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(d_year=[$0], brand_id=[$2], brand=[$1], sum_agg=[$3])
   +- LogicalAggregate(group=[{0, 1, 2}], sum_agg=[SUM($3)])
      +- LogicalProject(d_year=[$6], brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($64, 1), =($8, 11))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[d_year, brand_id, brand, sum_agg])
+- SortLimit(orderBy=[d_year ASC, sum_agg DESC, brand_id ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[d_year ASC, sum_agg DESC, brand_id ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Final_SUM(sum$0) AS sum_agg])
            +- Exchange(distribution=[hash[d_year, brand, brand_id]])
               +- LocalHashAggregate(groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[d_year, i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk, d_year], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])
                        :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[=(i_manufact_id, 1)])
                        :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_brand, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_brand, i_manufact_id])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk, d_year], where=[=(d_moy, 11)])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q30, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 30 in stream 0 using template query30.tpl
with customer_total_return as
 (select wr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(wr_return_amt) as ctr_total_return
 from web_returns
     ,date_dim
     ,customer_address
 where wr_returned_date_sk = d_date_sk 
   and d_year =1999
   and wr_returning_addr_sk = ca_address_sk 
 group by wr_returning_customer_sk
         ,ca_state)
  select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
       ,c_last_review_date,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'TN'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
                  ,c_last_review_date,ctr_total_return
limit 100

-- end query 30 in stream 0 using template query30.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], sort10=[$10], sort11=[$11], sort12=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], dir10=[ASC-nulls-first], dir11=[ASC-nulls-first], dir12=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$17], c_salutation=[$23], c_first_name=[$24], c_last_name=[$25], c_preferred_cust_flag=[$26], c_birth_day=[$27], c_birth_month=[$28], c_birth_year=[$29], c_birth_country=[$30], c_login=[$31], c_email_address=[$32], c_last_review_date=[$33], ctr_total_return=[$2])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_state, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$7], ctr_state=[$60], wr_return_amt=[$15])
            LogicalFilter(condition=[AND(=($0, $24), =($30, 1999), =($10, $52))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
})), =($3, $20), =($11, 'TN'), =($0, $16))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$7], ctr_state=[$60], wr_return_amt=[$15])
         :  :     +- LogicalFilter(condition=[AND(=($0, $24), =($30, 1999), =($10, $52))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
         :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_total_return])
+- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, c_preferred_cust_flag ASC, c_birth_day ASC, c_birth_month ASC, c_birth_year ASC, c_birth_country ASC, c_login ASC, c_email_address ASC, c_last_review_date ASC, ctr_total_return ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, c_preferred_cust_flag ASC, c_birth_day ASC, c_birth_month ASC, c_birth_year ASC, c_birth_country ASC, c_login ASC, c_email_address ASC, c_last_review_date ASC, ctr_total_return ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_total_return, ca_address_sk], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[c_current_addr_sk]])
            :  +- Calc(select=[c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_total_return])
            :     +- HashJoin(where=[=(ctr_customer_sk, c_customer_sk)], join=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_customer_sk, ctr_total_return], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date])
            :        +- Exchange(distribution=[broadcast])
            :           +- Calc(select=[ctr_customer_sk, ctr_total_return])
            :              +- HashJoin(where=[AND(=(ctr_state, ctr_state0), >(ctr_total_return, *($f1, 1.2)))], join=[ctr_customer_sk, ctr_state, ctr_total_return, ctr_state0, $f1], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Final_SUM(sum$0) AS ctr_total_return])
            :                 :  +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :                 :     +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Partial_SUM(wr_return_amt) AS sum$0])
            :                 :        +- Calc(select=[wr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, wr_return_amt])
            :                 :           +- HashJoin(where=[=(wr_returned_date_sk, d_date_sk)], join=[wr_returned_date_sk, wr_returning_customer_sk, wr_return_amt, ca_state, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :              :- Calc(select=[wr_returned_date_sk, wr_returning_customer_sk, wr_return_amt, ca_state])
            :                 :              :  +- HashJoin(where=[=(wr_returning_addr_sk, ca_address_sk)], join=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
            :                 :              :     :- Exchange(distribution=[hash[wr_returning_addr_sk]])
            :                 :              :     :  +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt];filterPredicates=[]]]], fields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt])
            :                 :              :     +- Exchange(distribution=[hash[ca_address_sk]])
            :                 :              :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
            :                 :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :                 :                 +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
            :                 :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- HashAggregate(isMerge=[true], groupBy=[ctr_state], select=[ctr_state, Final_AVG(sum$0, count$1) AS $f1])
            :                       +- Exchange(distribution=[hash[ctr_state]])
            :                          +- LocalHashAggregate(groupBy=[ctr_state], select=[ctr_state, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
            :                             +- Calc(select=[ctr_state, ctr_total_return])
            :                                +- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Final_SUM(sum$0) AS ctr_total_return])
            :                                   +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :                                      +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Partial_SUM(wr_return_amt) AS sum$0])
            :                                         +- Calc(select=[wr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, wr_return_amt])
            :                                            +- HashJoin(where=[=(wr_returned_date_sk, d_date_sk)], join=[wr_returned_date_sk, wr_returning_customer_sk, wr_return_amt, ca_state, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                                               :- Calc(select=[wr_returned_date_sk, wr_returning_customer_sk, wr_return_amt, ca_state])
            :                                               :  +- HashJoin(where=[=(wr_returning_addr_sk, ca_address_sk)], join=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
            :                                               :     :- Exchange(distribution=[hash[wr_returning_addr_sk]])
            :                                               :     :  +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt];filterPredicates=[]]]], fields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt])
            :                                               :     +- Exchange(distribution=[hash[ca_address_sk]])
            :                                               :        +- Calc(select=[ca_address_sk, ca_state], where=[IS NOT NULL(ca_state)])
            :                                               :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
            :                                               +- Reused(reference_id=[1])
            +- Exchange(distribution=[hash[ca_address_sk]])
               +- Calc(select=[ca_address_sk], where=[=(ca_state, 'TN')])
                  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q31, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 31 in stream 0 using template query31.tpl
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select 
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 1998
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 1998
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 1998
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 1998
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 1998
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =1998
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.ca_county

-- end query 31 in stream 0 using template query31.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first])
+- LogicalProject(ca_county=[$0], d_year=[$2], web_q1_q2_increase=[/($19, $15)], store_q1_q2_increase=[/($7, $3)], web_q2_q3_increase=[/($23, $19)], store_q2_q3_increase=[/($11, $7)])
   +- LogicalFilter(condition=[AND(=($1, 1), =($2, 1998), =($0, $4), =($5, 2), =($6, 1998), =($4, $8), =($9, 3), =($10, 1998), =($0, $12), =($13, 1), =($14, 1998), =($12, $16), =($17, 2), =($18, 1998), =($12, $20), =($21, 3), =($22, 1998), >(CASE(>($15, 0), /($19, $15), null), CASE(>($3, 0), /($7, $3), null)), >(CASE(>($19, 0), /($23, $19), null), CASE(>($7, 0), /($11, $7), null)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :  :  :  +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :  :  :     +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :  :           +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :  :     +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  :  :  +- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :     +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :              :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  :  +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
         :  :     +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
         :  :        +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
         :     +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
         :        +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
            +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[ca_county, CAST(1998) AS d_year, /(web_sales0, web_sales) AS web_q1_q2_increase, /(store_sales0, store_sales) AS store_q1_q2_increase, /(web_sales00, web_sales0) AS web_q2_q3_increase, /(store_sales00, store_sales0) AS store_q2_q3_increase])
+- SortLimit(orderBy=[ca_county ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ca_county ASC], offset=[0], limit=[200], global=[false])
         +- HashJoin(where=[AND(CASE(>(store_sales, 0), CASE(>(web_sales, 0), >(/(web_sales0, web_sales), /(store_sales0, store_sales)), >(null, /(store_sales0, store_sales))), CASE(>(web_sales, 0), >(/(web_sales0, web_sales), null), null)), =(ca_county, ca_county00))], join=[ca_county, store_sales, store_sales0, store_sales00, ca_county00, web_sales, web_sales0, web_sales00], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[ca_county]])
            :  +- Calc(select=[ca_county, store_sales])
            :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
            :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
            :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :              +- Calc(select=[ca_county, CAST(1) AS d_qoy, CAST(1998) AS d_year, ss_ext_sales_price])
            :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, ca_county], reuse_id=[1])
            :                    :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk, ca_county], joinType=[InnerJoin], build=[right])
            :                    :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :                    :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price])
            :                    :     +- Exchange(distribution=[hash[ca_address_sk]])
            :                    :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_county];filterPredicates=[]]]], fields=[ca_address_sk, ca_county])
            :                    +- Exchange(distribution=[broadcast], reuse_id=[2])
            :                       +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 1), =(d_year, 1998))])
            :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
            +- Exchange(distribution=[hash[ca_county00]])
               +- Calc(select=[store_sales, store_sales0, ca_county0 AS ca_county00, web_sales, web_sales0, web_sales00])
                  +- HashJoin(where=[AND(CASE(>(store_sales, 0), CASE(>(web_sales0, 0), >(/(web_sales00, web_sales0), /(store_sales0, store_sales)), >(null, /(store_sales0, store_sales))), CASE(>(web_sales0, 0), >(/(web_sales00, web_sales0), null), null)), =(ca_county, ca_county00))], join=[ca_county, store_sales, store_sales0, ca_county0, web_sales, ca_county00, web_sales0, web_sales00], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[ca_county]])
                     :  +- Calc(select=[ca_county, store_sales])
                     :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
                     :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
                     :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
                     :              +- Calc(select=[ca_county, CAST(2) AS d_qoy, CAST(1998) AS d_year, ss_ext_sales_price])
                     :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :                    :- Reused(reference_id=[1])
                     :                    +- Exchange(distribution=[broadcast], reuse_id=[4])
                     :                       +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 2), =(d_year, 1998))])
                     :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                     +- Exchange(distribution=[hash[ca_county00]])
                        +- Calc(select=[store_sales, ca_county0, web_sales, ca_county00, web_sales0, web_sales00])
                           +- HashJoin(where=[=(ca_county, ca_county000)], join=[ca_county, store_sales, ca_county0, web_sales, ca_county00, web_sales0, ca_county000, web_sales00], joinType=[InnerJoin], build=[right])
                              :- Exchange(distribution=[hash[ca_county]])
                              :  +- Calc(select=[ca_county, store_sales])
                              :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
                              :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
                              :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
                              :              +- Calc(select=[ca_county, CAST(3) AS d_qoy, CAST(1998) AS d_year, ss_ext_sales_price])
                              :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :                    :- Reused(reference_id=[1])
                              :                    +- Exchange(distribution=[broadcast], reuse_id=[5])
                              :                       +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 3), =(d_year, 1998))])
                              :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                              +- Exchange(distribution=[hash[ca_county00]])
                                 +- HashJoin(where=[=(ca_county, ca_county0)], join=[ca_county, web_sales, ca_county0, web_sales0, ca_county00, web_sales00], joinType=[InnerJoin], build=[right])
                                    :- Exchange(distribution=[hash[ca_county]])
                                    :  +- Calc(select=[ca_county, web_sales])
                                    :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])
                                    :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
                                    :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
                                    :              +- Calc(select=[ca_county, CAST(1) AS d_qoy, CAST(1998) AS d_year, ws_ext_sales_price])
                                    :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :                    :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, ca_county], reuse_id=[3])
                                    :                    :  +- HashJoin(where=[=(ws_bill_addr_sk, ca_address_sk)], join=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk, ca_county], joinType=[InnerJoin], build=[right])
                                    :                    :     :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                                    :                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])
                                    :                    :     +- Exchange(distribution=[hash[ca_address_sk]])
                                    :                    :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_county];filterPredicates=[]]]], fields=[ca_address_sk, ca_county])
                                    :                    +- Reused(reference_id=[2])
                                    +- HashJoin(where=[=(ca_county0, ca_county)], join=[ca_county, web_sales, ca_county0, web_sales0], joinType=[InnerJoin], build=[left])
                                       :- Exchange(distribution=[hash[ca_county]])
                                       :  +- Calc(select=[ca_county, web_sales])
                                       :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])
                                       :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
                                       :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
                                       :              +- Calc(select=[ca_county, CAST(2) AS d_qoy, CAST(1998) AS d_year, ws_ext_sales_price])
                                       :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :                    :- Reused(reference_id=[3])
                                       :                    +- Reused(reference_id=[4])
                                       +- Exchange(distribution=[hash[ca_county]])
                                          +- Calc(select=[ca_county, web_sales])
                                             +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])
                                                +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
                                                   +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
                                                      +- Calc(select=[ca_county, CAST(3) AS d_qoy, CAST(1998) AS d_year, ws_ext_sales_price])
                                                         +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, ca_county, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                                            :- Reused(reference_id=[3])
                                                            +- Reused(reference_id=[5])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q32, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 32 in stream 0 using template query32.tpl
select  sum(cs_ext_discount_amt)  as `excess discount amount`
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 1
and i_item_sk = cs_item_sk 
and d_date between '1998-01-02' and 
        (cast('1998-01-02' as date) + INTERVAL '90' day)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-01-02' and
                             (cast('1998-01-02' as date) + INTERVAL '90' day)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100

-- end query 32 in stream 0 using template query32.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], excess discount amount=[SUM($0)])
   +- LogicalProject(cs_ext_discount_amt=[$22])
      +- LogicalFilter(condition=[AND(=($47, 1), =($34, $15), >=($58, CAST('1998-01-02'):DATE NOT NULL), <=($58, +(CAST('1998-01-02'):DATE NOT NULL, 7776000000)), =($56, $0), >($22, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(1.3, $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(cs_ext_discount_amt=[$22])
      LogicalFilter(condition=[AND(=($15, $cor0.i_item_sk), >=($36, CAST('1998-01-02'):DATE NOT NULL), <=($36, +(CAST('1998-01-02'):DATE NOT NULL, 7776000000)), =($34, $0))])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
          LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Limit(offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS excess discount amount])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_SUM(cs_ext_discount_amt) AS sum$0])
               +- Calc(select=[cs_ext_discount_amt])
                  +- HashJoin(where=[=(d_date_sk, cs_sold_date_sk)], join=[cs_sold_date_sk, cs_ext_discount_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_sold_date_sk, cs_ext_discount_amt])
                     :  +- HashJoin(where=[AND(>(cs_ext_discount_amt, *(1.3, $f1)), =(cs_item_sk, cs_item_sk0))], join=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt, cs_item_sk0, $f1], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[cs_item_sk, $f1])
                     :           +- HashJoin(where=[=(i_item_sk, cs_item_sk)], join=[cs_item_sk, $f1, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :- HashAggregate(isMerge=[true], groupBy=[cs_item_sk], select=[cs_item_sk, Final_AVG(sum$0, count$1) AS $f1])
                     :              :  +- Exchange(distribution=[hash[cs_item_sk]])
                     :              :     +- LocalHashAggregate(groupBy=[cs_item_sk], select=[cs_item_sk, Partial_AVG(cs_ext_discount_amt) AS (sum$0, count$1)])
                     :              :        +- Calc(select=[cs_item_sk, cs_ext_discount_amt])
                     :              :           +- HashJoin(where=[=(d_date_sk, cs_sold_date_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :              :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])
                     :              :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :              :                 +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-04-02))])
                     :              :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                     :              +- Exchange(distribution=[broadcast])
                     :                 +- Calc(select=[i_item_sk], where=[=(i_manufact_id, 1)])
                     :                    +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_manufact_id])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q33, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 33 in stream 0 using template query33.tpl
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100

-- end query 33 in stream 0 using template query33.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_manufact_id=[$77], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($77, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, 'Books')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($2, $64), =($0, $23), =($29, 1998), =($31, 1), =($6, $51), =(CAST($62):DECIMAL(12, 2), -5))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :              :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :              :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :  :              +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :  +- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_manufact_id=[$88], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($88, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, 'Books')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($15, $75), =($0, $34), =($40, 1998), =($42, 1), =($6, $62), =(CAST($73):DECIMAL(12, 2), -5))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                 :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :                 :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :                 +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      +- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_manufact_id=[$88], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($88, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, 'Books')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($3, $75), =($0, $34), =($40, 1998), =($42, 1), =($7, $62), =(CAST($73):DECIMAL(12, 2), -5))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[total_sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_sales ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_manufact_id], select=[i_manufact_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_manufact_id, total_sales])
            :- Union(all=[true], union=[i_manufact_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_manufact_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :        +- Calc(select=[ss_ext_sales_price, i_manufact_id])
            :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_manufact_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_manufact_id])
            :  :              :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
            :  :              :     :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :  :              :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :              :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              :     :     +- Exchange(distribution=[hash[ca_address_sk]], reuse_id=[1])
            :  :              :     :        +- Calc(select=[ca_address_sk], where=[=(CAST(ca_gmt_offset), -5)])
            :  :              :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_gmt_offset];filterPredicates=[]]]], fields=[ca_address_sk, ca_gmt_offset])
            :  :              :     +- Exchange(distribution=[broadcast], reuse_id=[2])
            :  :              :        +- HashSemiJoin(where=[=(i_manufact_id, i_manufact_id0)], join=[i_item_sk, i_manufact_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :  :              :           :- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_manufact_id])
            :  :              :           +- Exchange(distribution=[broadcast])
            :  :              :              +- Calc(select=[i_manufact_id], where=[=(i_category, 'Books')])
            :  :              :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_category, i_manufact_id];filterPredicates=[]]]], fields=[i_category, i_manufact_id])
            :  :              +- Exchange(distribution=[broadcast], reuse_id=[3])
            :  :                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
            :  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_manufact_id]])
            :        +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :           +- Calc(select=[i_manufact_id, cs_ext_sales_price])
            :              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_manufact_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_manufact_id])
            :                 :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :  +- HashJoin(where=[=(cs_bill_addr_sk, ca_address_sk)], join=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :                 :     :     :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :                 :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :     +- Reused(reference_id=[1])
            :                 :     +- Reused(reference_id=[2])
            :                 +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_manufact_id]])
                  +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
                     +- Calc(select=[i_manufact_id, ws_ext_sales_price])
                        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_manufact_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_manufact_id])
                           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
                           :     :  +- HashJoin(where=[=(ws_bill_addr_sk, ca_address_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
                           :     :     :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                           :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :     :     +- Reused(reference_id=[1])
                           :     +- Reused(reference_id=[2])
                           +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q34, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 34 in stream 0 using template query34.tpl
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)
    and (household_demographics.hd_buy_potential = '1001-5000' or
         household_demographics.hd_buy_potential = '0-500')
    and household_demographics.hd_vehicle_count > 0
    and (case when household_demographics.hd_vehicle_count > 0 
	then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count 
	else null 
	end)  > 1.2
    and date_dim.d_year in (1998,1998+1,1998+2)
    and store.s_county in ('Williamson County','Ziebach County','Walker County','Fairfield County',
                           'Richland County','Franklin Parish','Daviess County','Barrow County')
    group by ss_ticket_number,ss_customer_sk) dn,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 15 and 20
    order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number

-- end query 34 in stream 0 using template query34.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[DESC-nulls-last], dir4=[ASC-nulls-first])
+- LogicalProject(c_last_name=[$12], c_first_name=[$11], c_salutation=[$10], c_preferred_cust_flag=[$13], ss_ticket_number=[$0], cnt=[$2])
   +- LogicalFilter(condition=[AND(=($1, $3), >=($2, 15), <=($2, 20))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1}], cnt=[COUNT()])
         :  +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3])
         :     +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), OR(AND(>=($32, 1), <=($32, 3)), AND(>=($32, 25), <=($32, 28))), OR(=($82, '1001-5000'), =($82, '0-500')), >($84, 0), >(CASE(>($84, 0), /(CAST($83):DOUBLE, CAST($84):DOUBLE), null), 1.2), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL)), OR(=($74, 'Williamson County'), =($74, 'Ziebach County'), =($74, 'Walker County'), =($74, 'Fairfield County'), =($74, 'Richland County'), =($74, 'Franklin Parish'), =($74, 'Daviess County'), =($74, 'Barrow County')))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :           :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :           :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :           +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number, cnt])
+- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, c_salutation ASC, c_preferred_cust_flag DESC, ss_ticket_number ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, c_salutation ASC, c_preferred_cust_flag DESC, ss_ticket_number ASC], offset=[0], limit=[200], global=[false])
         +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_ticket_number, ss_customer_sk, cnt, c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, cnt], where=[AND(>=(cnt, 15), <=(cnt, 20))])
            :     +- HashAggregate(isMerge=[true], groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, Final_COUNT(count$0) AS cnt])
            :        +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk]])
            :           +- LocalHashAggregate(groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, Partial_COUNT(*) AS count$0])
            :              +- Calc(select=[ss_ticket_number, ss_customer_sk])
            :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_store_sk, ss_ticket_number, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_customer_sk, ss_store_sk, ss_ticket_number])
            :                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])
            :                    :     :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])
            :                    :     :     +- Exchange(distribution=[broadcast])
            :                    :     :        +- Calc(select=[hd_demo_sk], where=[AND(OR(=(hd_buy_potential, '1001-5000'), =(hd_buy_potential, '0-500')), >(hd_vehicle_count, 0), CASE(>(hd_vehicle_count, 0), >(/(CAST(hd_dep_count), CAST(hd_vehicle_count)), 1.2), null))])
            :                    :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count])
            :                    :     +- Exchange(distribution=[broadcast])
            :                    :        +- Calc(select=[d_date_sk], where=[AND(OR(AND(>=(d_dom, 1), <=(d_dom, 3)), AND(>=(d_dom, 25), <=(d_dom, 28))), OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000)))])
            :                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_dom];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_dom])
            :                    +- Exchange(distribution=[broadcast])
            :                       +- Calc(select=[s_store_sk], where=[IN(s_county, 'Williamson County', 'Ziebach County', 'Walker County', 'Fairfield County', 'Richland County', 'Franklin Parish', 'Daviess County', 'Barrow County')])
            :                          +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_county];filterPredicates=[]]]], fields=[s_store_sk, s_county])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag];filterPredicates=[]]]], fields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q35, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 35 in stream 0 using template query35.tpl
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  cd_dep_count,
  count(*) cnt1,
  sum(cd_dep_count),
  sum(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  sum(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  sum(cd_dep_college_count),
  sum(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100

-- end query 35 in stream 0 using template query35.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$8], sort5=[$13], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], fetch=[100])
+- LogicalProject(ca_state=[$0], cd_gender=[$1], cd_marital_status=[$2], cd_dep_count=[$3], cnt1=[$6], EXPR$5=[$7], EXPR$6=[$7], EXPR$7=[$7], cd_dep_employed_count=[$4], cnt2=[$6], EXPR$10=[$8], EXPR$11=[$8], EXPR$12=[$8], cd_dep_college_count=[$5], cnt3=[$6], EXPR$15=[$9], EXPR$16=[$9], EXPR$17=[$9])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], cnt3=[COUNT()], EXPR$7=[SUM($3)], EXPR$12=[SUM($4)], EXPR$17=[SUM($5)])
      +- LogicalProject(ca_state=[$26], cd_gender=[$32], cd_marital_status=[$33], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
         +- LogicalFilter(condition=[AND(=($4, $18), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 1999), <($33, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cnt3 AS cnt1, EXPR$7 AS EXPR$5, EXPR$7 AS EXPR$6, EXPR$7, cd_dep_employed_count, cnt3 AS cnt2, EXPR$12 AS EXPR$10, EXPR$12 AS EXPR$11, EXPR$12, cd_dep_college_count, cnt3, EXPR$17 AS EXPR$15, EXPR$17 AS EXPR$16, EXPR$17])
+- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count$0) AS cnt3, Final_SUM(sum$1) AS EXPR$7, Final_SUM(sum$2) AS EXPR$12, Final_SUM(sum$3) AS EXPR$17])
            +- Exchange(distribution=[hash[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count$0, Partial_SUM(cd_dep_count) AS sum$1, Partial_SUM(cd_dep_employed_count) AS sum$2, Partial_SUM(cd_dep_college_count) AS sum$3])
                  +- Calc(select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[OR(IS NOT NULL(ws_bill_customer_sk), IS NOT NULL(cs_ship_customer_sk))])
                     +- HashJoin(where=[=(c_customer_sk, cs_ship_customer_sk)], join=[cs_ship_customer_sk, c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ws_bill_customer_sk], joinType=[RightOuterJoin], build=[left])
                        :- HashAggregate(isMerge=[true], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :  +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                        :     +- LocalHashAggregate(groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :        +- Calc(select=[cs_ship_customer_sk, true AS i])
                        :           +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :              :- Calc(select=[cs_sold_date_sk, cs_ship_customer_sk], where=[IS NOT NULL(cs_ship_customer_sk)])
                        :              :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ship_customer_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
                        :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1999), <(d_qoy, 4))])
                        :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                        +- Exchange(distribution=[hash[c_customer_sk]])
                           +- Calc(select=[c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ws_bill_customer_sk])
                              +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
                                 :- Exchange(distribution=[hash[c_current_addr_sk]])
                                 :  +- Calc(select=[ws_bill_customer_sk, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                                 :     +- HashJoin(where=[=(cd_demo_sk, c_current_cdemo_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], joinType=[InnerJoin], build=[right])
                                 :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                                 :        :  +- Calc(select=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                                 :        :     +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_customer_sk, ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[InnerJoin], build=[right])
                                 :        :        :- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk], select=[ss_customer_sk])
                                 :        :        :  +- Exchange(distribution=[hash[ss_customer_sk]])
                                 :        :        :     +- LocalHashAggregate(groupBy=[ss_customer_sk], select=[ss_customer_sk])
                                 :        :        :        +- Calc(select=[ss_customer_sk, true AS i])
                                 :        :        :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :        :        :              :- Calc(select=[ss_sold_date_sk, ss_customer_sk], where=[IS NOT NULL(ss_customer_sk)])
                                 :        :        :              :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk])
                                 :        :        :              +- Reused(reference_id=[1])
                                 :        :        +- HashJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[ws_bill_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[RightOuterJoin], build=[left])
                                 :        :           :- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                 :        :           :  +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                                 :        :           :     +- LocalHashAggregate(groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                 :        :           :        +- Calc(select=[ws_bill_customer_sk, true AS i])
                                 :        :           :           +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :        :           :              :- Calc(select=[ws_sold_date_sk, ws_bill_customer_sk], where=[IS NOT NULL(ws_bill_customer_sk)])
                                 :        :           :              :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                                 :        :           :              +- Reused(reference_id=[1])
                                 :        :           +- Exchange(distribution=[hash[c_customer_sk]])
                                 :        :              +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                                 :        +- Exchange(distribution=[hash[cd_demo_sk]])
                                 :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                                 +- Exchange(distribution=[hash[ca_address_sk]])
                                    +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q36, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 36 in stream 0 using template query36.tpl
select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,item
   ,store
 where
    d1.d_year = 1998 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('TN','SD','AL','SC',
                 'OH','LA','MO','GA')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100

-- end query 36 in stream 0 using template query36.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(gross_margin=[$0], i_category=[$1], i_class=[$2], lochierarchy=[$3], rank_within_parent=[$4])
+- LogicalSort(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(gross_margin=[/($2, $3)], i_category=[$0], i_class=[$1], lochierarchy=[+($4, $5)], rank_within_parent=[RANK() OVER (PARTITION BY +($4, $5), CASE(=($5, 0), $0, null) ORDER BY /($2, $3) NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$5=[CASE(=(+($4, $5), 0), $0, null)])
      +- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], agg#0=[SUM($2)], agg#1=[SUM($3)], agg#2=[GROUPING($0)], agg#3=[GROUPING($1)])
         +- LogicalProject(i_category=[$63], i_class=[$61], ss_net_profit=[$22], ss_ext_sales_price=[$15])
            +- LogicalFilter(condition=[AND(=($29, 1998), =($23, $0), =($51, $2), =($73, $7), OR(=($97, 'TN'), =($97, 'SD'), =($97, 'AL'), =($97, 'SC'), =($97, 'OH'), =($97, 'LA'), =($97, 'MO'), =($97, 'GA')))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[$2 AS gross_margin, i_category, i_class, $3 AS lochierarchy, w0$o0 AS rank_within_parent])
+- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[false])
         +- OverAggregate(partitionBy=[$3, $4], orderBy=[$2 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_class, $2, $3, $4, $5, w0$o0])
            +- Sort(orderBy=[$3 ASC, $4 ASC, $2 ASC])
               +- Exchange(distribution=[hash[$3, $4]])
                  +- Calc(select=[i_category, i_class, /($f3, $f4) AS $2, +(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)) AS $3, CASE(=(CASE(=($e, 0), 0, =($e, 1), 1, 1), 0), i_category, null) AS $4, CASE(=(+(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)), 0), i_category, null) AS $5])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Final_SUM(sum$0) AS $f3, Final_SUM(sum$1) AS $f4])
                        +- Exchange(distribution=[hash[i_category, i_class, $e]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Partial_SUM(ss_net_profit) AS sum$0, Partial_SUM(ss_ext_sales_price) AS sum$1])
                              +- Expand(projects=[{i_category, i_class, ss_net_profit, ss_ext_sales_price, 0 AS $e}, {i_category, null AS i_class, ss_net_profit, ss_ext_sales_price, 1 AS $e}, {null AS i_category, null AS i_class, ss_net_profit, ss_ext_sales_price, 3 AS $e}])
                                 +- Calc(select=[i_category, i_class, ss_net_profit, ss_ext_sales_price])
                                    +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_ext_sales_price, ss_net_profit, i_class, i_category, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :- Calc(select=[ss_store_sk, ss_ext_sales_price, ss_net_profit, i_class, i_category])
                                       :  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, i_class, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, i_class, i_category])
                                       :     :  +- HashJoin(where=[=(i_item_sk, ss_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, i_item_sk, i_class, i_category], joinType=[InnerJoin], build=[right])
                                       :     :     :- Exchange(distribution=[hash[ss_item_sk]])
                                       :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])
                                       :     :     +- Exchange(distribution=[hash[i_item_sk]])
                                       :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_class, i_category])
                                       :     +- Exchange(distribution=[broadcast])
                                       :        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                                       :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                                       +- Exchange(distribution=[broadcast])
                                          +- Calc(select=[s_store_sk], where=[IN(s_state, 'TN', 'SD', 'AL', 'SC', 'OH', 'LA', 'MO', 'GA')])
                                             +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q37, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 37 in stream 0 using template query37.tpl
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 10 and 10 + 30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('1998-01-02' as date) and (cast('1998-01-02' as date) +  INTERVAL '60' day)
 and i_manufact_id in (667,668,669,670)
 and inv_quantity_on_hand between 100 and 500
 and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100

-- end query 37 in stream 0 using template query37.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}])
   +- LogicalProject(i_item_id=[$1], i_item_desc=[$4], i_current_price=[$5])
      +- LogicalFilter(condition=[AND(>=($5, 10), <=($5, +(10, 30)), =($23, $0), =($26, $22), >=($28, CAST('1998-01-02'):DATE NOT NULL), <=($28, +(CAST('1998-01-02'):DATE NOT NULL, 5184000000)), OR(=($13, 667), =($13, 668), =($13, 669), =($13, 670)), >=($25, 100), <=($25, 500), =($69, $0))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
               +- Calc(select=[i_item_id, i_item_desc, i_current_price])
                  +- HashJoin(where=[=(d_date_sk, inv_date_sk)], join=[inv_date_sk, i_item_id, i_item_desc, i_current_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[inv_date_sk, i_item_id, i_item_desc, i_current_price])
                     :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_item_sk, inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], joinType=[InnerJoin], build=[right])
                     :     :- Exchange(distribution=[hash[cs_item_sk]])
                     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_item_sk];filterPredicates=[]]]], fields=[cs_item_sk])
                     :     +- Exchange(distribution=[hash[i_item_sk]])
                     :        +- Calc(select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price])
                     :           +- HashJoin(where=[=(inv_item_sk, i_item_sk)], join=[inv_date_sk, inv_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :- Calc(select=[inv_date_sk, inv_item_sk], where=[AND(>=(inv_quantity_on_hand, 100), <=(inv_quantity_on_hand, 500))])
                     :              :  +- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])
                     :              +- Exchange(distribution=[broadcast])
                     :                 +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price], where=[AND(>=(i_current_price, 10), <=(i_current_price, 40), IN(i_manufact_id, 667, 668, 669, 670))])
                     :                    +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-03-03))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q38, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 38 in stream 0 using template query38.tpl
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1176 and 1176 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1176 and 1176 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1176 and 1176 + 11
) hot_cust
limit 100

-- end query 38 in stream 0 using template query38.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
   +- LogicalProject($f0=[0])
      +- LogicalIntersect(all=[false])
         :- LogicalIntersect(all=[false])
         :  :- LogicalAggregate(group=[{0, 1, 2}])
         :  :  +- LogicalProject(c_last_name=[$60], c_first_name=[$59], d_date=[$25])
         :  :     +- LogicalFilter(condition=[AND(=($0, $23), =($3, $51), >=($26, 1176), <=($26, +(1176, 11)))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  +- LogicalAggregate(group=[{0, 1, 2}])
         :     +- LogicalProject(c_last_name=[$71], c_first_name=[$70], d_date=[$36])
         :        +- LogicalFilter(condition=[AND(=($0, $34), =($3, $62), >=($37, 1176), <=($37, +(1176, 11)))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1, 2}])
            +- LogicalProject(c_last_name=[$71], c_first_name=[$70], d_date=[$36])
               +- LogicalFilter(condition=[AND(=($0, $34), =($4, $62), >=($37, 1176), <=($37, +(1176, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Limit(offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
               +- Calc(select=[0 AS $f0])
                  +- HashSemiJoin(where=[AND(OR(=(c_last_name, c_last_name0), AND(IS NULL(c_last_name), IS NULL(c_last_name0))), OR(=(c_first_name, c_first_name0), AND(IS NULL(c_first_name), IS NULL(c_first_name0))), OR(=(d_date, d_date0), AND(IS NULL(d_date), IS NULL(d_date0))))], join=[c_last_name, c_first_name, d_date], joinType=[LeftSemiJoin], build=[left])
                     :- HashSemiJoin(where=[AND(OR(=(c_last_name, c_last_name0), AND(IS NULL(c_last_name), IS NULL(c_last_name0))), OR(=(c_first_name, c_first_name0), AND(IS NULL(c_first_name), IS NULL(c_first_name0))), OR(=(d_date, d_date0), AND(IS NULL(d_date), IS NULL(d_date0))))], join=[c_last_name, c_first_name, d_date], joinType=[LeftSemiJoin], build=[right])
                     :  :- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                     :  :  +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
                     :  :     +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                     :  :        +- Calc(select=[c_last_name, c_first_name, d_date])
                     :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :  :              :- Calc(select=[ss_sold_date_sk, c_first_name, c_last_name])
                     :  :              :  +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                     :  :              :     :- Exchange(distribution=[hash[ss_customer_sk]])
                     :  :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk])
                     :  :              :     +- Exchange(distribution=[hash[c_customer_sk]])
                     :  :              :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
                     :  :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :  :                 +- Calc(select=[d_date_sk, d_date], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                     :  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_month_seq])
                     :  +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                     :     +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
                     :        +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                     :           +- Calc(select=[c_last_name, c_first_name, d_date])
                     :              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :                 :- Calc(select=[cs_sold_date_sk, c_first_name, c_last_name])
                     :                 :  +- HashJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                     :                 :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                     :                 :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk])
                     :                 :     +- Exchange(distribution=[hash[c_customer_sk]])
                     :                 :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
                     :                 +- Reused(reference_id=[1])
                     +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                        +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
                           +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                              +- Calc(select=[c_last_name, c_first_name, d_date])
                                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ws_sold_date_sk, c_first_name, c_last_name])
                                    :  +- HashJoin(where=[=(ws_bill_customer_sk, c_customer_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                                    :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                                    :     +- Exchange(distribution=[hash[c_customer_sk]])
                                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
                                    +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q39a, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 39 in stream 0 using template query39.tpl
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1998
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=1
  and inv2.d_moy=1+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov


-- end query 39 in stream 0 using template query39.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$7], sort6=[$8], sort7=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first])
+- LogicalProject(w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], mean=[$5], cov=[$6], w_warehouse_sk0=[$8], i_item_sk0=[$9], d_moy0=[$10], mean0=[$12], cov0=[$13])
   +- LogicalFilter(condition=[AND(=($2, $9), =($1, $8), =($3, 1), =($10, CAST(+(1, 1)):BIGINT NOT NULL))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null, /($4, $5))])
         :  +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
         :     +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
         :        +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
         :           +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1998))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
         :                 :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :                 :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
         :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null, /($4, $5))])
            +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
                  +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
                     +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1998))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
                           :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC], offset=[0], limit=[200], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC], offset=[0], limit=[200], global=[false])
      +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(1) AS d_moy, mean, cov, w_warehouse_sk0, i_item_sk0, CAST(2) AS d_moy0, mean0, cov0])
         +- HashJoin(where=[AND(=(i_item_sk, i_item_sk0), =(w_warehouse_sk, w_warehouse_sk0))], join=[w_warehouse_sk, i_item_sk, mean, cov, w_warehouse_sk0, i_item_sk0, mean0, cov0], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
            :  +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(/(CAST($f4), $f5)) AS mean, CASE(=(CAST(/(CAST($f4), $f5)), 0), null, /(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5)))) AS cov], where=[CASE(=(CAST(/(CAST($f4), $f5)), 0), CAST(false), >(/(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5))), 1))])
            :     +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
            :        +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
            :           +- Calc(select=[w_warehouse_name, w_warehouse_sk, i_item_sk, CAST(1) AS d_moy, inv_quantity_on_hand, *(CAST(inv_quantity_on_hand), CAST(inv_quantity_on_hand)) AS $f5])
            :              +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk], reuse_id=[1])
            :                 :  +- HashJoin(where=[=(inv_item_sk, i_item_sk)], join=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name])
            :                 :     :  +- HashJoin(where=[=(inv_warehouse_sk, w_warehouse_sk)], join=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
            :                 :     :     +- Exchange(distribution=[broadcast])
            :                 :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
            :                 :     +- Exchange(distribution=[broadcast])
            :                 :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk];filterPredicates=[]]]], fields=[i_item_sk])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
            :                       +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            +- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
               +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(/(CAST($f4), $f5)) AS mean, CASE(=(CAST(/(CAST($f4), $f5)), 0), null, /(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5)))) AS cov], where=[CASE(=(CAST(/(CAST($f4), $f5)), 0), CAST(false), >(/(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5))), 1))])
                  +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
                     +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
                        +- Calc(select=[w_warehouse_name, w_warehouse_sk, i_item_sk, CAST(2) AS d_moy, inv_quantity_on_hand, *(CAST(inv_quantity_on_hand), CAST(inv_quantity_on_hand)) AS $f5])
                           +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :- Reused(reference_id=[1])
                              +- Exchange(distribution=[broadcast])
                                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 2))])
                                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q39b, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 39 in stream 0 using template query39.tpl

with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1998
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=1
  and inv2.d_moy=1+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov


-- end query 39 in stream 0 using template query39.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$7], sort6=[$8], sort7=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first])
+- LogicalProject(w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], mean=[$5], cov=[$6], w_warehouse_sk0=[$8], i_item_sk0=[$9], d_moy0=[$10], mean0=[$12], cov0=[$13])
   +- LogicalFilter(condition=[AND(=($2, $9), =($1, $8), =($3, 1), =($10, CAST(+(1, 1)):BIGINT NOT NULL), >($6, 1.5))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null, /($4, $5))])
         :  +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
         :     +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
         :        +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
         :           +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1998))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
         :                 :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :                 :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
         :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null, /($4, $5))])
            +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
                  +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
                     +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1998))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :  :- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
                           :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC], offset=[0], limit=[200], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC], offset=[0], limit=[200], global=[false])
      +- Calc(select=[w_warehouse_sk0 AS w_warehouse_sk, i_item_sk0 AS i_item_sk, CAST(1) AS d_moy, mean0 AS mean, cov0 AS cov, w_warehouse_sk AS w_warehouse_sk0, i_item_sk AS i_item_sk0, CAST(2) AS d_moy0, mean AS mean0, cov AS cov0])
         +- HashJoin(where=[AND(=(i_item_sk0, i_item_sk), =(w_warehouse_sk0, w_warehouse_sk))], join=[w_warehouse_sk, i_item_sk, mean, cov, w_warehouse_sk0, i_item_sk0, mean0, cov0], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
            :  +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(/(CAST($f4), $f5)) AS mean, CASE(=(CAST(/(CAST($f4), $f5)), 0), null, /(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5)))) AS cov], where=[CASE(=(CAST(/(CAST($f4), $f5)), 0), CAST(false), >(/(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5))), 1))])
            :     +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
            :        +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
            :           +- Calc(select=[w_warehouse_name, w_warehouse_sk, i_item_sk, CAST(2) AS d_moy, inv_quantity_on_hand, *(CAST(inv_quantity_on_hand), CAST(inv_quantity_on_hand)) AS $f5])
            :              +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk], reuse_id=[1])
            :                 :  +- HashJoin(where=[=(inv_item_sk, i_item_sk)], join=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name])
            :                 :     :  +- HashJoin(where=[=(inv_warehouse_sk, w_warehouse_sk)], join=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
            :                 :     :     +- Exchange(distribution=[broadcast])
            :                 :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
            :                 :     +- Exchange(distribution=[broadcast])
            :                 :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk];filterPredicates=[]]]], fields=[i_item_sk])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 2))])
            :                       +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            +- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
               +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(/(CAST($f4), $f5)) AS mean, CASE(=(CAST(/(CAST($f4), $f5)), 0), null, /(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5)))) AS cov], where=[AND(CASE(=(CAST(/(CAST($f4), $f5)), 0), CAST(false), >(/(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5))), 1)), CASE(=(CAST(/(CAST($f4), $f5)), 0), null, >(/(CAST(POWER(/(-($f3, /(*(CAST($f4), CAST($f4)), $f5)), CASE(=($f5, 1), null, -($f5, 1))), 0.5)), CAST(/(CAST($f4), $f5))), 1.5)))])
                  +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
                     +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
                        +- Calc(select=[w_warehouse_name, w_warehouse_sk, i_item_sk, CAST(1) AS d_moy, inv_quantity_on_hand, *(CAST(inv_quantity_on_hand), CAST(inv_quantity_on_hand)) AS $f5])
                           +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name, i_item_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :- Reused(reference_id=[1])
                              +- Exchange(distribution=[broadcast])
                                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
                                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q4, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 4 in stream 0 using template query4.tpl
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  
                  t_s_secyear.customer_id
                 ,t_s_secyear.customer_first_name
                 ,t_s_secyear.customer_last_name
                 ,t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  1998
   and t_s_secyear.dyear = 1998+1
   and t_c_firstyear.dyear =  1998
   and t_c_secyear.dyear =  1998+1
   and t_w_firstyear.dyear = 1998
   and t_w_secyear.dyear = 1998+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,t_s_secyear.customer_preferred_cust_flag
limit 100

-- end query 4 in stream 0 using template query4.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$10], customer_first_name=[$11], customer_last_name=[$12], customer_preferred_cust_flag=[$13])
   +- LogicalFilter(condition=[AND(=($10, $0), =($0, $30), =($0, $20), =($0, $40), =($0, $50), =($9, 's'), =($29, 'c'), =($49, 'w'), =($19, 's'), =($39, 'c'), =($59, 'w'), =($7, 1998), =($17, CAST(+(1998, 1)):BIGINT NOT NULL), =($27, 1998), =($37, CAST(+(1998, 1)):BIGINT NOT NULL), =($47, 1998), =($57, CAST(+(1998, 1)):BIGINT NOT NULL), >($8, 0), >($28, 0), >($48, 0), >(CASE(>($28, 0), /($38, $28), null), CASE(>($8, 0), /($18, $8), null)), >(CASE(>($28, 0), /($38, $28), null), CASE(>($48, 0), /($58, $48), null)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalUnion(all=[true])
         :  :  :  :  :  :- LogicalUnion(all=[true])
         :  :  :  :  :  :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :  :  :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :  :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :  :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :  :  :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
         :  :  :  :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :  :  :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :  :  :  :  :  :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :  :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :  :           +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :  :                 :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :  :  :  :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :  +- LogicalUnion(all=[true])
         :  :  :  :     :- LogicalUnion(all=[true])
         :  :  :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :  :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :     :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :     :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
         :  :  :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :     :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :  :  :  :     :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :  :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :  :  :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  +- LogicalUnion(all=[true])
         :  :  :     :- LogicalUnion(all=[true])
         :  :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :     :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :     :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
         :  :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :     :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :  :  :     :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :  :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  +- LogicalUnion(all=[true])
         :  :     :- LogicalUnion(all=[true])
         :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :     :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :     :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
         :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :     :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :  :     :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalUnion(all=[true])
         :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
         :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :     :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :     :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :     :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
         :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :     :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :     :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :     :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
         :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalUnion(all=[true])
            :- LogicalUnion(all=[true])
            :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['s'])
            :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
            :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
            :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
            :  :           +- LogicalJoin(condition=[true], joinType=[inner])
            :  :              :- LogicalJoin(condition=[true], joinType=[inner])
            :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['c'])
            :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
            :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
            :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
            :              +- LogicalJoin(condition=[true], joinType=[inner])
            :                 :- LogicalJoin(condition=[true], joinType=[inner])
            :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :                 :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=['w'])
               +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
                  +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
                     +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[customer_id0 AS customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag])
+- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC, customer_preferred_cust_flag ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC, customer_preferred_cust_flag ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(CASE(CAST(IS NOT NULL(year_total)), CASE(CAST(IS NOT NULL(year_total00)), >(/(year_total000, year_total00), /(year_total0, year_total)), >(null, /(year_total0, year_total))), CASE(CAST(IS NOT NULL(year_total00)), >(/(year_total000, year_total00), null), null)), =(customer_id, customer_id00))], join=[customer_id, year_total, customer_id0, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total0, year_total00, customer_id00, year_total000], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
            :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
            :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
            :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
            :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1998) AS dyear, /(+(-(-(ss_ext_list_price, ss_ext_wholesale_cost), ss_ext_discount_amt), ss_ext_sales_price), 2) AS $f8])
            :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], reuse_id=[1])
            :                    :  +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], joinType=[InnerJoin], build=[right])
            :                    :     :- Exchange(distribution=[hash[ss_customer_sk]])
            :                    :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price])
            :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
            :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
            :                    +- Exchange(distribution=[broadcast], reuse_id=[2])
            :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            +- Exchange(distribution=[hash[customer_id00]])
               +- Calc(select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total, year_total0, customer_id0 AS customer_id00, year_total00])
                  +- HashJoin(where=[=(customer_id, customer_id00)], join=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total, year_total0, customer_id0, year_total00, customer_id00], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[customer_id]])
                     :  +- Calc(select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, year_total])
                     :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                     :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                     :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                     :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1999) AS dyear, /(+(-(-(ss_ext_list_price, ss_ext_wholesale_cost), ss_ext_discount_amt), ss_ext_sales_price), 2) AS $f8])
                     :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :                    :- Reused(reference_id=[1])
                     :                    +- Exchange(distribution=[broadcast], reuse_id=[4])
                     :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
                     :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                     +- Exchange(distribution=[hash[customer_id00]])
                        +- Calc(select=[year_total, customer_id0, year_total0, customer_id00])
                           +- HashJoin(where=[AND(CASE(CAST(IS NOT NULL(year_total000)), CASE(CAST(IS NOT NULL(year_total)), >(/(year_total0, year_total), /(year_total00, year_total000)), >(null, /(year_total00, year_total000))), CASE(CAST(IS NOT NULL(year_total)), >(/(year_total0, year_total), null), null)), =(customer_id, customer_id000))], join=[customer_id, year_total, customer_id0, year_total0, customer_id00, year_total00, customer_id000, year_total000], joinType=[InnerJoin], build=[right])
                              :- Exchange(distribution=[hash[customer_id]])
                              :  +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
                              :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                              :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                              :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                              :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1998) AS dyear, /(+(-(-(cs_ext_list_price, cs_ext_wholesale_cost), cs_ext_discount_amt), cs_ext_sales_price), 2) AS $f8])
                              :                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :                    :- Calc(select=[cs_sold_date_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], reuse_id=[3])
                              :                    :  +- HashJoin(where=[=(c_customer_sk, cs_bill_customer_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], joinType=[InnerJoin], build=[right])
                              :                    :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                              :                    :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price])
                              :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
                              :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                              :                    +- Reused(reference_id=[2])
                              +- HashJoin(where=[=(customer_id, customer_id00)], join=[customer_id, year_total, customer_id0, year_total0, customer_id00, year_total00], joinType=[InnerJoin], build=[right])
                                 :- Exchange(distribution=[hash[customer_id]])
                                 :  +- Calc(select=[customer_id, year_total])
                                 :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                                 :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                                 :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                                 :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1999) AS dyear, /(+(-(-(cs_ext_list_price, cs_ext_wholesale_cost), cs_ext_discount_amt), cs_ext_sales_price), 2) AS $f8])
                                 :                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :                    :- Reused(reference_id=[3])
                                 :                    +- Reused(reference_id=[4])
                                 +- HashJoin(where=[=(customer_id, customer_id0)], join=[customer_id, year_total, customer_id0, year_total0], joinType=[InnerJoin], build=[right])
                                    :- Exchange(distribution=[hash[customer_id]])
                                    :  +- Calc(select=[customer_id, year_total])
                                    :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                                    :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                                    :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                                    :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1999) AS dyear, /(+(-(-(ws_ext_list_price, ws_ext_wholesale_cost), ws_ext_discount_amt), ws_ext_sales_price), 2) AS $f8])
                                    :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :                    :- Calc(select=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], reuse_id=[5])
                                    :                    :  +- HashJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], joinType=[InnerJoin], build=[right])
                                    :                    :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                                    :                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])
                                    :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
                                    :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                                    :                    +- Reused(reference_id=[4])
                                    +- Exchange(distribution=[hash[customer_id]])
                                       +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
                                          +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Final_SUM(sum$0) AS year_total])
                                             +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                                                +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, Partial_SUM($f8) AS sum$0])
                                                   +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(1998) AS dyear, /(+(-(-(ws_ext_list_price, ws_ext_wholesale_cost), ws_ext_discount_amt), ws_ext_sales_price), 2) AS $f8])
                                                      +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                                         :- Reused(reference_id=[5])
                                                         +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q40, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 40 in stream 0 using template query40.tpl
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-02-01' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-02-01' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-02-01' as date) - INTERVAL '30' day)
                and (cast ('1998-02-01' as date) + INTERVAL '30' day)
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100

-- end query 40 in stream 0 using template query40.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], sales_before=[SUM($2)], sales_after=[SUM($3)])
   +- LogicalProject(w_state=[$71], i_item_id=[$76], $f2=[CASE(<(CAST($99):DATE, CAST('1998-02-01'):DATE NOT NULL), -($21, CASE(IS NOT NULL($57), CAST($57):DECIMAL(12, 2), 0)), 0)], $f3=[CASE(>=(CAST($99):DATE, CAST('1998-02-01'):DATE NOT NULL), -($21, CASE(IS NOT NULL($57), CAST($57):DECIMAL(12, 2), 0)), 0)])
      +- LogicalFilter(condition=[AND(>=($80, 0.99), <=($80, 1.49), =($75, $15), =($14, $61), =($0, $97), >=($99, -(CAST('1998-02-01'):DATE NOT NULL, 2592000000)), <=($99, +(CAST('1998-02-01'):DATE NOT NULL, 2592000000)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[AND(=($17, $50), =($15, $36))], joinType=[left])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[w_state ASC, i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_state ASC, i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[w_state, i_item_id], select=[w_state, i_item_id, Final_SUM(sum$0) AS sales_before, Final_SUM(sum$1) AS sales_after])
         +- Exchange(distribution=[hash[w_state, i_item_id]])
            +- LocalHashAggregate(groupBy=[w_state, i_item_id], select=[w_state, i_item_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1])
               +- Calc(select=[w_state, i_item_id, CASE(<(d_date, 1998-02-01), -(cs_sales_price, CASE(IS NOT NULL(cr_refunded_cash), CAST(cr_refunded_cash), 0)), 0) AS $f2, CASE(>=(d_date, 1998-02-01), -(cs_sales_price, CASE(IS NOT NULL(cr_refunded_cash), CAST(cr_refunded_cash), 0)), 0) AS $f3])
                  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_sales_price, cr_refunded_cash, w_state, i_item_id, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_sold_date_sk, cs_sales_price, cr_refunded_cash, w_state, i_item_id])
                     :  +- HashJoin(where=[=(i_item_sk, cs_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_sales_price, cr_refunded_cash, w_state, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_sales_price, cr_refunded_cash, w_state])
                     :     :  +- HashJoin(where=[=(cs_warehouse_sk, w_warehouse_sk)], join=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_sales_price, cr_refunded_cash, w_warehouse_sk, w_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- Calc(select=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_sales_price, cr_refunded_cash])
                     :     :     :  +- HashJoin(where=[AND(=(cs_order_number, cr_order_number), =(cs_item_sk, cr_item_sk))], join=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price, cr_item_sk, cr_order_number, cr_refunded_cash], joinType=[LeftOuterJoin], build=[right])
                     :     :     :     :- Exchange(distribution=[hash[cs_item_sk]])
                     :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price])
                     :     :     :     +- Exchange(distribution=[hash[cr_item_sk]])
                     :     :     :        +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_item_sk, cr_order_number, cr_refunded_cash];filterPredicates=[]]]], fields=[cr_item_sk, cr_order_number, cr_refunded_cash])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_state];filterPredicates=[]]]], fields=[w_warehouse_sk, w_state])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[i_item_sk, i_item_id], where=[AND(>=(i_current_price, 0.99), <=(i_current_price, 1.49))])
                     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_current_price];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_current_price])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk, d_date], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-03-03))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q41, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 41 in stream 0 using template query41.tpl
select  distinct(i_product_name)
 from item i1
 where i_manufact_id between 667 and 667+40 
   and (select count(*) as item_cnt
        from item
        where (i_manufact = i1.i_manufact and
        ((i_category = 'Women' and 
        (i_color = 'yellow' or i_color = 'almond') and 
        (i_units = 'N/A' or i_units = 'Unknown') and
        (i_size = 'N/A' or i_size = 'petite')
        ) or
        (i_category = 'Women' and
        (i_color = 'antique' or i_color = 'aquamarine') and
        (i_units = 'Each' or i_units = 'Dozen') and
        (i_size = 'small' or i_size = 'medium')
        ) or
        (i_category = 'Men' and
        (i_color = 'azure' or i_color = 'beige') and
        (i_units = 'Case' or i_units = 'Pallet') and
        (i_size = 'large' or i_size = 'extra large')
        ) or
        (i_category = 'Men' and
        (i_color = 'bisque' or i_color = 'black') and
        (i_units = 'Gross' or i_units = 'Carton') and
        (i_size = 'N/A' or i_size = 'petite')
        ))) or
       (i_manufact = i1.i_manufact and
        ((i_category = 'Women' and 
        (i_color = 'blanched' or i_color = 'blue') and 
        (i_units = 'Box' or i_units = 'Bunch') and
        (i_size = 'N/A' or i_size = 'petite')
        ) or
        (i_category = 'Women' and
        (i_color = 'blush' or i_color = 'brown') and
        (i_units = 'Bundle' or i_units = 'Oz') and
        (i_size = 'small' or i_size = 'medium')
        ) or
        (i_category = 'Men' and
        (i_color = 'burlywood' or i_color = 'burnished') and
        (i_units = 'Lb' or i_units = 'Ton') and
        (i_size = 'large' or i_size = 'extra large')
        ) or
        (i_category = 'Men' and
        (i_color = 'chartreuse' or i_color = 'chiffon') and
        (i_units = 'Ounce' or i_units = 'Pound') and
        (i_size = 'N/A' or i_size = 'petite')
        )))) > 0
 order by i_product_name
 limit 100

-- end query 41 in stream 0 using template query41.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}])
   +- LogicalProject(i_product_name=[$21])
      +- LogicalFilter(condition=[AND(>=($13, 667), <=($13, +(667, 40)), >($SCALAR_QUERY({
LogicalAggregate(group=[{}], item_cnt=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[OR(AND(=($14, $cor0.i_manufact), OR(AND(=($12, 'Women'), OR(=($17, 'yellow'), =($17, 'almond')), OR(=($18, 'N/A'), =($18, 'Unknown')), OR(=($15, 'N/A'), =($15, 'petite'))), AND(=($12, 'Women'), OR(=($17, 'antique'), =($17, 'aquamarine')), OR(=($18, 'Each'), =($18, 'Dozen')), OR(=($15, 'small'), =($15, 'medium'))), AND(=($12, 'Men'), OR(=($17, 'azure'), =($17, 'beige')), OR(=($18, 'Case'), =($18, 'Pallet')), OR(=($15, 'large'), =($15, 'extra large'))), AND(=($12, 'Men'), OR(=($17, 'bisque'), =($17, 'black')), OR(=($18, 'Gross'), =($18, 'Carton')), OR(=($15, 'N/A'), =($15, 'petite'))))), AND(=($14, $cor0.i_manufact), OR(AND(=($12, 'Women'), OR(=($17, 'blanched'), =($17, 'blue')), OR(=($18, 'Box'), =($18, 'Bunch')), OR(=($15, 'N/A'), =($15, 'petite'))), AND(=($12, 'Women'), OR(=($17, 'blush'), =($17, 'brown')), OR(=($18, 'Bundle'), =($18, 'Oz')), OR(=($15, 'small'), =($15, 'medium'))), AND(=($12, 'Men'), OR(=($17, 'burlywood'), =($17, 'burnished')), OR(=($18, 'Lb'), =($18, 'Ton')), OR(=($15, 'large'), =($15, 'extra large'))), AND(=($12, 'Men'), OR(=($17, 'chartreuse'), =($17, 'chiffon')), OR(=($18, 'Ounce'), =($18, 'Pound')), OR(=($15, 'N/A'), =($15, 'petite'))))))])
      LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), 0))], variablesSet=[[$cor0]])
         +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_product_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_product_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_product_name], select=[i_product_name])
         +- Exchange(distribution=[hash[i_product_name]])
            +- LocalHashAggregate(groupBy=[i_product_name], select=[i_product_name])
               +- Calc(select=[i_product_name])
                  +- HashSemiJoin(where=[=(i_manufact0, i_manufact)], join=[i_manufact, i_product_name], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[i_manufact, i_product_name], where=[AND(>=(i_manufact_id, 667), <=(i_manufact_id, 707))])
                     :  +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_manufact_id, i_manufact, i_product_name];filterPredicates=[]]]], fields=[i_manufact_id, i_manufact, i_product_name])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[i_manufact], where=[OR(AND(=(i_category, 'Women'), OR(=(i_color, 'yellow'), =(i_color, 'almond')), OR(=(i_units, 'N/A'), =(i_units, 'Unknown')), OR(=(i_size, 'N/A'), =(i_size, 'petite'))), AND(=(i_category, 'Women'), OR(=(i_color, 'antique'), =(i_color, 'aquamarine')), OR(=(i_units, 'Each'), =(i_units, 'Dozen')), OR(=(i_size, 'small'), =(i_size, 'medium'))), AND(=(i_category, 'Men'), OR(=(i_color, 'azure'), =(i_color, 'beige')), OR(=(i_units, 'Case'), =(i_units, 'Pallet')), OR(=(i_size, 'large'), =(i_size, 'extra large'))), AND(=(i_category, 'Men'), OR(=(i_color, 'bisque'), =(i_color, 'black')), OR(=(i_units, 'Gross'), =(i_units, 'Carton')), OR(=(i_size, 'N/A'), =(i_size, 'petite'))), AND(=(i_category, 'Women'), OR(=(i_color, 'blanched'), =(i_color, 'blue')), OR(=(i_units, 'Box'), =(i_units, 'Bunch')), OR(=(i_size, 'N/A'), =(i_size, 'petite'))), AND(=(i_category, 'Women'), OR(=(i_color, 'blush'), =(i_color, 'brown')), OR(=(i_units, 'Bundle'), =(i_units, 'Oz')), OR(=(i_size, 'small'), =(i_size, 'medium'))), AND(=(i_category, 'Men'), OR(=(i_color, 'burlywood'), =(i_color, 'burnished')), OR(=(i_units, 'Lb'), =(i_units, 'Ton')), OR(=(i_size, 'large'), =(i_size, 'extra large'))), AND(=(i_category, 'Men'), OR(=(i_color, 'chartreuse'), =(i_color, 'chiffon')), OR(=(i_units, 'Ounce'), =(i_units, 'Pound')), OR(=(i_size, 'N/A'), =(i_size, 'petite'))))])
                           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_category, i_manufact, i_size, i_color, i_units];filterPredicates=[]]]], fields=[i_category, i_manufact, i_size, i_color, i_units])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q42, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 42 in stream 0 using template query42.tpl
select  dt.d_year
 	,item.i_category_id
 	,item.i_category
 	,sum(ss_ext_sales_price)
 from 	date_dim dt
 	,store_sales
 	,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 	and store_sales.ss_item_sk = item.i_item_sk
 	and item.i_manager_id = 1  	
 	and dt.d_moy=11
 	and dt.d_year=1998
 group by 	dt.d_year
 		,item.i_category_id
 		,item.i_category
 order by       sum(ss_ext_sales_price) desc,dt.d_year
 		,item.i_category_id
 		,item.i_category
limit 100 

-- end query 42 in stream 0 using template query42.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$3], sort1=[$0], sort2=[$1], sort3=[$2], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], EXPR$3=[SUM($3)])
   +- LogicalProject(d_year=[$6], i_category_id=[$62], i_category=[$63], ss_ext_sales_price=[$43])
      +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 11), =($6, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[EXPR$3 DESC, d_year ASC, i_category_id ASC, i_category ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$3 DESC, d_year ASC, i_category_id ASC, i_category ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[d_year, i_category_id, i_category], select=[d_year, i_category_id, i_category, Final_SUM(sum$0) AS EXPR$3])
         +- Exchange(distribution=[hash[d_year, i_category_id, i_category]])
            +- LocalHashAggregate(groupBy=[d_year, i_category_id, i_category], select=[d_year, i_category_id, i_category, Partial_SUM(ss_ext_sales_price) AS sum$0])
               +- Calc(select=[CAST(1998) AS d_year, i_category_id, i_category, ss_ext_sales_price])
                  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_category_id, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_category_id, i_category])
                     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_category_id, i_category], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[i_item_sk, i_category_id, i_category], where=[=(i_manager_id, 1)])
                     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_category_id, i_category, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_category_id, i_category, i_manager_id])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 11), =(d_year, 1998))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q43, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 43 in stream 0 using template query43.tpl
select  s_store_name, s_store_id,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from date_dim, store_sales, store
 where d_date_sk = ss_sold_date_sk and
       s_store_sk = ss_store_sk and
       s_gmt_offset = -5 and
       d_year = 1998 
 group by s_store_name, s_store_id
 order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales
 limit 100

-- end query 43 in stream 0 using template query43.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
   +- LogicalProject(s_store_name=[$56], s_store_id=[$52], $f2=[CASE(=($14, 'Sunday'), $41, null)], $f3=[CASE(=($14, 'Monday'), $41, null)], $f4=[CASE(=($14, 'Tuesday'), $41, null)], $f5=[CASE(=($14, 'Wednesday'), $41, null)], $f6=[CASE(=($14, 'Thursday'), $41, null)], $f7=[CASE(=($14, 'Friday'), $41, null)], $f8=[CASE(=($14, 'Saturday'), $41, null)])
      +- LogicalFilter(condition=[AND(=($0, $28), =($51, $35), =(CAST($78):DECIMAL(12, 2), -5), =($6, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC, s_store_id ASC, sun_sales ASC, mon_sales ASC, tue_sales ASC, wed_sales ASC, thu_sales ASC, fri_sales ASC, sat_sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC, s_store_id ASC, sun_sales ASC, mon_sales ASC, tue_sales ASC, wed_sales ASC, thu_sales ASC, fri_sales ASC, sat_sales ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[s_store_name, s_store_id], select=[s_store_name, s_store_id, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales])
         +- Exchange(distribution=[hash[s_store_name, s_store_id]])
            +- LocalHashAggregate(groupBy=[s_store_name, s_store_id], select=[s_store_name, s_store_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1, Partial_SUM($f4) AS sum$2, Partial_SUM($f5) AS sum$3, Partial_SUM($f6) AS sum$4, Partial_SUM($f7) AS sum$5, Partial_SUM($f8) AS sum$6])
               +- Calc(select=[s_store_name, s_store_id, CASE(=(d_day_name, 'Sunday'), ss_sales_price, null) AS $f2, CASE(=(d_day_name, 'Monday'), ss_sales_price, null) AS $f3, CASE(=(d_day_name, 'Tuesday'), ss_sales_price, null) AS $f4, CASE(=(d_day_name, 'Wednesday'), ss_sales_price, null) AS $f5, CASE(=(d_day_name, 'Thursday'), ss_sales_price, null) AS $f6, CASE(=(d_day_name, 'Friday'), ss_sales_price, null) AS $f7, CASE(=(d_day_name, 'Saturday'), ss_sales_price, null) AS $f8])
                  +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_sales_price, d_day_name, s_store_sk, s_store_id, s_store_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_store_sk, ss_sales_price, d_day_name])
                     :  +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, d_date_sk, d_day_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[d_date_sk, d_day_name], where=[=(d_year, 1998)])
                     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_day_name];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_day_name])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[s_store_sk, s_store_id, s_store_name], where=[=(CAST(s_gmt_offset), -5)])
                           +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_store_name, s_gmt_offset];filterPredicates=[]]]], fields=[s_store_sk, s_store_id, s_store_name, s_gmt_offset])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q44, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 44 in stream 0 using template query44.tpl
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 1
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 1
                                                    and ss_customer_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 1
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 1
                                                    and ss_customer_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100

-- end query 44 in stream 0 using template query44.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(rnk=[$1], best_performing=[$25], worst_performing=[$47])
   +- LogicalFilter(condition=[AND(=($1, $3), =($4, $0), =($26, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalProject(item_sk=[$0], rnk=[$1])
         :  :  :  +- LogicalFilter(condition=[<($1, 11)])
         :  :  :     +- LogicalProject(item_sk=[$0], rnk=[RANK() OVER (ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         :  :  :        +- LogicalFilter(condition=[>($1, *(0.9, $SCALAR_QUERY({
LogicalProject(rank_col=[$1])
  LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
    LogicalProject(ss_store_sk=[$7], ss_net_profit=[$22])
      LogicalFilter(condition=[AND(=($7, 1), IS NULL($3))])
        LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
})))])
         :  :  :           +- LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
         :  :  :              +- LogicalProject(item_sk=[$2], ss_net_profit=[$22])
         :  :  :                 +- LogicalFilter(condition=[=($7, 1)])
         :  :  :                    +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  +- LogicalProject(item_sk=[$0], rnk=[$1])
         :  :     +- LogicalFilter(condition=[<($1, 11)])
         :  :        +- LogicalProject(item_sk=[$0], rnk=[RANK() OVER (ORDER BY $1 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         :  :           +- LogicalFilter(condition=[>($1, *(0.9, $SCALAR_QUERY({
LogicalProject(rank_col=[$1])
  LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
    LogicalProject(ss_store_sk=[$7], ss_net_profit=[$22])
      LogicalFilter(condition=[AND(=($7, 1), IS NULL($3))])
        LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
})))])
         :  :              +- LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
         :  :                 +- LogicalProject(item_sk=[$2], ss_net_profit=[$22])
         :  :                    +- LogicalFilter(condition=[=($7, 1)])
         :  :                       +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[rnk0 AS rnk, i_product_name0 AS best_performing, i_product_name AS worst_performing])
+- SortLimit(orderBy=[rnk0 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[rnk0 ASC], offset=[0], limit=[100], global=[false])
         +- NestedLoopJoin(where=[=(rnk0, rnk)], join=[rnk, i_product_name, rnk0, i_product_name0], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[$1 AS rnk, i_product_name])
            :     +- HashJoin(where=[=(i_item_sk, item_sk)], join=[item_sk, w0$o0, i_item_sk, i_product_name], joinType=[InnerJoin], isBroadcast=[true], build=[left])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- Calc(select=[item_sk, w0$o0])
            :        :     +- Rank(rankFunction=[RANK], partitionBy=[], orderBy=[rank_col DESC], rankRange=[rankStart=1, rankEnd=10], global=[true], select=[item_sk, rank_col, $f0, rk])
            :        :        +- Sort(orderBy=[rank_col DESC])
            :        :           +- Exchange(distribution=[single])
            :        :              +- Rank(rankFunction=[RANK], partitionBy=[], orderBy=[rank_col DESC], rankRange=[rankStart=1, rankEnd=10], global=[false], select=[item_sk, rank_col, $f0])
            :        :                 +- Sort(orderBy=[rank_col DESC])
            :        :                    +- NestedLoopJoin(where=[>(rank_col, *(0.9, $f0))], join=[item_sk, rank_col, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true], reuse_id=[1])
            :        :                       :- HashAggregate(isMerge=[true], groupBy=[item_sk], select=[item_sk, Final_AVG(sum$0, count$1) AS rank_col])
            :        :                       :  +- Exchange(distribution=[hash[item_sk]])
            :        :                       :     +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk, Partial_AVG(ss_net_profit) AS (sum$0, count$1)])
            :        :                       :        +- Calc(select=[ss_item_sk AS item_sk, ss_net_profit], where=[=(ss_store_sk, 1)])
            :        :                       :           +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_item_sk, ss_store_sk, ss_net_profit];filterPredicates=[]]]], fields=[ss_item_sk, ss_store_sk, ss_net_profit])
            :        :                       +- Exchange(distribution=[broadcast])
            :        :                          +- SortAggregate(isMerge=[false], select=[SINGLE_VALUE(rank_col) AS $f0])
            :        :                             +- Exchange(distribution=[single])
            :        :                                +- Calc(select=[rank_col])
            :        :                                   +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk], select=[ss_store_sk, Final_AVG(sum$0, count$1) AS rank_col])
            :        :                                      +- Exchange(distribution=[hash[ss_store_sk]])
            :        :                                         +- LocalHashAggregate(groupBy=[ss_store_sk], select=[ss_store_sk, Partial_AVG(ss_net_profit) AS (sum$0, count$1)])
            :        :                                            +- Calc(select=[CAST(1) AS ss_store_sk, ss_net_profit], where=[AND(=(ss_store_sk, 1), IS NULL(ss_customer_sk))])
            :        :                                               +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_customer_sk, ss_store_sk, ss_net_profit];filterPredicates=[]]]], fields=[ss_customer_sk, ss_store_sk, ss_net_profit])
            :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_product_name];filterPredicates=[]]]], fields=[i_item_sk, i_product_name])
            +- Calc(select=[$1 AS rnk, i_product_name])
               +- HashJoin(where=[=(i_item_sk, item_sk)], join=[item_sk, $1, i_item_sk, i_product_name], joinType=[InnerJoin], isBroadcast=[true], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[item_sk, w0$o0 AS $1])
                  :     +- Rank(rankFunction=[RANK], partitionBy=[], orderBy=[rank_col ASC], rankRange=[rankStart=1, rankEnd=10], global=[true], select=[item_sk, rank_col, $f0, rk])
                  :        +- Sort(orderBy=[rank_col ASC])
                  :           +- Exchange(distribution=[single])
                  :              +- Rank(rankFunction=[RANK], partitionBy=[], orderBy=[rank_col ASC], rankRange=[rankStart=1, rankEnd=10], global=[false], select=[item_sk, rank_col, $f0])
                  :                 +- Sort(orderBy=[rank_col ASC])
                  :                    +- Reused(reference_id=[1])
                  +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_product_name];filterPredicates=[]]]], fields=[i_item_sk, i_product_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q45, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 45 in stream 0 using template query45.tpl
select  ca_zip, ca_city, sum(ws_sales_price)
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ws_item_sk = i_item_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
 	      or 
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 1 and d_year = 1998
 group by ca_zip, ca_city
 order by ca_zip, ca_city
 limit 100

-- end query 45 in stream 0 using template query45.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
   +- LogicalProject(ca_zip=[$61], ca_city=[$58], ws_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($4, $34), =($38, $52), =($3, $93), OR(=(SUBSTR($61, 1, 5), '85669'), =(SUBSTR($61, 1, 5), '86197'), =(SUBSTR($61, 1, 5), '88274'), =(SUBSTR($61, 1, 5), '83405'), =(SUBSTR($61, 1, 5), '86475'), =(SUBSTR($61, 1, 5), '85392'), =(SUBSTR($61, 1, 5), '85460'), =(SUBSTR($61, 1, 5), '80348'), =(SUBSTR($61, 1, 5), '81792'), IN($94, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($0, 2), =($0, 3), =($0, 5), =($0, 7), =($0, 11), =($0, 13), =($0, 17), =($0, 19), =($0, 23), =($0, 29))])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
})), =($0, $65), =($75, 1), =($71, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[ca_zip ASC, ca_city ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ca_zip ASC, ca_city ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[ca_zip, ca_city], select=[ca_zip, ca_city, Final_SUM(sum$0) AS EXPR$2])
         +- Exchange(distribution=[hash[ca_zip, ca_city]])
            +- LocalHashAggregate(groupBy=[ca_zip, ca_city], select=[ca_zip, ca_city, Partial_SUM(ws_sales_price) AS sum$0])
               +- Calc(select=[ca_zip, ca_city, ws_sales_price])
                  +- HashJoin(where=[AND(=(ws_bill_customer_sk, c_customer_sk), OR(IS NOT NULL(i), IN(SUBSTR(ca_zip, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')))], join=[ws_bill_customer_sk, ws_sales_price, i, c_customer_sk, ca_city, ca_zip], joinType=[InnerJoin], build=[left])
                     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                     :  +- Calc(select=[ws_bill_customer_sk, ws_sales_price, i])
                     :     +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, ws_sales_price, i, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :- Calc(select=[ws_sold_date_sk, ws_bill_customer_sk, ws_sales_price, i])
                     :        :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price, i_item_sk, i], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price])
                     :        :     +- Exchange(distribution=[broadcast])
                     :        :        +- Calc(select=[i_item_sk, i])
                     :        :           +- NestedLoopJoin(where=[=(i_item_id, i_item_id0)], join=[i_item_sk, i_item_id, i_item_id0, i], joinType=[LeftOuterJoin], build=[right])
                     :        :              :- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                     :        :              +- Exchange(distribution=[broadcast])
                     :        :                 +- Calc(select=[i_item_id, true AS i])
                     :        :                    +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id])
                     :        :                       +- Exchange(distribution=[hash[i_item_id]])
                     :        :                          +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id])
                     :        :                             +- Calc(select=[i_item_id, true AS i], where=[IN(i_item_sk, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29)])
                     :        :                                +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                     :        +- Exchange(distribution=[broadcast])
                     :           +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 1), =(d_year, 1998))])
                     :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                     +- Exchange(distribution=[hash[c_customer_sk]])
                        +- Calc(select=[c_customer_sk, ca_city, ca_zip])
                           +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_city, ca_zip], joinType=[InnerJoin], build=[left])
                              :- Exchange(distribution=[hash[c_current_addr_sk]])
                              :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
                              +- Exchange(distribution=[hash[ca_address_sk]])
                                 +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_city, ca_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q46, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 46 in stream 0 using template query46.tpl
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,amt,profit 
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics,customer_address 
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 0 or
         household_demographics.hd_vehicle_count= -1)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_city in ('Midway','Fairview','Oak Grove','Five Points','Pleasant Hill') 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city <> bought_city
  order by c_last_name
          ,c_first_name
          ,ca_city
          ,bought_city
          ,ss_ticket_number
  limit 100

-- end query 46 in stream 0 using template query46.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$14], c_first_name=[$13], ca_city=[$29], bought_city=[$2], ss_ticket_number=[$0], amt=[$3], profit=[$4])
   +- LogicalFilter(condition=[AND(=($1, $5), =($9, $23), <>($29, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], bought_city=[$3], amt=[$4], profit=[$5])
         :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], amt=[SUM($4)], profit=[SUM($5)])
         :  :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], bought_city=[$91], ss_coupon_amt=[$19], ss_net_profit=[$22])
         :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), =($6, $85), OR(=($83, 0), =($84, -1)), OR(=($30, 6), =($30, 0)), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL)), OR(=($73, 'Midway'), =($73, 'Fairview'), =($73, 'Oak Grove'), =($73, 'Five Points'), =($73, 'Pleasant Hill')))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :              :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :              :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :  :              :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :  :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, amt, profit])
+- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, ca_city ASC, bought_city ASC, ss_ticket_number ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, ca_city ASC, bought_city ASC, ss_ticket_number ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(<>(ca_city, bought_city), =(ss_customer_sk, c_customer_sk))], join=[ss_ticket_number, ss_customer_sk, bought_city, amt, profit, c_customer_sk, c_first_name, c_last_name, ca_city], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, bought_city, amt, profit])
            :     +- HashAggregate(isMerge=[false], groupBy=[ss_ticket_number, ss_customer_sk, ss_addr_sk], auxGrouping=[bought_city], select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, bought_city, SUM(ss_coupon_amt) AS amt, SUM(ss_net_profit) AS profit])
            :        +- Calc(select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, ca_city AS bought_city, ss_coupon_amt, ss_net_profit])
            :           +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, ca_city, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :- Calc(select=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, ca_city])
            :              :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, ca_city, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, ca_city])
            :              :     :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, ca_address_sk, ca_city], joinType=[InnerJoin], build=[right])
            :              :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :              :     :     :  +- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :              :     :     :     +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :     :     :        :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :              :     :     :        +- Exchange(distribution=[broadcast])
            :              :     :     :           +- Calc(select=[hd_demo_sk], where=[OR(=(hd_dep_count, 0), =(hd_vehicle_count, -1))])
            :              :     :     :              +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
            :              :     :     +- Exchange(distribution=[hash[ca_address_sk]])
            :              :     :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city];filterPredicates=[]]]], fields=[ca_address_sk, ca_city])
            :              :     +- Exchange(distribution=[broadcast])
            :              :        +- Calc(select=[d_date_sk], where=[AND(OR(=(d_dow, 6), =(d_dow, 0)), OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000)))])
            :              :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_dow];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_dow])
            :              +- Exchange(distribution=[broadcast])
            :                 +- Calc(select=[s_store_sk], where=[IN(s_city, 'Midway', 'Fairview', 'Oak Grove', 'Five Points', 'Pleasant Hill')])
            :                    +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_city];filterPredicates=[]]]], fields=[s_store_sk, s_city])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- Calc(select=[c_customer_sk, c_first_name, c_last_name, ca_city])
                  +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, ca_address_sk, ca_city], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[c_current_addr_sk]])
                     :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name])
                     +- Exchange(distribution=[hash[ca_address_sk]])
                        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city];filterPredicates=[]]]], fields=[ca_address_sk, ca_city])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q47, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 47 in stream 0 using template query47.tpl
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 1999 or
         ( d_year = 1999-1 and d_moy =12) or
         ( d_year = 1999+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 1999 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100

-- end query 47 in stream 0 using template query47.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(i_category=[$0], d_year=[$1], avg_monthly_sales=[$2], sum_sales=[$3], psum=[$4], nsum=[$5])
+- LogicalSort(sort0=[$6], sort1=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], d_year=[$1], avg_monthly_sales=[$2], sum_sales=[$3], psum=[$4], nsum=[$5], EXPR$6=[-($3, $2)])
      +- LogicalFilter(condition=[AND(=($1, 1999), >($2, 0), >(CASE(>($2, 0), /(ABS(-($3, $2)), $2), null), 0.1))])
         +- LogicalProject(i_category=[$0], d_year=[$4], avg_monthly_sales=[$7], sum_sales=[$6], psum=[$15], nsum=[$24])
            +- LogicalFilter(condition=[AND(=($0, $9), =($0, $18), =($1, $10), =($1, $19), =($2, $11), =($2, $20), =($3, $12), =($3, $21), =($8, +($17, 1)), =($8, -($26, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CAST(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                  :  :     +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                  :  :        +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 1999), AND(=($51, CAST(-(1999, 1)):BIGINT NOT NULL), =($53, 12)), AND(=($51, CAST(+(1999, 1)):BIGINT NOT NULL), =($53, 1))))])
                  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  :  +- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CAST(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                  :        +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                  :           +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 1999), AND(=($51, CAST(-(1999, 1)):BIGINT NOT NULL), =($53, 12)), AND(=($51, CAST(+(1999, 1)):BIGINT NOT NULL), =($53, 1))))])
                  :              +- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  :                 :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :                 +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  +- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CAST(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                        +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                           +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 1999), AND(=($51, CAST(-(1999, 1)):BIGINT NOT NULL), =($53, 12)), AND(=($51, CAST(+(1999, 1)):BIGINT NOT NULL), =($53, 1))))])
                              +- LogicalJoin(condition=[true], joinType=[inner])
                                 :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                                 :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                                 +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_category, d_year, avg_monthly_sales, sum_sales, psum, nsum])
+- SortLimit(orderBy=[EXPR$6 ASC, avg_monthly_sales ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$6 ASC, avg_monthly_sales ASC], offset=[0], limit=[100], global=[false])
         +- Calc(select=[i_category0 AS i_category, CAST(1999) AS d_year, avg_monthly_sales, sum_sales0 AS sum_sales, sum_sales00 AS psum, sum_sales AS nsum, -(sum_sales0, avg_monthly_sales) AS EXPR$6])
            +- HashJoin(where=[AND(=(i_category0, i_category), =(i_brand0, i_brand), =(s_store_name0, s_store_name), =(s_company_name0, s_company_name), =(rn, $f9))], join=[i_category, i_brand, s_store_name, s_company_name, sum_sales, $f9, i_category0, i_brand0, s_store_name0, s_company_name0, sum_sales0, avg_monthly_sales, rn, sum_sales00], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], exchange_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, -(w0$o0, 1) AS $f9])
               :     +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum_sales, w0$o0], reuse_id=[1])
               :        +- Sort(orderBy=[i_category ASC, i_brand ASC, s_store_name ASC, s_company_name ASC, d_year ASC, d_moy ASC], reuse_id=[2])
               :           +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name]])
               :              +- HashAggregate(isMerge=[true], groupBy=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, Final_SUM(sum$0) AS sum_sales])
               :                 +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy]])
               :                    +- LocalHashAggregate(groupBy=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
               :                       +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, ss_sales_price])
               :                          +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_sales_price, i_brand, i_category, d_year, d_moy, s_store_sk, s_store_name, s_company_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                             :- Calc(select=[ss_store_sk, ss_sales_price, i_brand, i_category, d_year, d_moy])
               :                             :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_category, d_date_sk, d_year, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                             :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_category])
               :                             :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_brand, i_category], joinType=[InnerJoin], build=[right])
               :                             :     :     :- Exchange(distribution=[hash[ss_item_sk]])
               :                             :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
               :                             :     :     +- Exchange(distribution=[hash[i_item_sk]])
               :                             :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_category])
               :                             :     +- Exchange(distribution=[broadcast])
               :                             :        +- Calc(select=[d_date_sk, d_year, d_moy], where=[OR(=(d_year, 1999), AND(=(d_year, 1998), =(d_moy, 12)), AND(=(d_year, 2000), =(d_moy, 1)))])
               :                             :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
               :                             +- Exchange(distribution=[broadcast])
               :                                +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_company_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_company_name])
               +- Exchange(distribution=[broadcast])
                  +- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, s_store_name0 AS s_store_name, s_company_name0 AS s_company_name, sum_sales0 AS sum_sales, avg_monthly_sales, rn, sum_sales AS sum_sales0])
                     +- HashJoin(where=[AND(=(i_category0, i_category), =(i_brand0, i_brand), =(s_store_name0, s_store_name), =(s_company_name0, s_company_name), =(rn, $f9))], join=[i_category, i_brand, s_store_name, s_company_name, sum_sales, $f9, i_category0, i_brand0, s_store_name0, s_company_name0, sum_sales0, avg_monthly_sales, rn], joinType=[InnerJoin], build=[right])
                        :- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], exchange_mode=[BATCH])
                        :  +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, +(w0$o0, 1) AS $f9])
                        :     +- Reused(reference_id=[1])
                        +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, rn]])
                           +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0) AS avg_monthly_sales, w1$o0 AS rn], where=[AND(=(d_year, 1999), >(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), CASE(>(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), >(/(ABS(-(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0))), /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)), 0.1), null))])
                              +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name, d_year], window#0=[COUNT(sum_sales) AS w1$o0, $SUM0(sum_sales) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum_sales, w0$o1, w1$o0, w0$o0])
                                 +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum_sales, w0$o1])
                                    +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q48, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 48 in stream 0 using template query48.tpl
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'U'
   and 
   cd_education_status = 'Unknown'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = 'Primary'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'S'
   and 
   cd_education_status = 'Secondary'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('ID', 'TN', 'SD')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('AL', 'SC', 'OH')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('LA', 'MO', 'GA')
  and ss_net_profit between 50 and 25000 
  )
 )


-- end query 48 in stream 0 using template query48.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
+- LogicalProject(ss_quantity=[$10])
   +- LogicalFilter(condition=[AND(=($23, $7), =($0, $74), =($80, 1998), OR(AND(=($52, $4), =($54, 'U'), =($55, 'Unknown'), >=($13, 100.00), <=($13, 150.00)), AND(=($52, $4), =($54, 'M'), =($55, 'Primary'), >=($13, 50.00), <=($13, 100.00)), AND(=($52, $4), =($54, 'S'), =($55, 'Secondary'), >=($13, 150.00), <=($13, 200.00))), OR(AND(=($6, $61), =($71, 'United States'), OR(=($69, 'ID'), =($69, 'TN'), =($69, 'SD')), >=($22, 0), <=($22, 2000)), AND(=($6, $61), =($71, 'United States'), OR(=($69, 'AL'), =($69, 'SC'), =($69, 'OH')), >=($22, 150), <=($22, 3000)), AND(=($6, $61), =($71, 'United States'), OR(=($69, 'LA'), =($69, 'MO'), =($69, 'GA')), >=($22, 50), <=($22, 25000))))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalSortAggregate(select=[Partial_SUM(ss_quantity) AS sum$0])
      +- Calc(select=[ss_quantity])
         +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_quantity, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :- Calc(select=[ss_store_sk, ss_quantity])
            :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_quantity, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity])
            :     :  +- HashJoin(where=[AND(=(ss_addr_sk, ca_address_sk), OR(AND(OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD')), >=(ss_net_profit, 0), <=(ss_net_profit, 2000)), AND(OR(=(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH')), >=(ss_net_profit, 150), <=(ss_net_profit, 3000)), AND(OR(=(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')), >=(ss_net_profit, 50), <=(ss_net_profit, 25000))))], join=[ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_net_profit, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
            :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :     :     :  +- Calc(select=[ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_net_profit])
            :     :     :     +- HashJoin(where=[AND(=(cd_demo_sk, ss_cdemo_sk), OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown'), >=(ss_sales_price, 100.00), <=(ss_sales_price, 150.00)), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary'), >=(ss_sales_price, 50.00), <=(ss_sales_price, 100.00)), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary'), >=(ss_sales_price, 150.00), <=(ss_sales_price, 200.00))))], join=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit, cd_demo_sk, cd_marital_status, cd_education_status], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :     :        :- Calc(select=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit], where=[AND(OR(AND(>=(ss_sales_price, 100.00), <=(ss_sales_price, 150.00)), AND(>=(ss_sales_price, 50.00), <=(ss_sales_price, 100.00)), AND(>=(ss_sales_price, 150.00), <=(ss_sales_price, 200.00))), OR(AND(>=(ss_net_profit, 0), <=(ss_net_profit, 2000)), AND(>=(ss_net_profit, 150), <=(ss_net_profit, 3000)), AND(>=(ss_net_profit, 50), <=(ss_net_profit, 25000))))])
            :     :     :        :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit])
            :     :     :        +- Exchange(distribution=[broadcast])
            :     :     :           +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown')), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary')), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary')))])
            :     :     :              +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
            :     :     +- Exchange(distribution=[hash[ca_address_sk]])
            :     :        +- Calc(select=[ca_address_sk, ca_state], where=[AND(=(ca_country, 'United States'), OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD'), =(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH'), =(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')))])
            :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state, ca_country];filterPredicates=[]]]], fields=[ca_address_sk, ca_state, ca_country])
            :     +- Exchange(distribution=[broadcast])
            :        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            +- Exchange(distribution=[broadcast])
               +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q49, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 49 in stream 0 using template query49.tpl
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as decimal(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as decimal(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 1998
                         and d_moy = 11
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as decimal(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as decimal(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 1998
                         and d_moy = 11
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 1998
                         and d_moy = 11
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100

-- end query 49 in stream 0 using template query49.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
   +- LogicalUnion(all=[false])
      :- LogicalUnion(all=[false])
      :  :- LogicalProject(channel=['web'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
      :  :  +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
      :  :     +- LogicalProject(item=[$0], return_ratio=[$1], currency_ratio=[$2], return_rank=[RANK() OVER (ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], currency_rank=[RANK() OVER (ORDER BY $2 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      :  :        +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], currency_ratio=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
      :  :           +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
      :  :              +- LogicalProject(item=[$3], $f1=[CASE(IS NOT NULL($48), $48, 0)], $f2=[CASE(IS NOT NULL($18), $18, 0)], $f3=[CASE(IS NOT NULL($49), CAST($49):DECIMAL(12, 2), 0)], $f4=[CASE(IS NOT NULL($29), CAST($29):DECIMAL(12, 2), 0)])
      :  :                 +- LogicalFilter(condition=[AND(>($49, 10000), >($33, 1), >($29, 0), >($18, 0), =($0, $58), =($64, 1998), =($66, 11))])
      :  :                    +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                       :- LogicalJoin(condition=[AND(=($17, $47), =($3, $36))], joinType=[left])
      :  :                       :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
      :  :                       :  +- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
      :  :                       +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  +- LogicalProject(channel=['catalog'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
      :     +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
      :        +- LogicalProject(item=[$0], return_ratio=[$1], currency_ratio=[$2], return_rank=[RANK() OVER (ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], currency_rank=[RANK() OVER (ORDER BY $2 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      :           +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], currency_ratio=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
      :              +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
      :                 +- LogicalProject(item=[$15], $f1=[CASE(IS NOT NULL($51), $51, 0)], $f2=[CASE(IS NOT NULL($18), $18, 0)], $f3=[CASE(IS NOT NULL($52), CAST($52):DECIMAL(12, 2), 0)], $f4=[CASE(IS NOT NULL($29), CAST($29):DECIMAL(12, 2), 0)])
      :                    +- LogicalFilter(condition=[AND(>($52, 10000), >($33, 1), >($29, 0), >($18, 0), =($0, $61), =($67, 1998), =($69, 11))])
      :                       +- LogicalJoin(condition=[true], joinType=[inner])
      :                          :- LogicalJoin(condition=[AND(=($17, $50), =($15, $36))], joinType=[left])
      :                          :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                          :  +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
      :                          +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalProject(channel=['store'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
         +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
            +- LogicalProject(item=[$0], return_ratio=[$1], currency_ratio=[$2], return_rank=[RANK() OVER (ORDER BY $1 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], currency_rank=[RANK() OVER (ORDER BY $2 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
               +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], currency_ratio=[/(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4))])
                  +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
                     +- LogicalProject(item=[$2], $f1=[CASE(IS NOT NULL($33), $33, 0)], $f2=[CASE(IS NOT NULL($10), $10, 0)], $f3=[CASE(IS NOT NULL($34), CAST($34):DECIMAL(12, 2), 0)], $f4=[CASE(IS NOT NULL($20), CAST($20):DECIMAL(12, 2), 0)])
                        +- LogicalFilter(condition=[AND(>($34, 10000), >($22, 1), >($20, 0), >($10, 0), =($0, $43), =($49, 1998), =($51, 11))])
                           +- LogicalJoin(condition=[true], joinType=[inner])
                              :- LogicalJoin(condition=[AND(=($9, $32), =($2, $25))], joinType=[left])
                              :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                              :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, return_rank ASC, currency_rank ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, return_rank ASC, currency_rank ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[channel, item, return_ratio, return_rank, currency_rank], select=[channel, item, return_ratio, return_rank, currency_rank])
         +- Exchange(distribution=[hash[channel, item, return_ratio, return_rank, currency_rank]])
            +- LocalHashAggregate(groupBy=[channel, item, return_ratio, return_rank, currency_rank], select=[channel, item, return_ratio, return_rank, currency_rank])
               +- Union(all=[true], union=[channel, item, return_ratio, return_rank, currency_rank])
                  :- Union(all=[true], union=[channel, item, return_ratio, return_rank, currency_rank])
                  :  :- Calc(select=['web' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[OR(<=(w0$o0, 10), <=(w1$o0, 10))])
                  :  :  +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                  :  :     +- Sort(orderBy=[$2 ASC])
                  :  :        +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                  :  :           +- Sort(orderBy=[$1 ASC])
                  :  :              +- Exchange(distribution=[single])
                  :  :                 +- Calc(select=[item, /(CAST($f1), CAST($f2)) AS $1, /(CAST($f3), CAST($f4)) AS $2])
                  :  :                    +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                  :  :                       +- Calc(select=[ws_item_sk AS item, CASE(IS NOT NULL(wr_return_quantity), wr_return_quantity, 0) AS $f1, CASE(IS NOT NULL(ws_quantity), ws_quantity, 0) AS $f2, CASE(IS NOT NULL(wr_return_amt), CAST(wr_return_amt), 0) AS $f3, CASE(IS NOT NULL(ws_net_paid), CAST(ws_net_paid), 0) AS $f4])
                  :  :                          +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_net_paid, wr_return_quantity, wr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :  :                             :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_net_paid, wr_return_quantity, wr_return_amt])
                  :  :                             :  +- HashJoin(where=[AND(=(ws_order_number, wr_order_number), =(ws_item_sk, wr_item_sk))], join=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt], joinType=[InnerJoin], build=[right])
                  :  :                             :     :- Exchange(distribution=[hash[ws_item_sk]])
                  :  :                             :     :  +- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid], where=[AND(>(ws_net_profit, 1), >(ws_net_paid, 0), >(ws_quantity, 0))])
                  :  :                             :     :     +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, ws_net_profit];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, ws_net_profit])
                  :  :                             :     +- Exchange(distribution=[hash[wr_item_sk]])
                  :  :                             :        +- Calc(select=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt], where=[>(wr_return_amt, 10000)])
                  :  :                             :           +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt];filterPredicates=[]]]], fields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt])
                  :  :                             +- Exchange(distribution=[broadcast], reuse_id=[1])
                  :  :                                +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 11))])
                  :  :                                   +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                  :  +- Calc(select=['catalog' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[OR(<=(w0$o0, 10), <=(w1$o0, 10))])
                  :     +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                  :        +- Sort(orderBy=[$2 ASC])
                  :           +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                  :              +- Sort(orderBy=[$1 ASC])
                  :                 +- Exchange(distribution=[single])
                  :                    +- Calc(select=[item, /(CAST($f1), CAST($f2)) AS $1, /(CAST($f3), CAST($f4)) AS $2])
                  :                       +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                  :                          +- Calc(select=[cs_item_sk AS item, CASE(IS NOT NULL(cr_return_quantity), cr_return_quantity, 0) AS $f1, CASE(IS NOT NULL(cs_quantity), cs_quantity, 0) AS $f2, CASE(IS NOT NULL(cr_return_amount), CAST(cr_return_amount), 0) AS $f3, CASE(IS NOT NULL(cs_net_paid), CAST(cs_net_paid), 0) AS $f4])
                  :                             +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_net_paid, cr_return_quantity, cr_return_amount, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :                                :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_net_paid, cr_return_quantity, cr_return_amount])
                  :                                :  +- HashJoin(where=[AND(=(cs_order_number, cr_order_number), =(cs_item_sk, cr_item_sk))], join=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount], joinType=[InnerJoin], build=[right])
                  :                                :     :- Exchange(distribution=[hash[cs_item_sk]])
                  :                                :     :  +- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid], where=[AND(>(cs_net_profit, 1), >(cs_net_paid, 0), >(cs_quantity, 0))])
                  :                                :     :     +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cs_net_profit];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cs_net_profit])
                  :                                :     +- Exchange(distribution=[hash[cr_item_sk]])
                  :                                :        +- Calc(select=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount], where=[>(cr_return_amount, 10000)])
                  :                                :           +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount];filterPredicates=[]]]], fields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount])
                  :                                +- Reused(reference_id=[1])
                  +- Calc(select=['store' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[OR(<=(w0$o0, 10), <=(w1$o0, 10))])
                     +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                        +- Sort(orderBy=[$2 ASC])
                           +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                              +- Sort(orderBy=[$1 ASC])
                                 +- Exchange(distribution=[single])
                                    +- Calc(select=[item, /(CAST($f1), CAST($f2)) AS $1, /(CAST($f3), CAST($f4)) AS $2])
                                       +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                                          +- Calc(select=[ss_item_sk AS item, CASE(IS NOT NULL(sr_return_quantity), sr_return_quantity, 0) AS $f1, CASE(IS NOT NULL(ss_quantity), ss_quantity, 0) AS $f2, CASE(IS NOT NULL(sr_return_amt), CAST(sr_return_amt), 0) AS $f3, CASE(IS NOT NULL(ss_net_paid), CAST(ss_net_paid), 0) AS $f4])
                                             +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_net_paid, sr_return_quantity, sr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                                :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_net_paid, sr_return_quantity, sr_return_amt])
                                                :  +- HashJoin(where=[AND(=(ss_ticket_number, sr_ticket_number), =(ss_item_sk, sr_item_sk))], join=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt], joinType=[InnerJoin], build=[right])
                                                :     :- Exchange(distribution=[hash[ss_item_sk]])
                                                :     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid], where=[AND(>(ss_net_profit, 1), >(ss_net_paid, 0), >(ss_quantity, 0))])
                                                :     :     +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, ss_net_profit])
                                                :     +- Exchange(distribution=[hash[sr_item_sk]])
                                                :        +- Calc(select=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt], where=[>(sr_return_amt, 10000)])
                                                :           +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt])
                                                +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q5, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 5 in stream 0 using template query5.tpl
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '14' day)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '14' day)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '14' day)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 5 in stream 0 using template query5.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=['store channel'], id=[||('store', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :  :  +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :  :     +- LogicalProject(s_store_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :  :        +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST('1998-08-02'):DATE NOT NULL), <=($8, +(CAST('1998-08-02'):DATE NOT NULL, 1209600000)), =($0, $34))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalUnion(all=[true])
      :  :              :  :  :- LogicalProject(store_sk=[$7], date_sk=[$0], sales_price=[$15], profit=[$22], return_amt=[0], net_loss=[0])
      :  :              :  :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :              :  :  +- LogicalProject(store_sk=[$7], date_sk=[$0], sales_price=[0], profit=[0], return_amt=[$11], net_loss=[$19])
      :  :              :  :     +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
      :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
      :  +- LogicalProject(channel=['catalog channel'], id=[||('catalog_page', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :     +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :        +- LogicalProject(cp_catalog_page_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :           +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST('1998-08-02'):DATE NOT NULL), <=($8, +(CAST('1998-08-02'):DATE NOT NULL, 1209600000)), =($0, $34))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalUnion(all=[true])
      :                 :  :  :- LogicalProject(page_sk=[$12], date_sk=[$0], sales_price=[$23], profit=[$33], return_amt=[0], net_loss=[0])
      :                 :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                 :  :  +- LogicalProject(page_sk=[$12], date_sk=[$0], sales_price=[0], profit=[0], return_amt=[$18], net_loss=[$26])
      :                 :  :     +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
      :                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :                 +- LogicalTableScan(table=[[builtin, default, catalog_page, source: [TestParquetTableSource -> selectedFields=[cp_catalog_page_sk, cp_catalog_page_id, cp_start_date_sk, cp_end_date_sk, cp_department, cp_catalog_number, cp_catalog_page_number, cp_description, cp_type];filterPredicates=[]]]])
      +- LogicalProject(channel=['web channel'], id=[||('web_site', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
         +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
            +- LogicalProject(web_site_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
               +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST('1998-08-02'):DATE NOT NULL), <=($8, +(CAST('1998-08-02'):DATE NOT NULL, 1209600000)), =($0, $34))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalUnion(all=[true])
                     :  :  :- LogicalProject(wsr_web_site_sk=[$13], date_sk=[$0], sales_price=[$23], profit=[$33], return_amt=[0], net_loss=[0])
                     :  :  :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalProject(wsr_web_site_sk=[$37], date_sk=[$0], sales_price=[0], profit=[0], return_amt=[$15], net_loss=[$23])
                     :  :     +- LogicalJoin(condition=[AND(=($2, $27), =($13, $41))], joinType=[left])
                     :  :        :- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
                     :  :        +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_site_id, web_rec_start_date, web_rec_end_date, web_name, web_open_date_sk, web_close_date_sk, web_class, web_manager, web_mkt_id, web_mkt_class, web_mkt_desc, web_market_manager, web_company_id, web_company_name, web_street_number, web_street_name, web_street_type, web_suite_number, web_city, web_county, web_state, web_zip, web_country, web_gmt_offset, web_tax_percentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(channel) AS channel, CAST(id) AS id, sales, returns, profit])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :  :- Calc(select=['store channel' AS channel, ||('store', s_store_id) AS id, sales, returns, -(profit, profit_loss) AS profit])
                        :  :  +- HashAggregate(isMerge=[true], groupBy=[s_store_id], select=[s_store_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :  :     +- Exchange(distribution=[hash[s_store_id]])
                        :  :        +- LocalHashAggregate(groupBy=[s_store_id], select=[s_store_id, Partial_SUM(sales) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(returns) AS sum$2, Partial_SUM(profit_loss) AS sum$3])
                        :  :           +- HashJoin(where=[=(store_sk, s_store_sk)], join=[store_sk, sales, profit, returns, profit_loss, s_store_sk, s_store_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :              :- HashAggregate(isMerge=[true], groupBy=[store_sk], select=[store_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :  :              :  +- Exchange(distribution=[hash[store_sk]])
                        :  :              :     +- LocalHashAggregate(groupBy=[store_sk], select=[store_sk, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :  :              :        +- Calc(select=[store_sk, sales_price, profit, return_amt, net_loss])
                        :  :              :           +- HashJoin(where=[=(date_sk, d_date_sk)], join=[store_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :              :              :- Union(all=[true], union=[store_sk, date_sk, sales_price, profit, return_amt, net_loss])
                        :  :              :              :  :- Calc(select=[ss_store_sk AS store_sk, ss_sold_date_sk AS date_sk, ss_ext_sales_price AS sales_price, ss_net_profit AS profit, CAST(0.00) AS return_amt, CAST(0.00) AS net_loss])
                        :  :              :              :  :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit];filterPredicates=[]]]], fields=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit])
                        :  :              :              :  +- Calc(select=[sr_store_sk AS store_sk, sr_returned_date_sk AS date_sk, CAST(0.00) AS sales_price, CAST(0.00) AS profit, sr_return_amt AS return_amt, sr_net_loss AS net_loss])
                        :  :              :              :     +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss];filterPredicates=[]]]], fields=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss])
                        :  :              :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :  :              :                 +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-08-02), <=(d_date, 1998-08-16))])
                        :  :              :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                        :  :              +- Exchange(distribution=[broadcast])
                        :  :                 +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id];filterPredicates=[]]]], fields=[s_store_sk, s_store_id])
                        :  +- Calc(select=['catalog channel' AS channel, ||('catalog_page', cp_catalog_page_id) AS id, sales, returns, -(profit, profit_loss) AS profit])
                        :     +- HashAggregate(isMerge=[true], groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :        +- Exchange(distribution=[hash[cp_catalog_page_id]])
                        :           +- LocalHashAggregate(groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :              +- Calc(select=[cp_catalog_page_id, sales_price, profit, return_amt, net_loss])
                        :                 +- HashJoin(where=[=(date_sk, d_date_sk)], join=[date_sk, sales_price, profit, return_amt, net_loss, cp_catalog_page_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :                    :- Calc(select=[date_sk, sales_price, profit, return_amt, net_loss, cp_catalog_page_id])
                        :                    :  +- HashJoin(where=[=(page_sk, cp_catalog_page_sk)], join=[page_sk, date_sk, sales_price, profit, return_amt, net_loss, cp_catalog_page_sk, cp_catalog_page_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :                    :     :- Union(all=[true], union=[page_sk, date_sk, sales_price, profit, return_amt, net_loss])
                        :                    :     :  :- Calc(select=[cs_catalog_page_sk AS page_sk, cs_sold_date_sk AS date_sk, cs_ext_sales_price AS sales_price, cs_net_profit AS profit, CAST(0.00) AS return_amt, CAST(0.00) AS net_loss])
                        :                    :     :  :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit];filterPredicates=[]]]], fields=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit])
                        :                    :     :  +- Calc(select=[cr_catalog_page_sk AS page_sk, cr_returned_date_sk AS date_sk, CAST(0.00) AS sales_price, CAST(0.00) AS profit, cr_return_amount AS return_amt, cr_net_loss AS net_loss])
                        :                    :     :     +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss];filterPredicates=[]]]], fields=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss])
                        :                    :     +- Exchange(distribution=[broadcast])
                        :                    :        +- TableSourceScan(table=[[builtin, default, catalog_page, source: [TestParquetTableSource -> selectedFields=[cp_catalog_page_sk, cp_catalog_page_id];filterPredicates=[]]]], fields=[cp_catalog_page_sk, cp_catalog_page_id])
                        :                    +- Reused(reference_id=[1])
                        +- Calc(select=['web channel' AS channel, ||('web_site', web_site_id) AS id, sales, returns, -(profit, profit_loss) AS profit])
                           +- HashAggregate(isMerge=[true], groupBy=[web_site_id], select=[web_site_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                              +- Exchange(distribution=[hash[web_site_id]])
                                 +- LocalHashAggregate(groupBy=[web_site_id], select=[web_site_id, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                                    +- Calc(select=[web_site_id, sales_price, profit, return_amt, net_loss])
                                       +- HashJoin(where=[=(date_sk, d_date_sk)], join=[date_sk, sales_price, profit, return_amt, net_loss, web_site_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                          :- Calc(select=[date_sk, sales_price, profit, return_amt, net_loss, web_site_id])
                                          :  +- HashJoin(where=[=(wsr_web_site_sk, web_site_sk)], join=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss, web_site_sk, web_site_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                          :     :- Union(all=[true], union=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss])
                                          :     :  :- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, ws_sold_date_sk AS date_sk, ws_ext_sales_price AS sales_price, ws_net_profit AS profit, CAST(0.00) AS return_amt, CAST(0.00) AS net_loss])
                                          :     :  :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit];filterPredicates=[]]]], fields=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit])
                                          :     :  +- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, wr_returned_date_sk AS date_sk, CAST(0.00) AS sales_price, CAST(0.00) AS profit, wr_return_amt AS return_amt, wr_net_loss AS net_loss])
                                          :     :     +- HashJoin(where=[AND(=(wr_item_sk, ws_item_sk), =(wr_order_number, ws_order_number))], join=[ws_item_sk, ws_web_site_sk, ws_order_number, wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss], joinType=[RightOuterJoin], build=[right])
                                          :     :        :- Exchange(distribution=[hash[ws_item_sk, ws_order_number]])
                                          :     :        :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_item_sk, ws_web_site_sk, ws_order_number];filterPredicates=[]]]], fields=[ws_item_sk, ws_web_site_sk, ws_order_number])
                                          :     :        +- Exchange(distribution=[hash[wr_item_sk, wr_order_number]])
                                          :     :           +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss];filterPredicates=[]]]], fields=[wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss])
                                          :     +- Exchange(distribution=[broadcast])
                                          :        +- TableSourceScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_site_id];filterPredicates=[]]]], fields=[web_site_sk, web_site_id])
                                          +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q50, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 50 in stream 0 using template query50.tpl
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  AS `30 days `
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31 - 60 days `
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61 - 90 days `
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91 - 120 days `
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days `
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 1998
and d2.d_moy  = 8
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100

-- end query 50 in stream 0 using template query50.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], 30 days =[SUM($10)], 31 - 60 days =[SUM($11)], 61 - 90 days =[SUM($12)], 91 - 120 days =[SUM($13)], >120 days =[SUM($14)])
   +- LogicalProject(s_store_name=[$48], s_company_id=[$59], s_street_number=[$61], s_street_name=[$62], s_street_type=[$63], s_suite_number=[$64], s_city=[$65], s_county=[$66], s_state=[$67], s_zip=[$68], $f10=[CASE(<=(-($23, $0), 30), 1, 0)], $f11=[CASE(AND(>(-($23, $0), 30), <=(-($23, $0), 60)), 1, 0)], $f12=[CASE(AND(>(-($23, $0), 60), <=(-($23, $0), 90)), 1, 0)], $f13=[CASE(AND(>(-($23, $0), 90), <=(-($23, $0), 120)), 1, 0)], $f14=[CASE(>(-($23, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(=($106, 1998), =($108, 8), =($9, $32), =($2, $25), =($0, $72), =($23, $100), =($3, $26), =($7, $43))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC, s_company_id ASC, s_street_number ASC, s_street_name ASC, s_street_type ASC, s_suite_number ASC, s_city ASC, s_county ASC, s_state ASC, s_zip ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC, s_company_id ASC, s_street_number ASC, s_street_name ASC, s_street_type ASC, s_suite_number ASC, s_city ASC, s_county ASC, s_state ASC, s_zip ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip], select=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, SUM($f10) AS 30 days , SUM($f11) AS 31 - 60 days , SUM($f12) AS 61 - 90 days , SUM($f13) AS 91 - 120 days , SUM($f14) AS >120 days ])
         +- Exchange(distribution=[hash[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip]])
            +- Calc(select=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, CASE(<=(-(sr_returned_date_sk, ss_sold_date_sk), 30), 1, 0) AS $f10, CASE(AND(>(-(sr_returned_date_sk, ss_sold_date_sk), 30), <=(-(sr_returned_date_sk, ss_sold_date_sk), 60)), 1, 0) AS $f11, CASE(AND(>(-(sr_returned_date_sk, ss_sold_date_sk), 60), <=(-(sr_returned_date_sk, ss_sold_date_sk), 90)), 1, 0) AS $f12, CASE(AND(>(-(sr_returned_date_sk, ss_sold_date_sk), 90), <=(-(sr_returned_date_sk, ss_sold_date_sk), 120)), 1, 0) AS $f13, CASE(>(-(sr_returned_date_sk, ss_sold_date_sk), 120), 1, 0) AS $f14])
               +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk, s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :- Calc(select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk])
                  :  +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk])
                  :     :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :     :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk])
                  :     :     :  +- HashJoin(where=[AND(=(ss_ticket_number, sr_ticket_number), =(ss_item_sk, sr_item_sk), =(ss_customer_sk, sr_customer_sk))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number], joinType=[InnerJoin], build=[right])
                  :     :     :     :- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk, ss_customer_sk]])
                  :     :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])
                  :     :     :     +- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk, sr_customer_sk]])
                  :     :     :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number])
                  :     :     +- Exchange(distribution=[broadcast])
                  :     :        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk];filterPredicates=[]]]], fields=[d_date_sk])
                  :     +- Exchange(distribution=[broadcast])
                  :        +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 8))])
                  :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                  +- Exchange(distribution=[broadcast])
                     +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q51, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 51 in stream 0 using template query51.tpl
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1176 and 1176+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1176 and 1176+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100

-- end query 51 in stream 0 using template query51.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_sk=[$0], d_date=[$1], web_sales=[$2], store_sales=[$3], web_cumulative=[$4], store_cumulative=[$5])
   +- LogicalFilter(condition=[>($4, $5)])
      +- LogicalProject(item_sk=[$0], d_date=[$1], web_sales=[$2], store_sales=[$3], web_cumulative=[MAX($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], store_cumulative=[MAX($3) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         +- LogicalProject(item_sk=[CASE(IS NOT NULL($0), $0, $3)], d_date=[CASE(IS NOT NULL($1), $1, $4)], web_sales=[$2], store_sales=[$5])
            +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[full])
               :- LogicalProject(item_sk=[$0], d_date=[$1], cume_sales=[CASE(>(COUNT($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0), CAST($SUM0($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)):DECIMAL(38, 2), null)])
               :  +- LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)])
               :     +- LogicalProject(item_sk=[$3], d_date=[$36], ws_sales_price=[$21])
               :        +- LogicalFilter(condition=[AND(=($0, $34), >=($37, 1176), <=($37, +(1176, 11)), IS NOT NULL($3))])
               :           +- LogicalJoin(condition=[true], joinType=[inner])
               :              :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
               :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               +- LogicalProject(item_sk=[$0], d_date=[$1], cume_sales=[CASE(>(COUNT($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0), CAST($SUM0($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)):DECIMAL(38, 2), null)])
                  +- LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)])
                     +- LogicalProject(item_sk=[$2], d_date=[$25], ss_sales_price=[$13])
                        +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1176), <=($26, +(1176, 11)), IS NOT NULL($2))])
                           +- LogicalJoin(condition=[true], joinType=[inner])
                              :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[item_sk ASC, d_date ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[item_sk ASC, d_date ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[$2 AS item_sk, $3 AS d_date, cume_sales0 AS web_sales, cume_sales AS store_sales, w0$o0 AS web_cumulative, w0$o1 AS store_cumulative], where=[>(w0$o0, w0$o1)])
         +- OverAggregate(partitionBy=[$2], orderBy=[$3 ASC], window#0=[MAX(cume_sales0) AS w0$o0, MAX(cume_sales) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[cume_sales, cume_sales0, $2, $3, w0$o0, w0$o1])
            +- Sort(orderBy=[$2 ASC, $3 ASC])
               +- Exchange(distribution=[hash[$2]])
                  +- Calc(select=[cume_sales, cume_sales0, CASE(IS NOT NULL(item_sk0), item_sk0, item_sk) AS $2, CASE(IS NOT NULL(d_date0), d_date0, d_date) AS $3])
                     +- HashJoin(where=[AND(=(item_sk0, item_sk), =(d_date0, d_date))], join=[item_sk, d_date, cume_sales, item_sk0, d_date0, cume_sales0], joinType=[FullOuterJoin], build=[right])
                        :- Exchange(distribution=[hash[item_sk, d_date]])
                        :  +- Calc(select=[item_sk, d_date, CASE(>(w0$o0, 0), CAST(w0$o1), null) AS cume_sales])
                        :     +- OverAggregate(partitionBy=[item_sk], orderBy=[d_date ASC], window#0=[COUNT($f2) AS w0$o0, $SUM0($f2) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item_sk, d_date, $f2, w0$o0, w0$o1])
                        :        +- Sort(orderBy=[item_sk ASC, d_date ASC])
                        :           +- Exchange(distribution=[hash[item_sk]])
                        :              +- HashAggregate(isMerge=[true], groupBy=[item_sk, d_date], select=[item_sk, d_date, Final_SUM(sum$0) AS $f2])
                        :                 +- Exchange(distribution=[hash[item_sk, d_date]])
                        :                    +- LocalHashAggregate(groupBy=[item_sk, d_date], select=[item_sk, d_date, Partial_SUM(ss_sales_price) AS sum$0])
                        :                       +- Calc(select=[ss_item_sk AS item_sk, d_date, ss_sales_price])
                        :                          +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_sales_price, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :                             :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_sales_price])
                        :                             +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :                                +- Calc(select=[d_date_sk, d_date], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                        :                                   +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_month_seq])
                        +- Exchange(distribution=[hash[item_sk, d_date]])
                           +- Calc(select=[item_sk, d_date, CASE(>(w0$o0, 0), CAST(w0$o1), null) AS cume_sales])
                              +- OverAggregate(partitionBy=[item_sk], orderBy=[d_date ASC], window#0=[COUNT($f2) AS w0$o0, $SUM0($f2) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item_sk, d_date, $f2, w0$o0, w0$o1])
                                 +- Sort(orderBy=[item_sk ASC, d_date ASC])
                                    +- Exchange(distribution=[hash[item_sk]])
                                       +- HashAggregate(isMerge=[true], groupBy=[item_sk, d_date], select=[item_sk, d_date, Final_SUM(sum$0) AS $f2])
                                          +- Exchange(distribution=[hash[item_sk, d_date]])
                                             +- LocalHashAggregate(groupBy=[item_sk, d_date], select=[item_sk, d_date, Partial_SUM(ws_sales_price) AS sum$0])
                                                +- Calc(select=[ws_item_sk AS item_sk, d_date, ws_sales_price])
                                                   +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_sales_price, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                                      :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_sales_price])
                                                      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q52, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 52 in stream 0 using template query52.tpl
select  dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
     ,store_sales
     ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
    and store_sales.ss_item_sk = item.i_item_sk
    and item.i_manager_id = 1
    and dt.d_moy=11
    and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 

-- end query 52 in stream 0 using template query52.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], dir0=[ASC-nulls-first], dir1=[DESC-nulls-last], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(d_year=[$0], brand_id=[$2], brand=[$1], ext_price=[$3])
   +- LogicalAggregate(group=[{0, 1, 2}], ext_price=[SUM($3)])
      +- LogicalProject(d_year=[$6], brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 11), =($6, 1998))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[d_year, brand_id, brand, ext_price])
+- SortLimit(orderBy=[d_year ASC, ext_price DESC, brand_id ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[d_year ASC, ext_price DESC, brand_id ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[d_year, brand, brand_id]])
               +- LocalHashAggregate(groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[CAST(1998) AS d_year, i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])
                        :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[=(i_manager_id, 1)])
                        :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_brand, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 11), =(d_year, 1998))])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q53, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 53 in stream 0 using template query53.tpl
select  * from 
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1176,1176+1,1176+2,1176+3,1176+4,1176+5,1176+6,1176+7,1176+8,1176+9,1176+10,1176+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0 
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales 
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100

-- end query 53 in stream 0 using template query53.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$1], sort2=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_manufact_id=[$0], sum_sales=[$1], avg_quarterly_sales=[$2])
   +- LogicalFilter(condition=[>(CASE(>($2, 0), /(ABS(-($1, $2)), $2), null), 0.1)])
      +- LogicalProject(i_manufact_id=[$0], sum_sales=[$2], avg_quarterly_sales=[/(CAST(CASE(>(COUNT($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))])
         +- LogicalAggregate(group=[{0, 1}], sum_sales=[SUM($2)])
            +- LogicalProject(i_manufact_id=[$13], d_qoy=[$55], ss_sales_price=[$35])
               +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($48, 1176), =($48, CAST(+(1176, 1)):BIGINT NOT NULL), =($48, CAST(+(1176, 2)):BIGINT NOT NULL), =($48, CAST(+(1176, 3)):BIGINT NOT NULL), =($48, CAST(+(1176, 4)):BIGINT NOT NULL), =($48, CAST(+(1176, 5)):BIGINT NOT NULL), =($48, CAST(+(1176, 6)):BIGINT NOT NULL), =($48, CAST(+(1176, 7)):BIGINT NOT NULL), =($48, CAST(+(1176, 8)):BIGINT NOT NULL), =($48, CAST(+(1176, 9)):BIGINT NOT NULL), =($48, CAST(+(1176, 10)):BIGINT NOT NULL), =($48, CAST(+(1176, 11)):BIGINT NOT NULL)), OR(AND(OR(=($12, 'Books'), =($12, 'Children'), =($12, 'Electronics')), OR(=($10, 'personal'), =($10, 'portable'), =($10, 'reference'), =($10, 'self-help')), OR(=($8, 'scholaramalgamalg #14'), =($8, 'scholaramalgamalg #7'), =($8, 'exportiunivamalg #9'), =($8, 'scholaramalgamalg #9'))), AND(OR(=($12, 'Women'), =($12, 'Music'), =($12, 'Men')), OR(=($10, 'accessories'), =($10, 'classical'), =($10, 'fragrances'), =($10, 'pants')), OR(=($8, 'amalgimporto #1'), =($8, 'edu packscholar #1'), =($8, 'exportiimporto #1'), =($8, 'importoamalg #1')))))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[avg_quarterly_sales ASC, sum_sales ASC, i_manufact_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[avg_quarterly_sales ASC, sum_sales ASC, i_manufact_id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[i_manufact_id, sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0) AS avg_quarterly_sales], where=[CASE(>(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), >(/(ABS(-(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0))), /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)), 0.1), null)])
         +- OverAggregate(partitionBy=[i_manufact_id], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_manufact_id, sum_sales, w0$o0, w0$o1])
            +- Sort(orderBy=[i_manufact_id ASC])
               +- Exchange(distribution=[hash[i_manufact_id]])
                  +- Calc(select=[i_manufact_id, sum_sales])
                     +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id, d_qoy], select=[i_manufact_id, d_qoy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_manufact_id, d_qoy]])
                           +- LocalHashAggregate(groupBy=[i_manufact_id, d_qoy], select=[i_manufact_id, d_qoy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_manufact_id, d_qoy, ss_sales_price])
                                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_sales_price, i_manufact_id, d_qoy, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ss_store_sk, ss_sales_price, i_manufact_id, d_qoy])
                                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manufact_id, d_date_sk, d_qoy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manufact_id])
                                    :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    :     :     +- Exchange(distribution=[broadcast])
                                    :     :        +- Calc(select=[i_item_sk, i_manufact_id], where=[OR(AND(OR(=(i_category, 'Books'), =(i_category, 'Children'), =(i_category, 'Electronics')), IN(i_class, 'personal', 'portable', 'reference', 'self-help'), IN(i_brand, 'scholaramalgamalg #14', 'scholaramalgamalg #7', 'exportiunivamalg #9', 'scholaramalgamalg #9')), AND(OR(=(i_category, 'Women'), =(i_category, 'Music'), =(i_category, 'Men')), IN(i_class, 'accessories', 'classical', 'fragrances', 'pants'), IN(i_brand, 'amalgimporto #1', 'edu packscholar #1', 'exportiimporto #1', 'importoamalg #1')))])
                                    :     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_class, i_category, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_class, i_category, i_manufact_id])
                                    :     +- Exchange(distribution=[broadcast])
                                    :        +- Calc(select=[d_date_sk, d_qoy], where=[IN(d_month_seq, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187)])
                                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq, d_qoy])
                                    +- Exchange(distribution=[broadcast])
                                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q54, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 54 in stream 0 using template query54.tpl
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Women'
         and i_class = 'dresses'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 1
         and d_year = 1998
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1998 and d_moy = 1)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1998 and d_moy = 1)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100

-- end query 54 in stream 0 using template query54.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(segment=[$0], num_customers=[$1], segment_base=[*($0, 50)])
   +- LogicalAggregate(group=[{0}], num_customers=[COUNT()])
      +- LogicalProject(segment=[CAST(/($1, 50)):INTEGER])
         +- LogicalAggregate(group=[{0}], revenue=[SUM($1)])
            +- LogicalProject(c_customer_sk=[$0], ss_ext_sales_price=[$17])
               +- LogicalFilter(condition=[AND(=($1, $25), =($32, $61), =($33, $62), =($2, $67), =($0, $5), >=($70, $SCALAR_QUERY({
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[+($3, 1)])
    LogicalFilter(condition=[AND(=($6, 1998), =($8, 1))])
      LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})), <=($70, $SCALAR_QUERY({
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[+($3, 3)])
    LogicalFilter(condition=[AND(=($6, 1998), =($8, 1))])
      LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalAggregate(group=[{0, 1}])
                     :  :  :  :  +- LogicalProject(c_customer_sk=[$53], c_current_addr_sk=[$57])
                     :  :  :  :     +- LogicalFilter(condition=[AND(=($0, $25), =($2, $3), =($15, 'Women'), =($13, 'dresses'), =($53, $1), =($33, 1), =($31, 1998))])
                     :  :  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :           :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :           :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :           :  :  :- LogicalUnion(all=[true])
                     :  :  :  :           :  :  :  :- LogicalProject(sold_date_sk=[$0], customer_sk=[$3], item_sk=[$15])
                     :  :  :  :           :  :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                     :  :  :  :           :  :  :  +- LogicalProject(sold_date_sk=[$0], customer_sk=[$4], item_sk=[$3])
                     :  :  :  :           :  :  :     +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  :  :  :           :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     :  :  :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  :  :  :           +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                     :  :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[segment, num_customers, *(segment, 50) AS segment_base])
+- SortLimit(orderBy=[segment ASC, num_customers ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[segment ASC, num_customers ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[segment], select=[segment, Final_COUNT(count$0) AS num_customers])
            +- Exchange(distribution=[hash[segment]])
               +- LocalHashAggregate(groupBy=[segment], select=[segment, Partial_COUNT(*) AS count$0])
                  +- Calc(select=[CAST(/(revenue, 50)) AS segment])
                     +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM(ss_ext_sales_price) AS revenue])
                        +- Calc(select=[c_customer_sk, ss_ext_sales_price])
                           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, c_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, c_customer_sk])
                              :  +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_ext_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
                              :     :- Exchange(distribution=[hash[ss_customer_sk]])
                              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_ext_sales_price])
                              :     +- Calc(select=[c_customer_sk])
                              :        +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :           :- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], auxGrouping=[c_current_addr_sk], select=[c_customer_sk, c_current_addr_sk])
                              :           :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, c_customer_sk, c_current_addr_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :           :     :- Exchange(distribution=[hash[c_customer_sk]])
                              :           :     :  +- HashAggregate(isMerge=[false], groupBy=[cs_sold_date_sk, c_customer_sk], auxGrouping=[c_current_addr_sk], select=[cs_sold_date_sk, c_customer_sk, c_current_addr_sk])
                              :           :     :     +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, c_customer_sk, c_current_addr_sk, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :           :     :        :- Calc(select=[cs_sold_date_sk, cs_item_sk, c_customer_sk, c_current_addr_sk])
                              :           :     :        :  +- HashJoin(where=[=(c_customer_sk, cs_bill_customer_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, c_customer_sk, c_current_addr_sk], joinType=[InnerJoin], build=[right])
                              :           :     :        :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                              :           :     :        :     :  +- HashAggregate(isMerge=[true], groupBy=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
                              :           :     :        :     :     +- Exchange(distribution=[hash[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk]])
                              :           :     :        :     :        +- LocalHashAggregate(groupBy=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
                              :           :     :        :     :           +- Union(all=[true], union=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
                              :           :     :        :     :              :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
                              :           :     :        :     :              +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk, ws_item_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_item_sk])
                              :           :     :        :     +- Exchange(distribution=[hash[c_customer_sk]])
                              :           :     :        :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
                              :           :     :        +- Exchange(distribution=[broadcast])
                              :           :     :           +- Calc(select=[i_item_sk], where=[AND(=(i_category, 'Women'), =(i_class, 'dresses'))])
                              :           :     :              +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_class, i_category])
                              :           :     +- Exchange(distribution=[broadcast])
                              :           :        +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 1), =(d_year, 1998))])
                              :           :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                              :           +- Exchange(distribution=[broadcast])
                              :              +- Calc(select=[ca_address_sk])
                              :                 +- HashJoin(where=[AND(=(ca_county, s_county), =(ca_state, s_state))], join=[ca_address_sk, ca_county, ca_state, s_county, s_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :                    :- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_county, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_county, ca_state])
                              :                    +- Exchange(distribution=[broadcast])
                              :                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_county, s_state];filterPredicates=[]]]], fields=[s_county, s_state])
                              +- Exchange(distribution=[broadcast])
                                 +- Calc(select=[d_date_sk])
                                    +- NestedLoopJoin(where=[<=(d_month_seq, $f0)], join=[d_date_sk, d_month_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                                       :- Calc(select=[d_date_sk, d_month_seq])
                                       :  +- NestedLoopJoin(where=[>=(d_month_seq, $f0)], join=[d_date_sk, d_month_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                                       :     :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
                                       :     +- Exchange(distribution=[broadcast])
                                       :        +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                                       :           +- Exchange(distribution=[single])
                                       :              +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(EXPR$0) AS (value$0, count$1)])
                                       :                 +- HashAggregate(isMerge=[true], groupBy=[EXPR$0], select=[EXPR$0])
                                       :                    +- Exchange(distribution=[hash[EXPR$0]])
                                       :                       +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
                                       :                          +- Calc(select=[+(d_month_seq, 1) AS EXPR$0], where=[AND(=(d_year, 1998), =(d_moy, 1))])
                                       :                             +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_month_seq, d_year, d_moy];filterPredicates=[]]]], fields=[d_month_seq, d_year, d_moy])
                                       +- Exchange(distribution=[broadcast])
                                          +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                                             +- Exchange(distribution=[single])
                                                +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(EXPR$0) AS (value$0, count$1)])
                                                   +- HashAggregate(isMerge=[true], groupBy=[EXPR$0], select=[EXPR$0])
                                                      +- Exchange(distribution=[hash[EXPR$0]])
                                                         +- LocalHashAggregate(groupBy=[EXPR$0], select=[EXPR$0])
                                                            +- Calc(select=[+(d_month_seq, 3) AS EXPR$0], where=[AND(=(d_year, 1998), =(d_moy, 1))])
                                                               +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_month_seq, d_year, d_moy];filterPredicates=[]]]], fields=[d_month_seq, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q55, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 55 in stream 0 using template query55.tpl
select  i_brand_id brand_id, i_brand brand,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item
 where d_date_sk = ss_sold_date_sk
 	and ss_item_sk = i_item_sk
 	and i_manager_id=1
 	and d_moy=11
 	and d_year=1998
 group by i_brand, i_brand_id
 order by ext_price desc, i_brand_id
limit 100 

-- end query 55 in stream 0 using template query55.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(brand_id=[$1], brand=[$0], ext_price=[$2])
   +- LogicalAggregate(group=[{0, 1}], ext_price=[SUM($2)])
      +- LogicalProject(brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 11), =($6, 1998))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[brand_id, brand, ext_price])
+- SortLimit(orderBy=[ext_price DESC, brand_id ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ext_price DESC, brand_id ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[brand, brand_id], select=[brand, brand_id, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[brand, brand_id]])
               +- LocalHashAggregate(groupBy=[brand, brand_id], select=[brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])
                        :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[=(i_manager_id, 1)])
                        :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_brand, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 11), =(d_year, 1998))])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q56, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 56 in stream 0 using template query56.tpl
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('yellow','almond','antique'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('yellow','almond','antique'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('yellow','almond','antique'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100

-- end query 56 in stream 0 using template query56.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_item_id=[$65], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($65, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, 'yellow'), =($17, 'almond'), =($17, 'antique'))])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($2, $64), =($0, $23), =($29, 1998), =($31, 1), =($6, $51), =(CAST($62):DECIMAL(12, 2), -5))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :              :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :              :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :  :              +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :  +- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_item_id=[$76], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, 'yellow'), =($17, 'almond'), =($17, 'antique'))])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($15, $75), =($0, $34), =($40, 1998), =($42, 1), =($6, $62), =(CAST($73):DECIMAL(12, 2), -5))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                 :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :                 :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :                 +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      +- LogicalProject(i_item_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_item_id=[$76], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, 'yellow'), =($17, 'almond'), =($17, 'antique'))])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($3, $75), =($0, $34), =($40, 1998), =($42, 1), =($7, $62), =(CAST($73):DECIMAL(12, 2), -5))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[total_sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_sales ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id], select=[i_item_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_item_id, total_sales])
            :- Union(all=[true], union=[i_item_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_item_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :        +- Calc(select=[ss_ext_sales_price, i_item_id])
            :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_item_id])
            :  :              :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
            :  :              :     :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :  :              :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :              :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              :     :     +- Exchange(distribution=[hash[ca_address_sk]], reuse_id=[1])
            :  :              :     :        +- Calc(select=[ca_address_sk], where=[=(CAST(ca_gmt_offset), -5)])
            :  :              :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_gmt_offset];filterPredicates=[]]]], fields=[ca_address_sk, ca_gmt_offset])
            :  :              :     +- Exchange(distribution=[broadcast], reuse_id=[2])
            :  :              :        +- HashSemiJoin(where=[=(i_item_id, i_item_id0)], join=[i_item_sk, i_item_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :  :              :           :- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
            :  :              :           +- Exchange(distribution=[broadcast])
            :  :              :              +- Calc(select=[i_item_id], where=[OR(=(i_color, 'yellow'), =(i_color, 'almond'), =(i_color, 'antique'))])
            :  :              :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_id, i_color];filterPredicates=[]]]], fields=[i_item_id, i_color])
            :  :              +- Exchange(distribution=[broadcast], reuse_id=[3])
            :  :                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 1))])
            :  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_item_id]])
            :        +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :           +- Calc(select=[i_item_id, cs_ext_sales_price])
            :              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_item_id])
            :                 :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :  +- HashJoin(where=[=(cs_bill_addr_sk, ca_address_sk)], join=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :                 :     :     :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :                 :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :     +- Reused(reference_id=[1])
            :                 :     +- Reused(reference_id=[2])
            :                 +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_item_id]])
                  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
                     +- Calc(select=[i_item_id, ws_ext_sales_price])
                        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_item_id])
                           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
                           :     :  +- HashJoin(where=[=(ws_bill_addr_sk, ca_address_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
                           :     :     :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                           :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :     :     +- Reused(reference_id=[1])
                           :     +- Reused(reference_id=[2])
                           +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q57, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 57 in stream 0 using template query57.tpl
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 1999 or
         ( d_year = 1999-1 and d_moy =12) or
         ( d_year = 1999+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 1999 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100

-- end query 57 in stream 0 using template query57.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(i_category=[$0], d_year=[$1], avg_monthly_sales=[$2], sum_sales=[$3], psum=[$4], nsum=[$5])
+- LogicalSort(sort0=[$6], sort1=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], d_year=[$1], avg_monthly_sales=[$2], sum_sales=[$3], psum=[$4], nsum=[$5], EXPR$6=[-($3, $2)])
      +- LogicalFilter(condition=[AND(=($1, 1999), >($2, 0), >(CASE(>($2, 0), /(ABS(-($3, $2)), $2), null), 0.1))])
         +- LogicalProject(i_category=[$0], d_year=[$3], avg_monthly_sales=[$6], sum_sales=[$5], psum=[$13], nsum=[$21])
            +- LogicalFilter(condition=[AND(=($0, $8), =($0, $16), =($1, $9), =($1, $17), =($2, $10), =($2, $18), =($7, +($15, 1)), =($7, -($23, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CAST(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :  :     +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                  :  :        +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 1999), AND(=($62, CAST(-(1999, 1)):BIGINT NOT NULL), =($64, 12)), AND(=($62, CAST(+(1999, 1)):BIGINT NOT NULL), =($64, 1))))])
                  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                  :  :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :  :              +- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
                  :  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CAST(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                  :           +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 1999), AND(=($62, CAST(-(1999, 1)):BIGINT NOT NULL), =($64, 12)), AND(=($62, CAST(+(1999, 1)):BIGINT NOT NULL), =($64, 1))))])
                  :              +- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                  :                 :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                  :                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :                 +- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
                  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CAST(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
                     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                           +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 1999), AND(=($62, CAST(-(1999, 1)):BIGINT NOT NULL), =($64, 12)), AND(=($62, CAST(+(1999, 1)):BIGINT NOT NULL), =($64, 1))))])
                              +- LogicalJoin(condition=[true], joinType=[inner])
                                 :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                                 :  :  +- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                                 +- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_category, d_year, avg_monthly_sales, sum_sales, psum, nsum])
+- SortLimit(orderBy=[EXPR$6 ASC, avg_monthly_sales ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$6 ASC, avg_monthly_sales ASC], offset=[0], limit=[100], global=[false])
         +- Calc(select=[i_category0 AS i_category, CAST(1999) AS d_year, avg_monthly_sales, sum_sales0 AS sum_sales, sum_sales00 AS psum, sum_sales AS nsum, -(sum_sales0, avg_monthly_sales) AS EXPR$6])
            +- HashJoin(where=[AND(=(i_category0, i_category), =(i_brand0, i_brand), =(cc_name0, cc_name), =(rn, $f8))], join=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, sum_sales0, avg_monthly_sales, rn, sum_sales00], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :- Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], exchange_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, -(w0$o0, 1) AS $f8])
               :     +- OverAggregate(partitionBy=[i_category, i_brand, cc_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o0], reuse_id=[1])
               :        +- Sort(orderBy=[i_category ASC, i_brand ASC, cc_name ASC, d_year ASC, d_moy ASC], reuse_id=[2])
               :           +- Exchange(distribution=[hash[i_category, i_brand, cc_name]])
               :              +- HashAggregate(isMerge=[true], groupBy=[i_category, i_brand, cc_name, d_year, d_moy], select=[i_category, i_brand, cc_name, d_year, d_moy, Final_SUM(sum$0) AS sum_sales])
               :                 +- Exchange(distribution=[hash[i_category, i_brand, cc_name, d_year, d_moy]])
               :                    +- LocalHashAggregate(groupBy=[i_category, i_brand, cc_name, d_year, d_moy], select=[i_category, i_brand, cc_name, d_year, d_moy, Partial_SUM(cs_sales_price) AS sum$0])
               :                       +- Calc(select=[i_category, i_brand, cc_name, d_year, d_moy, cs_sales_price])
               :                          +- HashJoin(where=[=(cc_call_center_sk, cs_call_center_sk)], join=[cs_call_center_sk, cs_sales_price, i_brand, i_category, d_year, d_moy, cc_call_center_sk, cc_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                             :- Calc(select=[cs_call_center_sk, cs_sales_price, i_brand, i_category, d_year, d_moy])
               :                             :  +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_call_center_sk, cs_sales_price, i_brand, i_category, d_date_sk, d_year, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                             :     :- Calc(select=[cs_sold_date_sk, cs_call_center_sk, cs_sales_price, i_brand, i_category])
               :                             :     :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price, i_item_sk, i_brand, i_category], joinType=[InnerJoin], build=[right])
               :                             :     :     :- Exchange(distribution=[hash[cs_item_sk]])
               :                             :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price])
               :                             :     :     +- Exchange(distribution=[hash[i_item_sk]])
               :                             :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_category])
               :                             :     +- Exchange(distribution=[broadcast])
               :                             :        +- Calc(select=[d_date_sk, d_year, d_moy], where=[OR(=(d_year, 1999), AND(=(d_year, 1998), =(d_moy, 12)), AND(=(d_year, 2000), =(d_moy, 1)))])
               :                             :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
               :                             +- Exchange(distribution=[broadcast])
               :                                +- TableSourceScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_name];filterPredicates=[]]]], fields=[cc_call_center_sk, cc_name])
               +- Exchange(distribution=[broadcast])
                  +- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, cc_name0 AS cc_name, sum_sales0 AS sum_sales, avg_monthly_sales, rn, sum_sales AS sum_sales0])
                     +- HashJoin(where=[AND(=(i_category0, i_category), =(i_brand0, i_brand), =(cc_name0, cc_name), =(rn, $f8))], join=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, sum_sales0, avg_monthly_sales, rn], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], exchange_mode=[BATCH])
                        :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, +(w0$o0, 1) AS $f8])
                        :     +- Reused(reference_id=[1])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[i_category, i_brand, cc_name, sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0) AS avg_monthly_sales, w1$o0 AS rn], where=[AND(=(d_year, 1999), >(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), CASE(>(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), >(/(ABS(-(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0))), /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)), 0.1), null))])
                              +- OverAggregate(partitionBy=[i_category, i_brand, cc_name, d_year], window#0=[COUNT(sum_sales) AS w1$o0, $SUM0(sum_sales) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1, w1$o0, w0$o0])
                                 +- OverAggregate(partitionBy=[i_category, i_brand, cc_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1])
                                    +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q58, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 58 in stream 0 using template query58.tpl
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-01-02'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-01-02'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-01-02'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100

-- end query 58 in stream 0 using template query58.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_id=[$0], ss_item_rev=[$1], ss_dev=[*(/($1, /(+(+($1, $3), $5), 3)), 100)], cs_item_rev=[$3], cs_dev=[*(/($3, /(+(+($1, $3), $5), 3)), 100)], ws_item_rev=[$5], ws_dev=[*(/($5, /(+(+($1, $3), $5), 3)), 100)], average=[/(+(+($1, $3), $5), 3)])
   +- LogicalFilter(condition=[AND(=($0, $2), =($0, $4), >=($1, *(0.9, $3)), <=($1, *(1.1, $3)), >=($1, *(0.9, $5)), <=($1, *(1.1, $5)), >=($3, *(0.9, $1)), <=($3, *(1.1, $1)), >=($3, *(0.9, $5)), <=($3, *(1.1, $5)), >=($5, *(0.9, $1)), <=($5, *(1.1, $1)), >=($5, *(0.9, $3)), <=($5, *(1.1, $3)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0}], ss_item_rev=[SUM($1)])
         :  :  +- LogicalProject(item_id=[$24], ss_ext_sales_price=[$15])
         :  :     +- LogicalFilter(condition=[AND(=($2, $23), IN($47, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, '1998-01-02')])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $45))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :           :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalAggregate(group=[{0}], cs_item_rev=[SUM($1)])
         :     +- LogicalProject(item_id=[$35], cs_ext_sales_price=[$23])
         :        +- LogicalFilter(condition=[AND(=($15, $34), IN($58, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, '1998-01-02')])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $56))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0}], ws_item_rev=[SUM($1)])
            +- LogicalProject(item_id=[$35], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(=($3, $34), IN($58, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, '1998-01-02')])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $56))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[item_id0 AS item_id, ss_item_rev, *(/(ss_item_rev, /(+(+(ss_item_rev, cs_item_rev), ws_item_rev), 3)), 100) AS ss_dev, cs_item_rev, *(/(cs_item_rev, /(+(+(ss_item_rev, cs_item_rev), ws_item_rev), 3)), 100) AS cs_dev, ws_item_rev, *(/(ws_item_rev, /(+(+(ss_item_rev, cs_item_rev), ws_item_rev), 3)), 100) AS ws_dev, /(+(+(ss_item_rev, cs_item_rev), ws_item_rev), 3) AS average])
+- SortLimit(orderBy=[item_id0 ASC, ss_item_rev ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[item_id0 ASC, ss_item_rev ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(=(item_id0, item_id), >=(ss_item_rev, *(0.9, ws_item_rev)), <=(ss_item_rev, *(1.1, ws_item_rev)), >=(cs_item_rev, *(0.9, ws_item_rev)), <=(cs_item_rev, *(1.1, ws_item_rev)), >=(ws_item_rev, *(0.9, ss_item_rev)), <=(ws_item_rev, *(1.1, ss_item_rev)), >=(ws_item_rev, *(0.9, cs_item_rev)), <=(ws_item_rev, *(1.1, cs_item_rev)))], join=[item_id, ws_item_rev, item_id0, cs_item_rev, ss_item_rev], joinType=[InnerJoin], build=[right])
            :- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS ws_item_rev])
            :  +- Exchange(distribution=[hash[item_id]])
            :     +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
            :        +- Calc(select=[i_item_id AS item_id, ws_ext_sales_price])
            :           +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_item_id])
            :              :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
            :              :     :- Exchange(distribution=[hash[ws_item_sk]])
            :              :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
            :              :     +- Exchange(distribution=[hash[i_item_sk]])
            :              :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
            :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :                 +- Calc(select=[d_date_sk])
            :                    +- HashSemiJoin(where=[=(d_date, d_date0)], join=[d_date_sk, d_date], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :                       :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
            :                       +- Exchange(distribution=[broadcast])
            :                          +- Calc(select=[d_date])
            :                             +- NestedLoopJoin(where=[=(d_week_seq, $f0)], join=[d_date, d_week_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
            :                                :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date, d_week_seq];filterPredicates=[]]]], fields=[d_date, d_week_seq])
            :                                +- Exchange(distribution=[broadcast])
            :                                   +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
            :                                      +- Exchange(distribution=[single])
            :                                         +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
            :                                            +- Calc(select=[d_week_seq], where=[=(d_date, '1998-01-02')])
            :                                               +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date, d_week_seq];filterPredicates=[]]]], fields=[d_date, d_week_seq])
            +- Calc(select=[item_id, cs_item_rev, ss_item_rev])
               +- HashJoin(where=[AND(=(item_id0, item_id), >=(ss_item_rev, *(0.9, cs_item_rev)), <=(ss_item_rev, *(1.1, cs_item_rev)), >=(cs_item_rev, *(0.9, ss_item_rev)), <=(cs_item_rev, *(1.1, ss_item_rev)))], join=[item_id, cs_item_rev, item_id0, ss_item_rev], joinType=[InnerJoin], build=[left])
                  :- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS cs_item_rev])
                  :  +- Exchange(distribution=[hash[item_id]])
                  :     +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
                  :        +- Calc(select=[i_item_id AS item_id, cs_ext_sales_price])
                  :           +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :              :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_item_id])
                  :              :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                  :              :     :- Exchange(distribution=[hash[cs_item_sk]])
                  :              :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
                  :              :     +- Exchange(distribution=[hash[i_item_sk]])
                  :              :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                  :              +- Reused(reference_id=[1])
                  +- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS ss_item_rev])
                     +- Exchange(distribution=[hash[item_id]])
                        +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                           +- Calc(select=[i_item_id AS item_id, ss_ext_sales_price])
                              +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_item_id])
                                 :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                                 :     :- Exchange(distribution=[hash[ss_item_sk]])
                                 :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                                 :     +- Exchange(distribution=[hash[i_item_sk]])
                                 :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                                 +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q59, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 59 in stream 0 using template query59.tpl
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales2,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1176 and 1176 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1176+ 12 and 1176 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100

-- end query 59 in stream 0 using template query59.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(s_store_name1=[$0], s_store_id1=[$2], d_week_seq1=[$1], EXPR$3=[/($3, $13)], EXPR$4=[/($4, $14)], EXPR$5=[/($5, $15)], EXPR$6=[/($6, $16)], EXPR$7=[/($7, $17)], EXPR$8=[/($8, $18)], EXPR$9=[/($9, $19)])
   +- LogicalFilter(condition=[AND(=($2, $12), =($1, -($11, 52)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(s_store_name1=[$14], d_week_seq1=[$0], s_store_id1=[$10], sun_sales1=[$2], mon_sales1=[$3], tue_sales1=[$4], wed_sales1=[$5], thu_sales1=[$6], fri_sales1=[$7], sat_sales1=[$8])
         :  +- LogicalFilter(condition=[AND(=($42, $0), =($1, $9), >=($41, 1176), <=($41, +(1176, 11)))])
         :     +- LogicalJoin(condition=[true], joinType=[inner])
         :        :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
         :        :  :  +- LogicalProject(d_week_seq=[$27], ss_store_sk=[$7], $f2=[CASE(=($37, 'Sunday'), $13, null)], $f3=[CASE(=($37, 'Monday'), $13, null)], $f4=[CASE(=($37, 'Tuesday'), $13, null)], $f5=[CASE(=($37, 'Wednesday'), $13, null)], $f6=[CASE(=($37, 'Thursday'), $13, null)], $f7=[CASE(=($37, 'Friday'), $13, null)], $f8=[CASE(=($37, 'Saturday'), $13, null)])
         :        :  :     +- LogicalFilter(condition=[=($23, $0)])
         :        :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :           :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :        :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :        :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalProject(s_store_name2=[$14], d_week_seq2=[$0], s_store_id2=[$10], sun_sales2=[$2], mon_sales2=[$3], tue_sales2=[$4], wed_sales2=[$5], thu_sales2=[$6], fri_sales2=[$7], sat_sales2=[$8])
            +- LogicalFilter(condition=[AND(=($42, $0), =($1, $9), >=($41, +(1176, 12)), <=($41, +(1176, 23)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
                  :  :  +- LogicalProject(d_week_seq=[$27], ss_store_sk=[$7], $f2=[CASE(=($37, 'Sunday'), $13, null)], $f3=[CASE(=($37, 'Monday'), $13, null)], $f4=[CASE(=($37, 'Tuesday'), $13, null)], $f5=[CASE(=($37, 'Wednesday'), $13, null)], $f6=[CASE(=($37, 'Thursday'), $13, null)], $f7=[CASE(=($37, 'Friday'), $13, null)], $f8=[CASE(=($37, 'Saturday'), $13, null)])
                  :  :     +- LogicalFilter(condition=[=($23, $0)])
                  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :           :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[s_store_name1, s_store_id1, d_week_seq1, /(sun_sales1, sun_sales2) AS EXPR$3, /(mon_sales1, mon_sales2) AS EXPR$4, /(tue_sales1, tue_sales2) AS EXPR$5, /(wed_sales1, wed_sales2) AS EXPR$6, /(thu_sales1, thu_sales2) AS EXPR$7, /(fri_sales1, fri_sales2) AS EXPR$8, /(sat_sales1, sat_sales2) AS EXPR$9])
+- SortLimit(orderBy=[s_store_name1 ASC, s_store_id1 ASC, d_week_seq1 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[s_store_name1 ASC, s_store_id1 ASC, d_week_seq1 ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(=(s_store_id1, s_store_id2), =(d_week_seq1, $f10))], join=[s_store_id2, sun_sales2, mon_sales2, tue_sales2, wed_sales2, thu_sales2, fri_sales2, sat_sales2, $f10, s_store_name1, d_week_seq1, s_store_id1, sun_sales1, mon_sales1, tue_sales1, wed_sales1, thu_sales1, fri_sales1, sat_sales1], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[s_store_id2, $f10]])
            :  +- Calc(select=[s_store_id AS s_store_id2, sun_sales AS sun_sales2, mon_sales AS mon_sales2, tue_sales AS tue_sales2, wed_sales AS wed_sales2, thu_sales AS thu_sales2, fri_sales AS fri_sales2, sat_sales AS sat_sales2, -(d_week_seq, 52) AS $f10])
            :     +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, s_store_sk, s_store_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :- Calc(select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales])
            :        :  +- HashJoin(where=[=(d_week_seq0, d_week_seq)], join=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, d_week_seq0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :     :- HashAggregate(isMerge=[true], groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales], reuse_id=[1])
            :        :     :  +- Exchange(distribution=[hash[d_week_seq, ss_store_sk]])
            :        :     :     +- LocalHashAggregate(groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1, Partial_SUM($f4) AS sum$2, Partial_SUM($f5) AS sum$3, Partial_SUM($f6) AS sum$4, Partial_SUM($f7) AS sum$5, Partial_SUM($f8) AS sum$6])
            :        :     :        +- Calc(select=[d_week_seq, ss_store_sk, CASE(=(d_day_name, 'Sunday'), ss_sales_price, null) AS $f2, CASE(=(d_day_name, 'Monday'), ss_sales_price, null) AS $f3, CASE(=(d_day_name, 'Tuesday'), ss_sales_price, null) AS $f4, CASE(=(d_day_name, 'Wednesday'), ss_sales_price, null) AS $f5, CASE(=(d_day_name, 'Thursday'), ss_sales_price, null) AS $f6, CASE(=(d_day_name, 'Friday'), ss_sales_price, null) AS $f7, CASE(=(d_day_name, 'Saturday'), ss_sales_price, null) AS $f8])
            :        :     :           +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, d_date_sk, d_week_seq, d_day_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :     :              :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])
            :        :     :              +- Exchange(distribution=[broadcast])
            :        :     :                 +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_week_seq, d_day_name];filterPredicates=[]]]], fields=[d_date_sk, d_week_seq, d_day_name])
            :        :     +- Exchange(distribution=[broadcast])
            :        :        +- Calc(select=[d_week_seq], where=[AND(>=(d_month_seq, 1188), <=(d_month_seq, 1199))])
            :        :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_month_seq, d_week_seq];filterPredicates=[]]]], fields=[d_month_seq, d_week_seq])
            :        +- Exchange(distribution=[broadcast])
            :           +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id];filterPredicates=[]]]], fields=[s_store_sk, s_store_id])
            +- Exchange(distribution=[hash[s_store_id1, d_week_seq1]], exchange_mode=[BATCH])
               +- Calc(select=[s_store_name AS s_store_name1, d_week_seq AS d_week_seq1, s_store_id AS s_store_id1, sun_sales AS sun_sales1, mon_sales AS mon_sales1, tue_sales AS tue_sales1, wed_sales AS wed_sales1, thu_sales AS thu_sales1, fri_sales AS fri_sales1, sat_sales AS sat_sales1])
                  +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, s_store_sk, s_store_id, s_store_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales])
                     :  +- HashJoin(where=[=(d_week_seq0, d_week_seq)], join=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, d_week_seq0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Reused(reference_id=[1])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[d_week_seq], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_month_seq, d_week_seq];filterPredicates=[]]]], fields=[d_month_seq, d_week_seq])
                     +- Exchange(distribution=[broadcast])
                        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_id, s_store_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q6, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 6 in stream 0 using template query6.tpl
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 1998
 	        and d_moy = 1 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100

-- end query 6 in stream 0 using template query6.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalFilter(condition=[>=($1, 10)])
   +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
      +- LogicalProject(state=[$8])
         +- LogicalFilter(condition=[AND(=($0, $17), =($13, $34), =($31, $54), =($33, $82), =($57, $SCALAR_QUERY({
LogicalAggregate(group=[{0}])
  LogicalProject(d_month_seq=[$3])
    LogicalFilter(condition=[AND(=($6, 1998), =($8, 1))])
      LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})), >($87, *(1.2, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(i_current_price=[$5])
    LogicalFilter(condition=[=($12, $cor0.i_category)])
      LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}))))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[cnt ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[cnt ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[state, cnt], where=[>=(cnt, 10)])
         +- HashAggregate(isMerge=[true], groupBy=[state], select=[state, Final_COUNT(count$0) AS cnt])
            +- Exchange(distribution=[hash[state]])
               +- LocalHashAggregate(groupBy=[state], select=[state, Partial_COUNT(*) AS count$0])
                  +- Calc(select=[ca_state AS state])
                     +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_customer_sk, c_customer_sk, ca_state], joinType=[InnerJoin], build=[right])
                        :- Exchange(distribution=[hash[ss_customer_sk]])
                        :  +- Calc(select=[ss_customer_sk])
                        :     +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :- Calc(select=[ss_sold_date_sk, ss_customer_sk])
                        :        :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])
                        :        :     +- Exchange(distribution=[broadcast])
                        :        :        +- Calc(select=[i_item_sk])
                        :        :           +- HashJoin(where=[AND(=(i_category, i_category0), >(i_current_price, *(1.2, EXPR$0)))], join=[i_item_sk, i_current_price, i_category, i_category0, EXPR$0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :              :- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_category])
                        :        :              +- Exchange(distribution=[broadcast])
                        :        :                 +- HashAggregate(isMerge=[true], groupBy=[i_category], select=[i_category, Final_AVG(sum$0, count$1) AS EXPR$0])
                        :        :                    +- Exchange(distribution=[hash[i_category]])
                        :        :                       +- LocalHashAggregate(groupBy=[i_category], select=[i_category, Partial_AVG(i_current_price) AS (sum$0, count$1)])
                        :        :                          +- Calc(select=[i_current_price, i_category], where=[IS NOT NULL(i_category)])
                        :        :                             +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_current_price, i_category];filterPredicates=[]]]], fields=[i_current_price, i_category])
                        :        +- Exchange(distribution=[broadcast])
                        :           +- Calc(select=[d_date_sk])
                        :              +- NestedLoopJoin(where=[=(d_month_seq, $f0)], join=[d_date_sk, d_month_seq, $f0], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
                        :                 :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
                        :                 +- Exchange(distribution=[broadcast])
                        :                    +- SortAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                        :                       +- Exchange(distribution=[single])
                        :                          +- LocalSortAggregate(select=[Partial_SINGLE_VALUE(d_month_seq) AS (value$0, count$1)])
                        :                             +- HashAggregate(isMerge=[true], groupBy=[d_month_seq], select=[d_month_seq])
                        :                                +- Exchange(distribution=[hash[d_month_seq]])
                        :                                   +- LocalHashAggregate(groupBy=[d_month_seq], select=[d_month_seq])
                        :                                      +- Calc(select=[d_month_seq], where=[AND(=(d_year, 1998), =(d_moy, 1))])
                        :                                         +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_month_seq, d_year, d_moy];filterPredicates=[]]]], fields=[d_month_seq, d_year, d_moy])
                        +- Exchange(distribution=[hash[c_customer_sk]])
                           +- Calc(select=[c_customer_sk, ca_state])
                              +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
                                 :- Exchange(distribution=[hash[c_current_addr_sk]])
                                 :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
                                 +- Exchange(distribution=[hash[ca_address_sk]])
                                    +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q60, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 60 in stream 0 using template query60.tpl
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 8
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 8
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1998
 and     d_moy                   = 8
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100

-- end query 60 in stream 0 using template query60.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_item_id=[$65], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($65, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, 'Children')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($2, $64), =($0, $23), =($29, 1998), =($31, 8), =($6, $51), =(CAST($62):DECIMAL(12, 2), -5))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :              :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :              :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :  :              +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :  +- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_item_id=[$76], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, 'Children')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($15, $75), =($0, $34), =($40, 1998), =($42, 8), =($6, $62), =(CAST($73):DECIMAL(12, 2), -5))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :                 :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :                 :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :                 +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      +- LogicalProject(i_item_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_item_id=[$76], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, 'Children')])
    LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
}), =($3, $75), =($0, $34), =($40, 1998), =($42, 8), =($7, $62), =(CAST($73):DECIMAL(12, 2), -5))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, total_sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, total_sales ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id], select=[i_item_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_item_id, total_sales])
            :- Union(all=[true], union=[i_item_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_item_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :        +- Calc(select=[ss_ext_sales_price, i_item_id])
            :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_item_id])
            :  :              :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
            :  :              :     :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :  :              :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :              :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              :     :     +- Exchange(distribution=[hash[ca_address_sk]], reuse_id=[1])
            :  :              :     :        +- Calc(select=[ca_address_sk], where=[=(CAST(ca_gmt_offset), -5)])
            :  :              :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_gmt_offset];filterPredicates=[]]]], fields=[ca_address_sk, ca_gmt_offset])
            :  :              :     +- Exchange(distribution=[broadcast], reuse_id=[2])
            :  :              :        +- HashSemiJoin(where=[=(i_item_id, i_item_id0)], join=[i_item_sk, i_item_id], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :  :              :           :- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
            :  :              :           +- Exchange(distribution=[broadcast])
            :  :              :              +- Calc(select=[i_item_id], where=[=(i_category, 'Children')])
            :  :              :                 +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_id, i_category];filterPredicates=[]]]], fields=[i_item_id, i_category])
            :  :              +- Exchange(distribution=[broadcast], reuse_id=[3])
            :  :                 +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 8))])
            :  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_item_id]])
            :        +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :           +- Calc(select=[i_item_id, cs_ext_sales_price])
            :              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_item_id])
            :                 :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :  +- HashJoin(where=[=(cs_bill_addr_sk, ca_address_sk)], join=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
            :                 :     :     :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :                 :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     :     +- Reused(reference_id=[1])
            :                 :     +- Reused(reference_id=[2])
            :                 +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_item_id]])
                  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
                     +- Calc(select=[i_item_id, ws_ext_sales_price])
                        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_item_id])
                           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
                           :     :  +- HashJoin(where=[=(ws_bill_addr_sk, ca_address_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], joinType=[InnerJoin], build=[right])
                           :     :     :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                           :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :     :     +- Reused(reference_id=[1])
                           :     +- Reused(reference_id=[2])
                           +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q61, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 61 in stream 0 using template query61.tpl
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -6
   and   i_category = 'Books'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -6
   and   d_year = 1998
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -6
   and   i_category = 'Books'
   and   s_gmt_offset = -6
   and   d_year = 1998
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100

-- end query 61 in stream 0 using template query61.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(promotions=[$0], total=[$1], EXPR$2=[*(/(CAST($0):DECIMAL(15, 4), CAST($1):DECIMAL(15, 4)), 100)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{}], promotions=[SUM($0)])
      :  +- LogicalProject(ss_ext_sales_price=[$15])
      :     +- LogicalFilter(condition=[AND(=($0, $71), =($7, $23), =($8, $52), =($3, $99), =($117, $103), =($2, $130), =(CAST($128):DECIMAL(12, 2), -6), =($142, 'Books'), OR(=($60, 'Y'), =($61, 'Y'), =($63, 'Y')), =(CAST($50):DECIMAL(12, 2), -6), =($77, 1998), =($79, 11))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :           :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
      :           :  :  :  :  +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
      :           :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :           :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
      :           :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
      :           +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      +- LogicalAggregate(group=[{}], total=[SUM($0)])
         +- LogicalProject(ss_ext_sales_price=[$15])
            +- LogicalFilter(condition=[AND(=($0, $52), =($7, $23), =($3, $80), =($98, $84), =($2, $111), =(CAST($109):DECIMAL(12, 2), -6), =($123, 'Books'), =(CAST($50):DECIMAL(12, 2), -6), =($58, 1998), =($60, 11))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[promotions, total, *(/(CAST(promotions), CAST(total)), 100) AS EXPR$2])
+- SortLimit(orderBy=[promotions ASC, total ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[promotions ASC, total ASC], offset=[0], limit=[100], global=[false])
         +- NestedLoopJoin(where=[true], join=[promotions, total], joinType=[InnerJoin], build=[left], singleRowJoin=[true])
            :- Exchange(distribution=[broadcast])
            :  +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS promotions])
            :     +- Exchange(distribution=[single])
            :        +- LocalSortAggregate(select=[Partial_SUM(promotions) AS sum$0])
            :           +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_customer_sk, promotions, c_customer_sk], joinType=[InnerJoin], isBroadcast=[true], build=[left])
            :              :- Exchange(distribution=[broadcast])
            :              :  +- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk], select=[ss_customer_sk, Final_SUM(sum$0) AS promotions])
            :              :     +- Exchange(distribution=[hash[ss_customer_sk]])
            :              :        +- LocalHashAggregate(groupBy=[ss_customer_sk], select=[ss_customer_sk, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :              :           +- Calc(select=[ss_customer_sk, ss_ext_sales_price])
            :              :              +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_store_sk, ss_ext_sales_price, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :                 :- Calc(select=[ss_customer_sk, ss_store_sk, ss_ext_sales_price])
            :              :                 :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :                 :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
            :              :                 :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :                 :     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
            :              :                 :     :     :  +- HashJoin(where=[=(ss_promo_sk, p_promo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, p_promo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :                 :     :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price])
            :              :                 :     :     :     +- Exchange(distribution=[broadcast])
            :              :                 :     :     :        +- Calc(select=[p_promo_sk], where=[OR(=(p_channel_dmail, 'Y'), =(p_channel_email, 'Y'), =(p_channel_tv, 'Y'))])
            :              :                 :     :     :           +- TableSourceScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_channel_dmail, p_channel_email, p_channel_tv];filterPredicates=[]]]], fields=[p_promo_sk, p_channel_dmail, p_channel_email, p_channel_tv])
            :              :                 :     :     +- Exchange(distribution=[broadcast], reuse_id=[1])
            :              :                 :     :        +- Calc(select=[i_item_sk], where=[=(i_category, 'Books')])
            :              :                 :     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_category])
            :              :                 :     +- Exchange(distribution=[broadcast], reuse_id=[2])
            :              :                 :        +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 11))])
            :              :                 :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
            :              :                 +- Exchange(distribution=[broadcast], reuse_id=[3])
            :              :                    +- Calc(select=[s_store_sk], where=[=(CAST(s_gmt_offset), -6)])
            :              :                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_gmt_offset];filterPredicates=[]]]], fields=[s_store_sk, s_gmt_offset])
            :              +- Calc(select=[c_customer_sk], reuse_id=[4])
            :                 +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[c_customer_sk, c_current_addr_sk, ca_address_sk], joinType=[InnerJoin], build=[right])
            :                    :- Exchange(distribution=[hash[c_current_addr_sk]])
            :                    :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk])
            :                    +- Exchange(distribution=[hash[ca_address_sk]])
            :                       +- Calc(select=[ca_address_sk], where=[=(CAST(ca_gmt_offset), -6)])
            :                          +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_gmt_offset];filterPredicates=[]]]], fields=[ca_address_sk, ca_gmt_offset])
            +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total])
               +- Exchange(distribution=[single])
                  +- LocalSortAggregate(select=[Partial_SUM(ss_ext_sales_price) AS sum$0])
                     +- Calc(select=[ss_ext_sales_price])
                        +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_customer_sk, ss_ext_sales_price, c_customer_sk], joinType=[InnerJoin], build=[right])
                           :- Exchange(distribution=[hash[ss_customer_sk]])
                           :  +- Calc(select=[ss_customer_sk, ss_ext_sales_price])
                           :     +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_store_sk, ss_ext_sales_price, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :        :- Calc(select=[ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                           :        :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :        :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                           :        :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :        :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                           :        :     :     +- Reused(reference_id=[1])
                           :        :     +- Reused(reference_id=[2])
                           :        +- Reused(reference_id=[3])
                           +- Exchange(distribution=[hash[c_customer_sk]])
                              +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q62, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 62 in stream 0 using template query62.tpl
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,web_name
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days `
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and 
                 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days `
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and 
                 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days `
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
                 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days `
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days `
from
   web_sales
  ,warehouse
  ,ship_mode
  ,web_site
  ,date_dim
where
    d_month_seq between 1176 and 1176 + 11
and ws_ship_date_sk   = d_date_sk
and ws_warehouse_sk   = w_warehouse_sk
and ws_ship_mode_sk   = sm_ship_mode_sk
and ws_web_site_sk    = web_site_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,web_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
       ,web_name
limit 100

-- end query 62 in stream 0 using template query62.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], 30 days =[SUM($3)], 31-60 days =[SUM($4)], 61-90 days =[SUM($5)], 91-120 days =[SUM($6)], >120 days =[SUM($7)])
   +- LogicalProject(EXPR$0=[SUBSTR($36, 1, 20)], sm_type=[$50], web_name=[$58], $f3=[CASE(<=(-($2, $0), 30), 1, 0)], $f4=[CASE(AND(>(-($2, $0), 30), <=(-($2, $0), 60)), 1, 0)], $f5=[CASE(AND(>(-($2, $0), 60), <=(-($2, $0), 90)), 1, 0)], $f6=[CASE(AND(>(-($2, $0), 90), <=(-($2, $0), 120)), 1, 0)], $f7=[CASE(>(-($2, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(>=($83, 1176), <=($83, +(1176, 11)), =($2, $80), =($15, $34), =($14, $48), =($13, $54))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_ship_mode_id, sm_type, sm_code, sm_carrier, sm_contract];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_site_id, web_rec_start_date, web_rec_end_date, web_name, web_open_date_sk, web_close_date_sk, web_class, web_manager, web_mkt_id, web_mkt_class, web_mkt_desc, web_market_manager, web_company_id, web_company_name, web_street_number, web_street_name, web_street_type, web_suite_number, web_city, web_county, web_state, web_zip, web_country, web_gmt_offset, web_tax_percentage];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, web_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, web_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[EXPR$0, sm_type, web_name], select=[EXPR$0, sm_type, web_name, Final_SUM(sum$0) AS 30 days , Final_SUM(sum$1) AS 31-60 days , Final_SUM(sum$2) AS 61-90 days , Final_SUM(sum$3) AS 91-120 days , Final_SUM(sum$4) AS >120 days ])
         +- Exchange(distribution=[hash[EXPR$0, sm_type, web_name]])
            +- LocalHashAggregate(groupBy=[EXPR$0, sm_type, web_name], select=[EXPR$0, sm_type, web_name, Partial_SUM($f3) AS sum$0, Partial_SUM($f4) AS sum$1, Partial_SUM($f5) AS sum$2, Partial_SUM($f6) AS sum$3, Partial_SUM($f7) AS sum$4])
               +- Calc(select=[SUBSTR(w_warehouse_name, 1, 20) AS EXPR$0, sm_type, web_name, CASE(<=(-(ws_ship_date_sk, ws_sold_date_sk), 30), 1, 0) AS $f3, CASE(AND(>(-(ws_ship_date_sk, ws_sold_date_sk), 30), <=(-(ws_ship_date_sk, ws_sold_date_sk), 60)), 1, 0) AS $f4, CASE(AND(>(-(ws_ship_date_sk, ws_sold_date_sk), 60), <=(-(ws_ship_date_sk, ws_sold_date_sk), 90)), 1, 0) AS $f5, CASE(AND(>(-(ws_ship_date_sk, ws_sold_date_sk), 90), <=(-(ws_ship_date_sk, ws_sold_date_sk), 120)), 1, 0) AS $f6, CASE(>(-(ws_ship_date_sk, ws_sold_date_sk), 120), 1, 0) AS $f7])
                  +- HashJoin(where=[=(ws_ship_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ship_date_sk, sm_type, w_warehouse_name, web_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, sm_type, w_warehouse_name, web_name])
                     :  +- HashJoin(where=[=(ws_web_site_sk, web_site_sk)], join=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, sm_type, w_warehouse_name, web_site_sk, web_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, sm_type, w_warehouse_name])
                     :     :  +- HashJoin(where=[=(ws_warehouse_sk, w_warehouse_sk)], join=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, sm_type, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, sm_type])
                     :     :     :  +- HashJoin(where=[=(ws_ship_mode_sk, sm_ship_mode_sk)], join=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, sm_ship_mode_sk, sm_type], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk])
                     :     :     :     +- Exchange(distribution=[broadcast])
                     :     :     :        +- TableSourceScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_type];filterPredicates=[]]]], fields=[sm_ship_mode_sk, sm_type])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- TableSourceScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_name];filterPredicates=[]]]], fields=[web_site_sk, web_name])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q63, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 63 in stream 0 using template query63.tpl
select  * 
from (select i_manager_id
             ,sum(ss_sales_price) sum_sales
             ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
      from item
          ,store_sales
          ,date_dim
          ,store
      where ss_item_sk = i_item_sk
        and ss_sold_date_sk = d_date_sk
        and ss_store_sk = s_store_sk
        and d_month_seq in (1176,1176+1,1176+2,1176+3,1176+4,1176+5,1176+6,1176+7,1176+8,1176+9,1176+10,1176+11)
        and ((    i_category in ('Books','Children','Electronics')
              and i_class in ('personal','portable','reference','self-help')
              and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		                  'exportiunivamalg #9','scholaramalgamalg #9'))
           or(    i_category in ('Women','Music','Men')
              and i_class in ('accessories','classical','fragrances','pants')
              and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		                 'importoamalg #1')))
group by i_manager_id, d_moy) tmp1
where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
order by i_manager_id
        ,avg_monthly_sales
        ,sum_sales
limit 100

-- end query 63 in stream 0 using template query63.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$2], sort2=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_manager_id=[$0], sum_sales=[$1], avg_monthly_sales=[$2])
   +- LogicalFilter(condition=[>(CASE(>($2, 0), /(ABS(-($1, $2)), $2), null), 0.1)])
      +- LogicalProject(i_manager_id=[$0], sum_sales=[$2], avg_monthly_sales=[/(CAST(CASE(>(COUNT($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($2) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))])
         +- LogicalAggregate(group=[{0, 1}], sum_sales=[SUM($2)])
            +- LogicalProject(i_manager_id=[$20], d_moy=[$53], ss_sales_price=[$35])
               +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($48, 1176), =($48, CAST(+(1176, 1)):BIGINT NOT NULL), =($48, CAST(+(1176, 2)):BIGINT NOT NULL), =($48, CAST(+(1176, 3)):BIGINT NOT NULL), =($48, CAST(+(1176, 4)):BIGINT NOT NULL), =($48, CAST(+(1176, 5)):BIGINT NOT NULL), =($48, CAST(+(1176, 6)):BIGINT NOT NULL), =($48, CAST(+(1176, 7)):BIGINT NOT NULL), =($48, CAST(+(1176, 8)):BIGINT NOT NULL), =($48, CAST(+(1176, 9)):BIGINT NOT NULL), =($48, CAST(+(1176, 10)):BIGINT NOT NULL), =($48, CAST(+(1176, 11)):BIGINT NOT NULL)), OR(AND(OR(=($12, 'Books'), =($12, 'Children'), =($12, 'Electronics')), OR(=($10, 'personal'), =($10, 'portable'), =($10, 'reference'), =($10, 'self-help')), OR(=($8, 'scholaramalgamalg #14'), =($8, 'scholaramalgamalg #7'), =($8, 'exportiunivamalg #9'), =($8, 'scholaramalgamalg #9'))), AND(OR(=($12, 'Women'), =($12, 'Music'), =($12, 'Men')), OR(=($10, 'accessories'), =($10, 'classical'), =($10, 'fragrances'), =($10, 'pants')), OR(=($8, 'amalgimporto #1'), =($8, 'edu packscholar #1'), =($8, 'exportiimporto #1'), =($8, 'importoamalg #1')))))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_manager_id ASC, avg_monthly_sales ASC, sum_sales ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_manager_id ASC, avg_monthly_sales ASC, sum_sales ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[i_manager_id, sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0) AS avg_monthly_sales], where=[CASE(>(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), >(/(ABS(-(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0))), /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)), 0.1), null)])
         +- OverAggregate(partitionBy=[i_manager_id], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_manager_id, sum_sales, w0$o0, w0$o1])
            +- Sort(orderBy=[i_manager_id ASC])
               +- Exchange(distribution=[hash[i_manager_id]])
                  +- Calc(select=[i_manager_id, sum_sales])
                     +- HashAggregate(isMerge=[true], groupBy=[i_manager_id, d_moy], select=[i_manager_id, d_moy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_manager_id, d_moy]])
                           +- LocalHashAggregate(groupBy=[i_manager_id, d_moy], select=[i_manager_id, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_manager_id, d_moy, ss_sales_price])
                                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_sales_price, i_manager_id, d_moy, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ss_store_sk, ss_sales_price, i_manager_id, d_moy])
                                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manager_id, d_date_sk, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manager_id])
                                    :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_manager_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    :     :     +- Exchange(distribution=[broadcast])
                                    :     :        +- Calc(select=[i_item_sk, i_manager_id], where=[OR(AND(OR(=(i_category, 'Books'), =(i_category, 'Children'), =(i_category, 'Electronics')), IN(i_class, 'personal', 'portable', 'reference', 'self-help'), IN(i_brand, 'scholaramalgamalg #14', 'scholaramalgamalg #7', 'exportiunivamalg #9', 'scholaramalgamalg #9')), AND(OR(=(i_category, 'Women'), =(i_category, 'Music'), =(i_category, 'Men')), IN(i_class, 'accessories', 'classical', 'fragrances', 'pants'), IN(i_brand, 'amalgimporto #1', 'edu packscholar #1', 'exportiimporto #1', 'importoamalg #1')))])
                                    :     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_class, i_category, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_class, i_category, i_manager_id])
                                    :     +- Exchange(distribution=[broadcast])
                                    :        +- Calc(select=[d_date_sk, d_moy], where=[IN(d_month_seq, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187)])
                                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq, d_moy])
                                    +- Exchange(distribution=[broadcast])
                                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q64, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 64 in stream 0 using template query64.tpl
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_street_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('yellow','almond','antique','aquamarine','azure','beige') and
         i_current_price between 0 and 0 + 10 and
         i_current_price between 0 + 1 and 0 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_street_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1 as s11
     ,cs1.s2 as s21
     ,cs1.s3 as s31
     ,cs2.s1 as s12
     ,cs2.s2 as s22
     ,cs2.s3 as s32
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 1999 and
     cs2.syear = 1999 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt

-- end query 64 in stream 0 using template query64.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$20], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first])
+- LogicalProject(product_name=[$0], store_name=[$2], store_zip=[$3], b_street_number=[$4], b_street_name=[$5], b_city=[$6], b_zip=[$7], c_street_number=[$8], c_street_name=[$9], c_city=[$10], c_zip=[$11], syear=[$12], cnt=[$15], s11=[$16], s21=[$17], s31=[$18], s12=[$35], s22=[$36], s32=[$37], syear0=[$31], cnt0=[$34])
   +- LogicalFilter(condition=[AND(=($1, $20), =($12, 1999), =($31, CAST(+(1999, 1)):BIGINT NOT NULL), <=($34, $15), =($2, $21), =($3, $22))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}], cnt=[COUNT()], s1=[SUM($15)], s2=[SUM($16)], s3=[SUM($17)])
         :  +- LogicalProject(product_name=[$277], item_sk=[$256], store_name=[$135], store_zip=[$155], b_street_number=[$226], b_street_name=[$227], b_city=[$230], b_zip=[$233], c_street_number=[$239], c_street_name=[$240], c_city=[$243], c_zip=[$246], syear=[$52], fsyear=[$80], s2year=[$108], ss_wholesale_cost=[$11], ss_list_price=[$12], ss_coupon_amt=[$19])
         :     +- LogicalFilter(condition=[AND(=($7, $130), =($0, $46), =($3, $159), =($4, $177), =($5, $214), =($6, $224), =($2, $256), =($2, $25), =($9, $32), =($2, $43), =($161, $186), =($162, $219), =($163, $237), =($165, $74), =($164, $102), =($8, $195), =($215, $250), =($220, $253), <>($179, $188), OR(=($273, 'yellow'), =($273, 'almond'), =($273, 'antique'), =($273, 'aquamarine'), =($273, 'azure'), =($273, 'beige')), >=($261, 0), <=($261, +(0, 10)), >=($261, +(0, 1)), <=($261, +(0, 15)))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalFilter(condition=[>($1, *(2, $2))])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :     +- LogicalAggregate(group=[{0}], sale=[SUM($1)], refund=[SUM($2)])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :        +- LogicalProject(cs_item_sk=[$15], cs_ext_list_price=[$25], $f2=[+(+($57, $58), $59)])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($15, $36), =($17, $50))])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
         :           :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
         :           :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :           :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :           :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :           :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :           :  :  +- LogicalTableScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]])
         :           :  +- LogicalTableScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]])
         :           +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}], cnt=[COUNT()], s1=[SUM($15)], s2=[SUM($16)], s3=[SUM($17)])
            +- LogicalProject(product_name=[$277], item_sk=[$256], store_name=[$135], store_zip=[$155], b_street_number=[$226], b_street_name=[$227], b_city=[$230], b_zip=[$233], c_street_number=[$239], c_street_name=[$240], c_city=[$243], c_zip=[$246], syear=[$52], fsyear=[$80], s2year=[$108], ss_wholesale_cost=[$11], ss_list_price=[$12], ss_coupon_amt=[$19])
               +- LogicalFilter(condition=[AND(=($7, $130), =($0, $46), =($3, $159), =($4, $177), =($5, $214), =($6, $224), =($2, $256), =($2, $25), =($9, $32), =($2, $43), =($161, $186), =($162, $219), =($163, $237), =($165, $74), =($164, $102), =($8, $195), =($215, $250), =($220, $253), <>($179, $188), OR(=($273, 'yellow'), =($273, 'almond'), =($273, 'antique'), =($273, 'aquamarine'), =($273, 'azure'), =($273, 'beige')), >=($261, 0), <=($261, +(0, 10)), >=($261, +(0, 1)), <=($261, +(0, 15)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalFilter(condition=[>($1, *(2, $2))])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :     +- LogicalAggregate(group=[{0}], sale=[SUM($1)], refund=[SUM($2)])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :        +- LogicalProject(cs_item_sk=[$15], cs_ext_list_price=[$25], $f2=[+(+($57, $58), $59)])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($15, $36), =($17, $50))])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
                     :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
                     :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
                     :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
                     :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[product_name, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, CAST(1999) AS syear, cnt, s1 AS s11, s2 AS s21, s3 AS s31, s10 AS s12, s20 AS s22, s30 AS s32, CAST(2000) AS syear0, cnt0])
+- SortLimit(orderBy=[product_name ASC, store_name ASC, cnt0 ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[product_name ASC, store_name ASC, cnt0 ASC], offset=[0], limit=[200], global=[false])
         +- HashJoin(where=[AND(=(item_sk, item_sk0), <=(cnt0, cnt), =(store_name, store_name0), =(store_zip, store_zip0))], join=[product_name, item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, cnt, s1, s2, s3, item_sk0, store_name0, store_zip0, cnt0, s10, s20, s30], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[item_sk, store_name, store_zip]])
            :  +- Calc(select=[product_name, item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, cnt, s1, s2, s3])
            :     +- HashAggregate(isMerge=[false], groupBy=[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year], auxGrouping=[product_name], select=[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year, product_name, COUNT(*) AS cnt, SUM(ss_wholesale_cost) AS s1, SUM(ss_list_price) AS s2, SUM(ss_coupon_amt) AS s3])
            :        +- Exchange(distribution=[hash[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year]])
            :           +- Calc(select=[i_product_name AS product_name, i_item_sk AS item_sk, s_store_name AS store_name, s_zip AS store_zip, ca_street_number AS b_street_number, ca_street_name AS b_street_name, ca_city AS b_city, ca_zip AS b_zip, ca_street_number0 AS c_street_number, ca_street_name0 AS c_street_name, ca_city0 AS c_city, ca_zip0 AS c_zip, CAST(1999) AS syear, d_year AS fsyear, d_year0 AS s2year, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :              +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name, s_store_sk, s_store_name, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name])
            :                 :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name], reuse_id=[2])
            :                 :     :  +- HashJoin(where=[=(ss_item_sk, cs_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name, cs_item_sk], joinType=[InnerJoin], build=[right])
            :                 :     :     :- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :- Exchange(distribution=[hash[ss_item_sk]])
            :                 :     :     :  :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])
            :                 :     :     :  :     +- HashJoin(where=[=(ss_promo_sk, p_promo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, p_promo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])
            :                 :     :     :  :        :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])
            :                 :     :     :  :        :     :  +- HashJoin(where=[AND(=(ss_cdemo_sk, cd_demo_sk), <>(cd_marital_status0, cd_marital_status))], join=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, cd_marital_status, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, cd_demo_sk, cd_marital_status0], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :- Exchange(distribution=[hash[ss_cdemo_sk]])
            :                 :     :     :  :        :     :     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, cd_marital_status, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])
            :                 :     :     :  :        :     :     :     +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, c_customer_sk, cd_marital_status, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :        :- Exchange(distribution=[hash[ss_customer_sk]])
            :                 :     :     :  :        :     :     :        :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip])
            :                 :     :     :  :        :     :     :        :     +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :        :        :- Exchange(distribution=[hash[ss_addr_sk]])
            :                 :     :     :  :        :     :     :        :        :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :                 :     :     :  :        :     :     :        :        :     +- HashJoin(where=[AND(=(ss_item_sk, sr_item_sk), =(ss_ticket_number, sr_ticket_number))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, sr_item_sk, sr_ticket_number], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :        :        :        :- Exchange(distribution=[hash[ss_item_sk]])
            :                 :     :     :  :        :     :     :        :        :        :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :                 :     :     :  :        :     :     :        :        :        +- Exchange(distribution=[hash[sr_item_sk]])
            :                 :     :     :  :        :     :     :        :        :           +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number])
            :                 :     :     :  :        :     :     :        :        +- Exchange(distribution=[hash[ca_address_sk]])
            :                 :     :     :  :        :     :     :        :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip])
            :                 :     :     :  :        :     :     :        +- Exchange(distribution=[hash[c_customer_sk]])
            :                 :     :     :  :        :     :     :           +- Calc(select=[c_customer_sk, cd_marital_status, ca_street_number, ca_street_name, ca_city, ca_zip, d_year, d_year0])
            :                 :     :     :  :        :     :     :              +- HashJoin(where=[=(c_first_shipto_date_sk, d_date_sk)], join=[c_customer_sk, c_first_shipto_date_sk, cd_marital_status, ca_street_number, ca_street_name, ca_city, ca_zip, d_year, d_date_sk, d_year0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :     :     :                 :- Calc(select=[c_customer_sk, c_first_shipto_date_sk, cd_marital_status, ca_street_number, ca_street_name, ca_city, ca_zip, d_year])
            :                 :     :     :  :        :     :     :                 :  +- HashJoin(where=[=(c_first_sales_date_sk, d_date_sk)], join=[c_customer_sk, c_first_shipto_date_sk, c_first_sales_date_sk, cd_marital_status, ca_street_number, ca_street_name, ca_city, ca_zip, d_date_sk, d_year], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :     :     :                 :     :- Calc(select=[c_customer_sk, c_first_shipto_date_sk, c_first_sales_date_sk, cd_marital_status, ca_street_number, ca_street_name, ca_city, ca_zip])
            :                 :     :     :  :        :     :     :                 :     :  +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, cd_marital_status, ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :                 :     :     :- Exchange(distribution=[hash[c_current_addr_sk]])
            :                 :     :     :  :        :     :     :                 :     :     :  +- Calc(select=[c_customer_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, cd_marital_status])
            :                 :     :     :  :        :     :     :                 :     :     :     +- HashJoin(where=[=(c_current_cdemo_sk, cd_demo_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, cd_demo_sk, cd_marital_status], joinType=[InnerJoin], build=[right])
            :                 :     :     :  :        :     :     :                 :     :     :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
            :                 :     :     :  :        :     :     :                 :     :     :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk])
            :                 :     :     :  :        :     :     :                 :     :     :        :     +- HashJoin(where=[=(c_current_hdemo_sk, hd_demo_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :     :     :                 :     :     :        :        :- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk])
            :                 :     :     :  :        :     :     :                 :     :     :        :        +- Exchange(distribution=[broadcast], reuse_id=[1])
            :                 :     :     :  :        :     :     :                 :     :     :        :           +- Calc(select=[hd_demo_sk])
            :                 :     :     :  :        :     :     :                 :     :     :        :              +- HashJoin(where=[=(hd_income_band_sk, ib_income_band_sk)], join=[hd_demo_sk, hd_income_band_sk, ib_income_band_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :  :        :     :     :                 :     :     :        :                 :- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk];filterPredicates=[]]]], fields=[hd_demo_sk, hd_income_band_sk])
            :                 :     :     :  :        :     :     :                 :     :     :        :                 +- Exchange(distribution=[broadcast])
            :                 :     :     :  :        :     :     :                 :     :     :        :                    +- TableSourceScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk];filterPredicates=[]]]], fields=[ib_income_band_sk])
            :                 :     :     :  :        :     :     :                 :     :     :        +- Exchange(distribution=[hash[cd_demo_sk]])
            :                 :     :     :  :        :     :     :                 :     :     :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status])
            :                 :     :     :  :        :     :     :                 :     :     +- Exchange(distribution=[hash[ca_address_sk]])
            :                 :     :     :  :        :     :     :                 :     :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip])
            :                 :     :     :  :        :     :     :                 :     +- Exchange(distribution=[broadcast])
            :                 :     :     :  :        :     :     :                 :        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :                 :     :     :  :        :     :     :                 +- Exchange(distribution=[broadcast])
            :                 :     :     :  :        :     :     :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :                 :     :     :  :        :     :     +- Exchange(distribution=[hash[cd_demo_sk]])
            :                 :     :     :  :        :     :        +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status])
            :                 :     :     :  :        :     +- Reused(reference_id=[1])
            :                 :     :     :  :        +- Exchange(distribution=[broadcast])
            :                 :     :     :  :           +- TableSourceScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk];filterPredicates=[]]]], fields=[p_promo_sk])
            :                 :     :     :  +- Exchange(distribution=[broadcast])
            :                 :     :     :     +- Calc(select=[i_item_sk, i_product_name], where=[AND(IN(i_color, 'yellow', 'almond', 'antique', 'aquamarine', 'azure', 'beige'), <=(i_current_price, 10), >=(i_current_price, 1))])
            :                 :     :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_current_price, i_color, i_product_name];filterPredicates=[]]]], fields=[i_item_sk, i_current_price, i_color, i_product_name])
            :                 :     :     +- Calc(select=[cs_item_sk], where=[>(sale, *(2, refund))])
            :                 :     :        +- HashAggregate(isMerge=[false], groupBy=[cs_item_sk], select=[cs_item_sk, SUM(cs_ext_list_price) AS sale, SUM($f2) AS refund])
            :                 :     :           +- Calc(select=[cs_item_sk, cs_ext_list_price, +(+(cr_refunded_cash, cr_reversed_charge), cr_store_credit) AS $f2])
            :                 :     :              +- HashJoin(where=[AND(=(cs_item_sk, cr_item_sk), =(cs_order_number, cr_order_number))], join=[cs_item_sk, cs_order_number, cs_ext_list_price, cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit], joinType=[InnerJoin], build=[right])
            :                 :     :                 :- Exchange(distribution=[hash[cs_item_sk]])
            :                 :     :                 :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_item_sk, cs_order_number, cs_ext_list_price];filterPredicates=[]]]], fields=[cs_item_sk, cs_order_number, cs_ext_list_price])
            :                 :     :                 +- Exchange(distribution=[hash[cr_item_sk]])
            :                 :     :                    +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit];filterPredicates=[]]]], fields=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit])
            :                 :     +- Exchange(distribution=[broadcast])
            :                 :        +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
            :                 :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_zip])
            +- Exchange(distribution=[hash[item_sk, store_name, store_zip]])
               +- Calc(select=[item_sk, store_name, store_zip, cnt, s1, s2, s3])
                  +- HashAggregate(isMerge=[false], groupBy=[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year], select=[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year, COUNT(*) AS cnt, SUM(ss_wholesale_cost) AS s1, SUM(ss_list_price) AS s2, SUM(ss_coupon_amt) AS s3])
                     +- Exchange(distribution=[hash[item_sk, store_name, store_zip, b_street_number, b_street_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year]])
                        +- Calc(select=[i_product_name AS product_name, i_item_sk AS item_sk, s_store_name AS store_name, s_zip AS store_zip, ca_street_number AS b_street_number, ca_street_name AS b_street_name, ca_city AS b_city, ca_zip AS b_zip, ca_street_number0 AS c_street_number, ca_street_name0 AS c_street_name, ca_city0 AS c_city, ca_zip0 AS c_zip, CAST(2000) AS syear, d_year AS fsyear, d_year0 AS s2year, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
                           +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name, s_store_sk, s_store_name, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :- Calc(select=[ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name])
                              :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, ca_street_number, ca_street_name, ca_city, ca_zip, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, i_item_sk, i_product_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :     :- Reused(reference_id=[2])
                              :     +- Exchange(distribution=[broadcast])
                              :        +- Calc(select=[d_date_sk], where=[=(d_year, 2000)])
                              :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                              +- Exchange(distribution=[broadcast])
                                 +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q65, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 65 in stream 0 using template query65.tpl
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100

-- end query 65 in stream 0 using template query65.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(s_store_name=[$5], i_item_desc=[$33], revenue=[$55], i_current_price=[$34], i_wholesale_cost=[$35], i_brand=[$37])
   +- LogicalFilter(condition=[AND(=($51, $53), <=($55, *(0.1, $52)), =($0, $53), =($29, $54))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :  +- LogicalAggregate(group=[{0}], ave=[AVG($1)])
         :     +- LogicalProject(ss_store_sk=[$0], revenue=[$2])
         :        +- LogicalAggregate(group=[{0, 1}], revenue=[SUM($2)])
         :           +- LogicalProject(ss_store_sk=[$7], ss_item_sk=[$2], ss_sales_price=[$13])
         :              +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1176), <=($26, +(1176, 11)))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1}], revenue=[SUM($2)])
            +- LogicalProject(ss_store_sk=[$7], ss_item_sk=[$2], ss_sales_price=[$13])
               +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1176), <=($26, +(1176, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[s_store_name, i_item_desc, revenue, i_current_price, i_wholesale_cost, i_brand])
+- SortLimit(orderBy=[s_store_name ASC, i_item_desc ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[s_store_name ASC, i_item_desc ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, revenue, i_item_desc, i_current_price, i_wholesale_cost, i_brand, s_store_sk, s_store_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :- Calc(select=[ss_store_sk, revenue, i_item_desc, i_current_price, i_wholesale_cost, i_brand])
            :  +- HashJoin(where=[=(i_item_sk, ss_item_sk)], join=[ss_store_sk, ss_item_sk, revenue, i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand], joinType=[InnerJoin], build=[right])
            :     :- Exchange(distribution=[hash[ss_item_sk]])
            :     :  +- Calc(select=[ss_store_sk, ss_item_sk, revenue])
            :     :     +- HashJoin(where=[AND(=(ss_store_sk0, ss_store_sk), <=(revenue, *(0.1, ave)))], join=[ss_store_sk, ss_item_sk, revenue, ss_store_sk0, ave], joinType=[InnerJoin], build=[right])
            :     :        :- Exchange(distribution=[hash[ss_store_sk]], exchange_mode=[BATCH])
            :     :        :  +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk, ss_item_sk], select=[ss_store_sk, ss_item_sk, Final_SUM(sum$0) AS revenue], reuse_id=[1])
            :     :        :     +- Exchange(distribution=[hash[ss_store_sk, ss_item_sk]])
            :     :        :        +- LocalHashAggregate(groupBy=[ss_store_sk, ss_item_sk], select=[ss_store_sk, ss_item_sk, Partial_SUM(ss_sales_price) AS sum$0])
            :     :        :           +- Calc(select=[ss_store_sk, ss_item_sk, ss_sales_price])
            :     :        :              +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :        :                 :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
            :     :        :                 +- Exchange(distribution=[broadcast])
            :     :        :                    +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
            :     :        :                       +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
            :     :        +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk], select=[ss_store_sk, Final_AVG(sum$0, count$1) AS ave])
            :     :           +- Exchange(distribution=[hash[ss_store_sk]])
            :     :              +- LocalHashAggregate(groupBy=[ss_store_sk], select=[ss_store_sk, Partial_AVG(revenue) AS (sum$0, count$1)])
            :     :                 +- Calc(select=[ss_store_sk, revenue])
            :     :                    +- Reused(reference_id=[1])
            :     +- Exchange(distribution=[hash[i_item_sk]])
            :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand];filterPredicates=[]]]], fields=[i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand])
            +- Exchange(distribution=[broadcast])
               +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q66, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 66 in stream 0 using template query66.tpl
select   
         w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
        ,ship_carriers
        ,`year`
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
     select 
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'PRIVATECARRIER' || ',' || 'UPS' as ship_carriers
       ,d_year as `year`
 	,sum(case when d_moy = 1 
 		then ws_sales_price* ws_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2 
 		then ws_sales_price* ws_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3 
 		then ws_sales_price* ws_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4 
 		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5 
 		then ws_sales_price* ws_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6 
 		then ws_sales_price* ws_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7 
 		then ws_sales_price* ws_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8 
 		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9 
 		then ws_sales_price* ws_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10 
 		then ws_sales_price* ws_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then ws_sales_price* ws_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1 
 		then ws_net_paid * ws_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then ws_net_paid * ws_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3 
 		then ws_net_paid * ws_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4 
 		then ws_net_paid * ws_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5 
 		then ws_net_paid * ws_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6 
 		then ws_net_paid * ws_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7 
 		then ws_net_paid * ws_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8 
 		then ws_net_paid * ws_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9 
 		then ws_net_paid * ws_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10 
 		then ws_net_paid * ws_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then ws_net_paid * ws_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then ws_net_paid * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            ws_warehouse_sk =  w_warehouse_sk
        and ws_sold_date_sk = d_date_sk
        and ws_sold_time_sk = t_time_sk
 	and ws_ship_mode_sk = sm_ship_mode_sk
        and d_year = 1998
 	and t_time between 1 and 1+28800 
 	and sm_carrier in ('PRIVATECARRIER','UPS')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 union all
     select 
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'PRIVATECARRIER' || ',' || 'UPS' as ship_carriers
       ,d_year as `year`
 	,sum(case when d_moy = 1 
 		then cs_sales_price* cs_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2 
 		then cs_sales_price* cs_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3 
 		then cs_sales_price* cs_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4 
 		then cs_sales_price* cs_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5 
 		then cs_sales_price* cs_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6 
 		then cs_sales_price* cs_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7 
 		then cs_sales_price* cs_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8 
 		then cs_sales_price* cs_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9 
 		then cs_sales_price* cs_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10 
 		then cs_sales_price* cs_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then cs_sales_price* cs_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then cs_sales_price* cs_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1 
 		then cs_net_paid * cs_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2 
 		then cs_net_paid * cs_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3 
 		then cs_net_paid * cs_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4 
 		then cs_net_paid * cs_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5 
 		then cs_net_paid * cs_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6 
 		then cs_net_paid * cs_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7 
 		then cs_net_paid * cs_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8 
 		then cs_net_paid * cs_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9 
 		then cs_net_paid * cs_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10 
 		then cs_net_paid * cs_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then cs_net_paid * cs_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then cs_net_paid * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	 ,ship_mode
     where
            cs_warehouse_sk =  w_warehouse_sk
        and cs_sold_date_sk = d_date_sk
        and cs_sold_time_sk = t_time_sk
 	and cs_ship_mode_sk = sm_ship_mode_sk
        and d_year = 1998
 	and t_time between 1 AND 1+28800 
 	and sm_carrier in ('PRIVATECARRIER','UPS')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 ) x
 group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,`year`
 order by w_warehouse_name
 limit 100

-- end query 66 in stream 0 using template query66.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], jan_sales=[SUM($8)], feb_sales=[SUM($9)], mar_sales=[SUM($10)], apr_sales=[SUM($11)], may_sales=[SUM($12)], jun_sales=[SUM($13)], jul_sales=[SUM($14)], aug_sales=[SUM($15)], sep_sales=[SUM($16)], oct_sales=[SUM($17)], nov_sales=[SUM($18)], dec_sales=[SUM($19)], jan_sales_per_sq_foot=[SUM($20)], feb_sales_per_sq_foot=[SUM($21)], mar_sales_per_sq_foot=[SUM($22)], apr_sales_per_sq_foot=[SUM($23)], may_sales_per_sq_foot=[SUM($24)], jun_sales_per_sq_foot=[SUM($25)], jul_sales_per_sq_foot=[SUM($26)], aug_sales_per_sq_foot=[SUM($27)], sep_sales_per_sq_foot=[SUM($28)], oct_sales_per_sq_foot=[SUM($29)], nov_sales_per_sq_foot=[SUM($30)], dec_sales_per_sq_foot=[SUM($31)], jan_net=[SUM($32)], feb_net=[SUM($33)], mar_net=[SUM($34)], apr_net=[SUM($35)], may_net=[SUM($36)], jun_net=[SUM($37)], jul_net=[SUM($38)], aug_net=[SUM($39)], sep_net=[SUM($40)], oct_net=[SUM($41)], nov_net=[SUM($42)], dec_net=[SUM($43)])
   +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sq_ft=[$1], w_city=[$2], w_county=[$3], w_state=[$4], w_country=[$5], ship_carriers=[$6], year=[$7], jan_sales=[$8], feb_sales=[$9], mar_sales=[$10], apr_sales=[$11], may_sales=[$12], jun_sales=[$13], jul_sales=[$14], aug_sales=[$15], sep_sales=[$16], oct_sales=[$17], nov_sales=[$18], dec_sales=[$19], $f20=[/($8, $1)], $f21=[/($9, $1)], $f22=[/($10, $1)], $f23=[/($11, $1)], $f24=[/($12, $1)], $f25=[/($13, $1)], $f26=[/($14, $1)], $f27=[/($15, $1)], $f28=[/($16, $1)], $f29=[/($17, $1)], $f30=[/($18, $1)], $f31=[/($19, $1)], jan_net=[$20], feb_net=[$21], mar_net=[$22], apr_net=[$23], may_net=[$24], jun_net=[$25], jul_net=[$26], aug_net=[$27], sep_net=[$28], oct_net=[$29], nov_net=[$30], dec_net=[$31])
      +- LogicalUnion(all=[true])
         :- LogicalProject(w_warehouse_name=[$0], w_warehouse_sq_ft=[$1], w_city=[$2], w_county=[$3], w_state=[$4], w_country=[$5], ship_carriers=[||(||('PRIVATECARRIER', ','), 'UPS')], year=[$6], jan_sales=[$7], feb_sales=[$8], mar_sales=[$9], apr_sales=[$10], may_sales=[$11], jun_sales=[$12], jul_sales=[$13], aug_sales=[$14], sep_sales=[$15], oct_sales=[$16], nov_sales=[$17], dec_sales=[$18], jan_net=[$19], feb_net=[$20], mar_net=[$21], apr_net=[$22], may_net=[$23], jun_net=[$24], jul_net=[$25], aug_net=[$26], sep_net=[$27], oct_net=[$28], nov_net=[$29], dec_net=[$30])
         :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6}], jan_sales=[SUM($7)], feb_sales=[SUM($8)], mar_sales=[SUM($9)], apr_sales=[SUM($10)], may_sales=[SUM($11)], jun_sales=[SUM($12)], jul_sales=[SUM($13)], aug_sales=[SUM($14)], sep_sales=[SUM($15)], oct_sales=[SUM($16)], nov_sales=[SUM($17)], dec_sales=[SUM($18)], jan_net=[SUM($19)], feb_net=[SUM($20)], mar_net=[SUM($21)], apr_net=[SUM($22)], may_net=[SUM($23)], jun_net=[SUM($24)], jul_net=[SUM($25)], aug_net=[SUM($26)], sep_net=[SUM($27)], oct_net=[SUM($28)], nov_net=[SUM($29)], dec_net=[SUM($30)])
         :     +- LogicalProject(w_warehouse_name=[$36], w_warehouse_sq_ft=[$37], w_city=[$42], w_county=[$43], w_state=[$44], w_country=[$46], year=[$54], $f7=[CASE(=($56, 1), *($21, $18), 0)], $f8=[CASE(=($56, 2), *($21, $18), 0)], $f9=[CASE(=($56, 3), *($21, $18), 0)], $f10=[CASE(=($56, 4), *($21, $18), 0)], $f11=[CASE(=($56, 5), *($21, $18), 0)], $f12=[CASE(=($56, 6), *($21, $18), 0)], $f13=[CASE(=($56, 7), *($21, $18), 0)], $f14=[CASE(=($56, 8), *($21, $18), 0)], $f15=[CASE(=($56, 9), *($21, $18), 0)], $f16=[CASE(=($56, 10), *($21, $18), 0)], $f17=[CASE(=($56, 11), *($21, $18), 0)], $f18=[CASE(=($56, 12), *($21, $18), 0)], $f19=[CASE(=($56, 1), *($29, $18), 0)], $f20=[CASE(=($56, 2), *($29, $18), 0)], $f21=[CASE(=($56, 3), *($29, $18), 0)], $f22=[CASE(=($56, 4), *($29, $18), 0)], $f23=[CASE(=($56, 5), *($29, $18), 0)], $f24=[CASE(=($56, 6), *($29, $18), 0)], $f25=[CASE(=($56, 7), *($29, $18), 0)], $f26=[CASE(=($56, 8), *($29, $18), 0)], $f27=[CASE(=($56, 9), *($29, $18), 0)], $f28=[CASE(=($56, 10), *($29, $18), 0)], $f29=[CASE(=($56, 11), *($29, $18), 0)], $f30=[CASE(=($56, 12), *($29, $18), 0)])
         :        +- LogicalFilter(condition=[AND(=($15, $34), =($0, $48), =($1, $76), =($14, $86), =($54, 1998), >=($78, 1), <=($78, +(1, 28800)), OR(=($90, 'PRIVATECARRIER'), =($90, 'UPS')))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :              :  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
         :              :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_ship_mode_id, sm_type, sm_code, sm_carrier, sm_contract];filterPredicates=[]]]])
         +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sq_ft=[$1], w_city=[$2], w_county=[$3], w_state=[$4], w_country=[$5], ship_carriers=[||(||('PRIVATECARRIER', ','), 'UPS')], year=[$6], jan_sales=[$7], feb_sales=[$8], mar_sales=[$9], apr_sales=[$10], may_sales=[$11], jun_sales=[$12], jul_sales=[$13], aug_sales=[$14], sep_sales=[$15], oct_sales=[$16], nov_sales=[$17], dec_sales=[$18], jan_net=[$19], feb_net=[$20], mar_net=[$21], apr_net=[$22], may_net=[$23], jun_net=[$24], jul_net=[$25], aug_net=[$26], sep_net=[$27], oct_net=[$28], nov_net=[$29], dec_net=[$30])
            +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6}], jan_sales=[SUM($7)], feb_sales=[SUM($8)], mar_sales=[SUM($9)], apr_sales=[SUM($10)], may_sales=[SUM($11)], jun_sales=[SUM($12)], jul_sales=[SUM($13)], aug_sales=[SUM($14)], sep_sales=[SUM($15)], oct_sales=[SUM($16)], nov_sales=[SUM($17)], dec_sales=[SUM($18)], jan_net=[SUM($19)], feb_net=[SUM($20)], mar_net=[SUM($21)], apr_net=[SUM($22)], may_net=[SUM($23)], jun_net=[SUM($24)], jul_net=[SUM($25)], aug_net=[SUM($26)], sep_net=[SUM($27)], oct_net=[SUM($28)], nov_net=[SUM($29)], dec_net=[SUM($30)])
               +- LogicalProject(w_warehouse_name=[$36], w_warehouse_sq_ft=[$37], w_city=[$42], w_county=[$43], w_state=[$44], w_country=[$46], year=[$54], $f7=[CASE(=($56, 1), *($21, $18), 0)], $f8=[CASE(=($56, 2), *($21, $18), 0)], $f9=[CASE(=($56, 3), *($21, $18), 0)], $f10=[CASE(=($56, 4), *($21, $18), 0)], $f11=[CASE(=($56, 5), *($21, $18), 0)], $f12=[CASE(=($56, 6), *($21, $18), 0)], $f13=[CASE(=($56, 7), *($21, $18), 0)], $f14=[CASE(=($56, 8), *($21, $18), 0)], $f15=[CASE(=($56, 9), *($21, $18), 0)], $f16=[CASE(=($56, 10), *($21, $18), 0)], $f17=[CASE(=($56, 11), *($21, $18), 0)], $f18=[CASE(=($56, 12), *($21, $18), 0)], $f19=[CASE(=($56, 1), *($29, $18), 0)], $f20=[CASE(=($56, 2), *($29, $18), 0)], $f21=[CASE(=($56, 3), *($29, $18), 0)], $f22=[CASE(=($56, 4), *($29, $18), 0)], $f23=[CASE(=($56, 5), *($29, $18), 0)], $f24=[CASE(=($56, 6), *($29, $18), 0)], $f25=[CASE(=($56, 7), *($29, $18), 0)], $f26=[CASE(=($56, 8), *($29, $18), 0)], $f27=[CASE(=($56, 9), *($29, $18), 0)], $f28=[CASE(=($56, 10), *($29, $18), 0)], $f29=[CASE(=($56, 11), *($29, $18), 0)], $f30=[CASE(=($56, 12), *($29, $18), 0)])
                  +- LogicalFilter(condition=[AND(=($14, $34), =($0, $48), =($1, $76), =($13, $86), =($54, 1998), >=($78, 1), <=($78, +(1, 28800)), OR(=($90, 'PRIVATECARRIER'), =($90, 'UPS')))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                        :  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
                        :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_ship_mode_id, sm_type, sm_code, sm_carrier, sm_contract];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, 'PRIVATECARRIER,UPS' AS ship_carriers, year, jan_sales, feb_sales, mar_sales, apr_sales, may_sales, jun_sales, jul_sales, aug_sales, sep_sales, oct_sales, nov_sales, dec_sales, jan_sales_per_sq_foot, feb_sales_per_sq_foot, mar_sales_per_sq_foot, apr_sales_per_sq_foot, may_sales_per_sq_foot, jun_sales_per_sq_foot, jul_sales_per_sq_foot, aug_sales_per_sq_foot, sep_sales_per_sq_foot, oct_sales_per_sq_foot, nov_sales_per_sq_foot, dec_sales_per_sq_foot, jan_net, feb_net, mar_net, apr_net, may_net, jun_net, jul_net, aug_net, sep_net, oct_net, nov_net, dec_net])
+- SortLimit(orderBy=[w_warehouse_name ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[w_warehouse_name ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year], select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year, SUM(jan_sales) AS jan_sales, SUM(feb_sales) AS feb_sales, SUM(mar_sales) AS mar_sales, SUM(apr_sales) AS apr_sales, SUM(may_sales) AS may_sales, SUM(jun_sales) AS jun_sales, SUM(jul_sales) AS jul_sales, SUM(aug_sales) AS aug_sales, SUM(sep_sales) AS sep_sales, SUM(oct_sales) AS oct_sales, SUM(nov_sales) AS nov_sales, SUM(dec_sales) AS dec_sales, SUM($f20) AS jan_sales_per_sq_foot, SUM($f21) AS feb_sales_per_sq_foot, SUM($f22) AS mar_sales_per_sq_foot, SUM($f23) AS apr_sales_per_sq_foot, SUM($f24) AS may_sales_per_sq_foot, SUM($f25) AS jun_sales_per_sq_foot, SUM($f26) AS jul_sales_per_sq_foot, SUM($f27) AS aug_sales_per_sq_foot, SUM($f28) AS sep_sales_per_sq_foot, SUM($f29) AS oct_sales_per_sq_foot, SUM($f30) AS nov_sales_per_sq_foot, SUM($f31) AS dec_sales_per_sq_foot, SUM(jan_net) AS jan_net, SUM(feb_net) AS feb_net, SUM(mar_net) AS mar_net, SUM(apr_net) AS apr_net, SUM(may_net) AS may_net, SUM(jun_net) AS jun_net, SUM(jul_net) AS jul_net, SUM(aug_net) AS aug_net, SUM(sep_net) AS sep_net, SUM(oct_net) AS oct_net, SUM(nov_net) AS nov_net, SUM(dec_net) AS dec_net])
            +- Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, 'PRIVATECARRIER,UPS' AS ship_carriers, year, jan_sales, feb_sales, mar_sales, apr_sales, may_sales, jun_sales, jul_sales, aug_sales, sep_sales, oct_sales, nov_sales, dec_sales, /(jan_sales, w_warehouse_sq_ft) AS $f20, /(feb_sales, w_warehouse_sq_ft) AS $f21, /(mar_sales, w_warehouse_sq_ft) AS $f22, /(apr_sales, w_warehouse_sq_ft) AS $f23, /(may_sales, w_warehouse_sq_ft) AS $f24, /(jun_sales, w_warehouse_sq_ft) AS $f25, /(jul_sales, w_warehouse_sq_ft) AS $f26, /(aug_sales, w_warehouse_sq_ft) AS $f27, /(sep_sales, w_warehouse_sq_ft) AS $f28, /(oct_sales, w_warehouse_sq_ft) AS $f29, /(nov_sales, w_warehouse_sq_ft) AS $f30, /(dec_sales, w_warehouse_sq_ft) AS $f31, jan_net, feb_net, mar_net, apr_net, may_net, jun_net, jul_net, aug_net, sep_net, oct_net, nov_net, dec_net])
               +- Union(all=[true], union=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year, jan_sales, feb_sales, mar_sales, apr_sales, may_sales, jun_sales, jul_sales, aug_sales, sep_sales, oct_sales, nov_sales, dec_sales, jan_net, feb_net, mar_net, apr_net, may_net, jun_net, jul_net, aug_net, sep_net, oct_net, nov_net, dec_net])
                  :- Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, 'PRIVATECARRIER,UPS' AS ship_carriers, year, jan_sales, feb_sales, mar_sales, apr_sales, may_sales, jun_sales, jul_sales, aug_sales, sep_sales, oct_sales, nov_sales, dec_sales, jan_net, feb_net, mar_net, apr_net, may_net, jun_net, jul_net, aug_net, sep_net, oct_net, nov_net, dec_net])
                  :  +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year], select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year, SUM($f7) AS jan_sales, SUM($f8) AS feb_sales, SUM($f9) AS mar_sales, SUM($f10) AS apr_sales, SUM($f11) AS may_sales, SUM($f12) AS jun_sales, SUM($f13) AS jul_sales, SUM($f14) AS aug_sales, SUM($f15) AS sep_sales, SUM($f16) AS oct_sales, SUM($f17) AS nov_sales, SUM($f18) AS dec_sales, SUM($f19) AS jan_net, SUM($f20) AS feb_net, SUM($f21) AS mar_net, SUM($f22) AS apr_net, SUM($f23) AS may_net, SUM($f24) AS jun_net, SUM($f25) AS jul_net, SUM($f26) AS aug_net, SUM($f27) AS sep_net, SUM($f28) AS oct_net, SUM($f29) AS nov_net, SUM($f30) AS dec_net])
                  :     +- Exchange(distribution=[hash[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year]])
                  :        +- Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, CAST(1998) AS year, CASE(=(d_moy, 1), *(ws_sales_price, ws_quantity), 0) AS $f7, CASE(=(d_moy, 2), *(ws_sales_price, ws_quantity), 0) AS $f8, CASE(=(d_moy, 3), *(ws_sales_price, ws_quantity), 0) AS $f9, CASE(=(d_moy, 4), *(ws_sales_price, ws_quantity), 0) AS $f10, CASE(=(d_moy, 5), *(ws_sales_price, ws_quantity), 0) AS $f11, CASE(=(d_moy, 6), *(ws_sales_price, ws_quantity), 0) AS $f12, CASE(=(d_moy, 7), *(ws_sales_price, ws_quantity), 0) AS $f13, CASE(=(d_moy, 8), *(ws_sales_price, ws_quantity), 0) AS $f14, CASE(=(d_moy, 9), *(ws_sales_price, ws_quantity), 0) AS $f15, CASE(=(d_moy, 10), *(ws_sales_price, ws_quantity), 0) AS $f16, CASE(=(d_moy, 11), *(ws_sales_price, ws_quantity), 0) AS $f17, CASE(=(d_moy, 12), *(ws_sales_price, ws_quantity), 0) AS $f18, CASE(=(d_moy, 1), *(ws_net_paid, ws_quantity), 0) AS $f19, CASE(=(d_moy, 2), *(ws_net_paid, ws_quantity), 0) AS $f20, CASE(=(d_moy, 3), *(ws_net_paid, ws_quantity), 0) AS $f21, CASE(=(d_moy, 4), *(ws_net_paid, ws_quantity), 0) AS $f22, CASE(=(d_moy, 5), *(ws_net_paid, ws_quantity), 0) AS $f23, CASE(=(d_moy, 6), *(ws_net_paid, ws_quantity), 0) AS $f24, CASE(=(d_moy, 7), *(ws_net_paid, ws_quantity), 0) AS $f25, CASE(=(d_moy, 8), *(ws_net_paid, ws_quantity), 0) AS $f26, CASE(=(d_moy, 9), *(ws_net_paid, ws_quantity), 0) AS $f27, CASE(=(d_moy, 10), *(ws_net_paid, ws_quantity), 0) AS $f28, CASE(=(d_moy, 11), *(ws_net_paid, ws_quantity), 0) AS $f29, CASE(=(d_moy, 12), *(ws_net_paid, ws_quantity), 0) AS $f30])
                  :           +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_quantity, ws_sales_price, ws_net_paid, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_date_sk, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :              :- Calc(select=[ws_sold_date_sk, ws_quantity, ws_sales_price, ws_net_paid, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country])
                  :              :  +- HashJoin(where=[=(ws_warehouse_sk, w_warehouse_sk)], join=[ws_sold_date_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid, w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :              :     :- Calc(select=[ws_sold_date_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid])
                  :              :     :  +- HashJoin(where=[=(ws_sold_time_sk, t_time_sk)], join=[ws_sold_date_sk, ws_sold_time_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :              :     :     :- Calc(select=[ws_sold_date_sk, ws_sold_time_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid])
                  :              :     :     :  +- NestedLoopJoin(where=[=(ws_ship_mode_sk, sm_ship_mode_sk)], join=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid, sm_ship_mode_sk], joinType=[InnerJoin], build=[right])
                  :              :     :     :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_quantity, ws_sales_price, ws_net_paid])
                  :              :     :     :     +- Exchange(distribution=[broadcast], reuse_id=[1])
                  :              :     :     :        +- Calc(select=[sm_ship_mode_sk], where=[OR(=(sm_carrier, 'PRIVATECARRIER'), =(sm_carrier, 'UPS'))])
                  :              :     :     :           +- TableSourceScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_carrier];filterPredicates=[]]]], fields=[sm_ship_mode_sk, sm_carrier])
                  :              :     :     +- Exchange(distribution=[broadcast], reuse_id=[2])
                  :              :     :        +- Calc(select=[t_time_sk], where=[AND(>=(t_time, 1), <=(t_time, 28801))])
                  :              :     :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time];filterPredicates=[]]]], fields=[t_time_sk, t_time])
                  :              :     +- Exchange(distribution=[broadcast])
                  :              :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country])
                  :              +- Exchange(distribution=[broadcast], reuse_id=[3])
                  :                 +- Calc(select=[d_date_sk, d_moy], where=[=(d_year, 1998)])
                  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                  +- Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, 'PRIVATECARRIER,UPS' AS ship_carriers, year, jan_sales, feb_sales, mar_sales, apr_sales, may_sales, jun_sales, jul_sales, aug_sales, sep_sales, oct_sales, nov_sales, dec_sales, jan_net, feb_net, mar_net, apr_net, may_net, jun_net, jul_net, aug_net, sep_net, oct_net, nov_net, dec_net])
                     +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year], select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year, SUM($f7) AS jan_sales, SUM($f8) AS feb_sales, SUM($f9) AS mar_sales, SUM($f10) AS apr_sales, SUM($f11) AS may_sales, SUM($f12) AS jun_sales, SUM($f13) AS jul_sales, SUM($f14) AS aug_sales, SUM($f15) AS sep_sales, SUM($f16) AS oct_sales, SUM($f17) AS nov_sales, SUM($f18) AS dec_sales, SUM($f19) AS jan_net, SUM($f20) AS feb_net, SUM($f21) AS mar_net, SUM($f22) AS apr_net, SUM($f23) AS may_net, SUM($f24) AS jun_net, SUM($f25) AS jul_net, SUM($f26) AS aug_net, SUM($f27) AS sep_net, SUM($f28) AS oct_net, SUM($f29) AS nov_net, SUM($f30) AS dec_net])
                        +- Exchange(distribution=[hash[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, year]])
                           +- Calc(select=[w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, CAST(1998) AS year, CASE(=(d_moy, 1), *(cs_sales_price, cs_quantity), 0) AS $f7, CASE(=(d_moy, 2), *(cs_sales_price, cs_quantity), 0) AS $f8, CASE(=(d_moy, 3), *(cs_sales_price, cs_quantity), 0) AS $f9, CASE(=(d_moy, 4), *(cs_sales_price, cs_quantity), 0) AS $f10, CASE(=(d_moy, 5), *(cs_sales_price, cs_quantity), 0) AS $f11, CASE(=(d_moy, 6), *(cs_sales_price, cs_quantity), 0) AS $f12, CASE(=(d_moy, 7), *(cs_sales_price, cs_quantity), 0) AS $f13, CASE(=(d_moy, 8), *(cs_sales_price, cs_quantity), 0) AS $f14, CASE(=(d_moy, 9), *(cs_sales_price, cs_quantity), 0) AS $f15, CASE(=(d_moy, 10), *(cs_sales_price, cs_quantity), 0) AS $f16, CASE(=(d_moy, 11), *(cs_sales_price, cs_quantity), 0) AS $f17, CASE(=(d_moy, 12), *(cs_sales_price, cs_quantity), 0) AS $f18, CASE(=(d_moy, 1), *(cs_net_paid, cs_quantity), 0) AS $f19, CASE(=(d_moy, 2), *(cs_net_paid, cs_quantity), 0) AS $f20, CASE(=(d_moy, 3), *(cs_net_paid, cs_quantity), 0) AS $f21, CASE(=(d_moy, 4), *(cs_net_paid, cs_quantity), 0) AS $f22, CASE(=(d_moy, 5), *(cs_net_paid, cs_quantity), 0) AS $f23, CASE(=(d_moy, 6), *(cs_net_paid, cs_quantity), 0) AS $f24, CASE(=(d_moy, 7), *(cs_net_paid, cs_quantity), 0) AS $f25, CASE(=(d_moy, 8), *(cs_net_paid, cs_quantity), 0) AS $f26, CASE(=(d_moy, 9), *(cs_net_paid, cs_quantity), 0) AS $f27, CASE(=(d_moy, 10), *(cs_net_paid, cs_quantity), 0) AS $f28, CASE(=(d_moy, 11), *(cs_net_paid, cs_quantity), 0) AS $f29, CASE(=(d_moy, 12), *(cs_net_paid, cs_quantity), 0) AS $f30])
                              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_sales_price, cs_net_paid, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_date_sk, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :- Calc(select=[cs_sold_date_sk, cs_quantity, cs_sales_price, cs_net_paid, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country])
                                 :  +- HashJoin(where=[=(cs_warehouse_sk, w_warehouse_sk)], join=[cs_sold_date_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid, w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :- Calc(select=[cs_sold_date_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid])
                                 :     :  +- HashJoin(where=[=(cs_sold_time_sk, t_time_sk)], join=[cs_sold_date_sk, cs_sold_time_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :     :- Calc(select=[cs_sold_date_sk, cs_sold_time_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid])
                                 :     :     :  +- NestedLoopJoin(where=[=(cs_ship_mode_sk, sm_ship_mode_sk)], join=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid, sm_ship_mode_sk], joinType=[InnerJoin], build=[right])
                                 :     :     :     :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_quantity, cs_sales_price, cs_net_paid])
                                 :     :     :     +- Reused(reference_id=[1])
                                 :     :     +- Reused(reference_id=[2])
                                 :     +- Exchange(distribution=[broadcast])
                                 :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country])
                                 +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q67, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 67 in stream 0 using template query67.tpl
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1176 and 1176+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100

-- end query 67 in stream 0 using template query67.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], i_product_name=[$3], d_year=[$4], d_qoy=[$5], d_moy=[$6], s_store_id=[$7], sumsales=[$8], rk=[$9])
   +- LogicalFilter(condition=[<=($9, 100)])
      +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], i_product_name=[$3], d_year=[$4], d_qoy=[$5], d_moy=[$6], s_store_id=[$7], sumsales=[$8], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $8 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], groups=[[{0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4}, {0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], sumsales=[SUM($8)])
            +- LogicalProject(i_category=[$92], i_class=[$90], i_brand=[$88], i_product_name=[$101], d_year=[$29], d_qoy=[$33], d_moy=[$31], s_store_id=[$52], $f8=[CASE(IS NOT NULL(*($13, $10)), *($13, $10), 0)])
               +- LogicalFilter(condition=[AND(=($0, $23), =($2, $80), =($7, $51), >=($26, 1176), <=($26, +(1176, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                     :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_brand ASC, i_product_name ASC, d_year ASC, d_qoy ASC, d_moy ASC, s_store_id ASC, sumsales ASC, rk ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_brand ASC, i_product_name ASC, d_year ASC, d_qoy ASC, d_moy ASC, s_store_id ASC, sumsales ASC, rk ASC], offset=[0], limit=[100], global=[false])
      +- Rank(rankFunction=[RANK], partitionBy=[i_category], orderBy=[sumsales DESC], rankRange=[rankStart=1, rankEnd=100], global=[true], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales, rk])
         +- Sort(orderBy=[i_category ASC, sumsales DESC])
            +- Exchange(distribution=[hash[i_category]])
               +- Rank(rankFunction=[RANK], partitionBy=[i_category], orderBy=[sumsales DESC], rankRange=[rankStart=1, rankEnd=100], global=[false], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales])
                  +- Sort(orderBy=[i_category ASC, sumsales DESC])
                     +- Calc(select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, CAST(s_store_id) AS s_store_id, sumsales])
                        +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e, Final_SUM(sum$0) AS sumsales])
                           +- Exchange(distribution=[hash[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e]])
                              +- LocalHashAggregate(groupBy=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e, Partial_SUM($f8) AS sum$0])
                                 +- Expand(projects=[{i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $f8, 0 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, null AS s_store_id, $f8, 1 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, d_qoy, null AS d_moy, null AS s_store_id, $f8, 3 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 7 AS $e}, {i_category, i_class, i_brand, i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 15 AS $e}, {i_category, i_class, i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 31 AS $e}, {i_category, i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 63 AS $e}, {i_category, null AS i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 127 AS $e}, {null AS i_category, null AS i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 255 AS $e}])
                                    +- Calc(select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, CASE(AND(IS NOT NULL(ss_sales_price), IS NOT NULL(ss_quantity)), *(ss_sales_price, ss_quantity), 0) AS $f8])
                                       +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_quantity, ss_sales_price, i_brand, i_class, i_category, i_product_name, d_year, d_moy, d_qoy, s_store_sk, s_store_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                          :- Calc(select=[ss_store_sk, ss_quantity, ss_sales_price, i_brand, i_class, i_category, i_product_name, d_year, d_moy, d_qoy])
                                          :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_sales_price, i_brand, i_class, i_category, i_product_name, d_date_sk, d_year, d_moy, d_qoy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                          :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_sales_price, i_brand, i_class, i_category, i_product_name])
                                          :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price, i_item_sk, i_brand, i_class, i_category, i_product_name], joinType=[InnerJoin], build=[right])
                                          :     :     :- Exchange(distribution=[hash[ss_item_sk]])
                                          :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price])
                                          :     :     +- Exchange(distribution=[hash[i_item_sk]])
                                          :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_class, i_category, i_product_name];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_class, i_category, i_product_name])
                                          :     +- Exchange(distribution=[broadcast])
                                          :        +- Calc(select=[d_date_sk, d_year, d_moy, d_qoy], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                                          :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq, d_year, d_moy, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq, d_year, d_moy, d_qoy])
                                          +- Exchange(distribution=[broadcast])
                                             +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id];filterPredicates=[]]]], fields=[s_store_sk, s_store_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q68, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 68 in stream 0 using template query68.tpl
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,extended_price
       ,extended_tax
       ,list_price
 from (select ss_ticket_number
             ,ss_customer_sk
             ,ca_city bought_city
             ,sum(ss_ext_sales_price) extended_price 
             ,sum(ss_ext_list_price) list_price
             ,sum(ss_ext_tax) extended_tax 
       from store_sales
           ,date_dim
           ,store
           ,household_demographics
           ,customer_address 
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_store_sk = store.s_store_sk  
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2 
        and (household_demographics.hd_dep_count = 0 or
             household_demographics.hd_vehicle_count= -1)
        and date_dim.d_year in (1998,1998+1,1998+2)
        and store.s_city in ('Midway','Fairview')
       group by ss_ticket_number
               ,ss_customer_sk
               ,ss_addr_sk,ca_city) dn
      ,customer
      ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city <> bought_city
 order by c_last_name
         ,ss_ticket_number
 limit 100

-- end query 68 in stream 0 using template query68.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$15], c_first_name=[$14], ca_city=[$30], bought_city=[$2], ss_ticket_number=[$0], extended_price=[$3], extended_tax=[$5], list_price=[$4])
   +- LogicalFilter(condition=[AND(=($1, $6), =($10, $24), <>($30, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], bought_city=[$3], extended_price=[$4], list_price=[$5], extended_tax=[$6])
         :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], extended_price=[SUM($4)], list_price=[SUM($5)], extended_tax=[SUM($6)])
         :  :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], bought_city=[$91], ss_ext_sales_price=[$15], ss_ext_list_price=[$17], ss_ext_tax=[$18])
         :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), =($6, $85), >=($32, 1), <=($32, 2), OR(=($83, 0), =($84, -1)), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL)), OR(=($73, 'Midway'), =($73, 'Fairview')))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :              :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :              :  :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :  :              :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :  :              +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, extended_price, extended_tax, list_price])
+- SortLimit(orderBy=[c_last_name ASC, ss_ticket_number ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_last_name ASC, ss_ticket_number ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(<>(ca_city, bought_city), =(ss_customer_sk, c_customer_sk))], join=[ss_ticket_number, ss_customer_sk, bought_city, extended_price, list_price, extended_tax, c_customer_sk, c_first_name, c_last_name, ca_city], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, bought_city, extended_price, list_price, extended_tax])
            :     +- HashAggregate(isMerge=[false], groupBy=[ss_ticket_number, ss_customer_sk, ss_addr_sk], auxGrouping=[bought_city], select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, bought_city, SUM(ss_ext_sales_price) AS extended_price, SUM(ss_ext_list_price) AS list_price, SUM(ss_ext_tax) AS extended_tax])
            :        +- Calc(select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, ca_city AS bought_city, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])
            :           +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, ca_city, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :- Calc(select=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, ca_city])
            :              :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, ca_city, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, ca_city])
            :              :     :  +- HashJoin(where=[=(ss_addr_sk, ca_address_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, ca_address_sk, ca_city], joinType=[InnerJoin], build=[right])
            :              :     :     :- Exchange(distribution=[hash[ss_addr_sk]])
            :              :     :     :  +- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])
            :              :     :     :     +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :     :     :        :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])
            :              :     :     :        +- Exchange(distribution=[broadcast])
            :              :     :     :           +- Calc(select=[hd_demo_sk], where=[OR(=(hd_dep_count, 0), =(hd_vehicle_count, -1))])
            :              :     :     :              +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
            :              :     :     +- Exchange(distribution=[hash[ca_address_sk]])
            :              :     :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city];filterPredicates=[]]]], fields=[ca_address_sk, ca_city])
            :              :     +- Exchange(distribution=[broadcast])
            :              :        +- Calc(select=[d_date_sk], where=[AND(>=(d_dom, 1), <=(d_dom, 2), OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000)))])
            :              :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_dom];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_dom])
            :              +- Exchange(distribution=[broadcast])
            :                 +- Calc(select=[s_store_sk], where=[OR(=(s_city, 'Midway'), =(s_city, 'Fairview'))])
            :                    +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_city];filterPredicates=[]]]], fields=[s_store_sk, s_city])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- Calc(select=[c_customer_sk, c_first_name, c_last_name, ca_city])
                  +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, ca_address_sk, ca_city], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[c_current_addr_sk]])
                     :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name])
                     +- Exchange(distribution=[hash[ca_address_sk]])
                        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city];filterPredicates=[]]]], fields=[ca_address_sk, ca_city])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q69, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 69 in stream 0 using template query69.tpl
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_state in ('ID','TN','SD') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_moy between 1 and 1+2) and
   (not exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2) and
    not exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 limit 100

-- end query 69 in stream 0 using template query69.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(cd_gender=[$0], cd_marital_status=[$1], cd_education_status=[$2], cnt1=[$5], cd_purchase_estimate=[$3], cnt2=[$5], cd_credit_rating=[$4], cnt3=[$5])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], cnt3=[COUNT()])
      +- LogicalProject(cd_gender=[$32], cd_marital_status=[$33], cd_education_status=[$34], cd_purchase_estimate=[$35], cd_credit_rating=[$36])
         +- LogicalFilter(condition=[AND(=($4, $18), OR(=($26, 'ID'), =($26, 'TN'), =($26, 'SD')), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 1999), >=($31, 1), <=($31, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[cd_gender, cd_marital_status, cd_education_status, cnt3 AS cnt1, cd_purchase_estimate, cnt3 AS cnt2, cd_credit_rating, cnt3])
+- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC], offset=[0], limit=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Final_$SUM0(sum0$0) AS cnt3])
            +- Exchange(distribution=[hash[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating]])
               +- LocalHashAggregate(groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Partial_$SUM0(cnt3) AS sum0$0])
                  +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cnt3, ca_address_sk], joinType=[InnerJoin], isBroadcast=[true], build=[left])
                     :- Exchange(distribution=[broadcast])
                     :  +- HashAggregate(isMerge=[true], groupBy=[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Final_$SUM0(sum0$0) AS cnt3])
                     :     +- Exchange(distribution=[hash[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating]])
                     :        +- LocalHashAggregate(groupBy=[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[c_current_addr_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Partial_$SUM0(cnt3) AS sum0$0])
                     :           +- HashJoin(where=[=(cd_demo_sk, c_current_cdemo_sk)], join=[c_current_cdemo_sk, c_current_addr_sk, cnt3, cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], joinType=[InnerJoin], isBroadcast=[true], build=[left])
                     :              :- Exchange(distribution=[broadcast])
                     :              :  +- HashAggregate(isMerge=[true], groupBy=[c_current_cdemo_sk, c_current_addr_sk], select=[c_current_cdemo_sk, c_current_addr_sk, Final_COUNT(count$0) AS cnt3])
                     :              :     +- Exchange(distribution=[hash[c_current_cdemo_sk, c_current_addr_sk]])
                     :              :        +- LocalHashAggregate(groupBy=[c_current_cdemo_sk, c_current_addr_sk], select=[c_current_cdemo_sk, c_current_addr_sk, Partial_COUNT(*) AS count$0])
                     :              :           +- Calc(select=[c_current_cdemo_sk, c_current_addr_sk])
                     :              :              +- HashSemiJoin(where=[=(c_customer_sk, cs_ship_customer_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[LeftAntiJoin], build=[left])
                     :              :                 :- HashSemiJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[LeftAntiJoin], build=[left])
                     :              :                 :  :- HashSemiJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], joinType=[LeftSemiJoin], build=[left])
                     :              :                 :  :  :- Exchange(distribution=[hash[c_customer_sk]])
                     :              :                 :  :  :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                     :              :                 :  :  +- Exchange(distribution=[hash[ss_customer_sk]])
                     :              :                 :  :     +- Calc(select=[ss_customer_sk])
                     :              :                 :  :        +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :                 :  :           :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk])
                     :              :                 :  :           +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :              :                 :  :              +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1999), >=(d_moy, 1), <=(d_moy, 3))])
                     :              :                 :  :                 +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :              :                 :  +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                     :              :                 :     +- Calc(select=[ws_bill_customer_sk])
                     :              :                 :        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :                 :           :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                     :              :                 :           +- Reused(reference_id=[1])
                     :              :                 +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                     :              :                    +- Calc(select=[cs_ship_customer_sk])
                     :              :                       +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :                          :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ship_customer_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
                     :              :                          +- Reused(reference_id=[1])
                     :              +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating])
                     +- Calc(select=[ca_address_sk], where=[OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD'))])
                        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q7, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 7 in stream 0 using template query7.tpl
select  i_item_id, 
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4 
 from store_sales, customer_demographics, date_dim, item, promotion
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_cdemo_sk = cd_demo_sk and
       ss_promo_sk = p_promo_sk and
       cd_gender = 'M' and 
       cd_marital_status = 'M' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100

-- end query 7 in stream 0 using template query7.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], agg1=[AVG($1)], agg2=[AVG($2)], agg3=[AVG($3)], agg4=[AVG($4)])
   +- LogicalProject(i_item_id=[$61], ss_quantity=[$10], ss_list_price=[$12], ss_coupon_amt=[$19], ss_sales_price=[$13])
      +- LogicalFilter(condition=[AND(=($0, $32), =($2, $60), =($4, $23), =($8, $82), =($24, 'M'), =($25, 'M'), =($26, 'Primary'), OR(=($91, 'N'), =($96, 'N')), =($38, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
         +- Exchange(distribution=[hash[i_item_id]])
            +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_list_price) AS (sum$2, count$3), Partial_AVG(ss_coupon_amt) AS (sum$4, count$5), Partial_AVG(ss_sales_price) AS (sum$6, count$7)])
               +- Calc(select=[i_item_id, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price])
                  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_id])
                     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                     :     :- Exchange(distribution=[hash[ss_item_sk]])
                     :     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                     :     :     +- HashJoin(where=[=(ss_promo_sk, p_promo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, p_promo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :        :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                     :     :        :  +- HashJoin(where=[=(ss_cdemo_sk, cd_demo_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, cd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :        :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                     :     :        :     +- Exchange(distribution=[broadcast])
                     :     :        :        +- Calc(select=[cd_demo_sk], where=[AND(=(cd_gender, 'M'), =(cd_marital_status, 'M'), =(cd_education_status, 'Primary'))])
                     :     :        :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                     :     :        +- Exchange(distribution=[broadcast])
                     :     :           +- Calc(select=[p_promo_sk], where=[OR(=(p_channel_email, 'N'), =(p_channel_event, 'N'))])
                     :     :              +- TableSourceScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_channel_email, p_channel_event];filterPredicates=[]]]], fields=[p_promo_sk, p_channel_email, p_channel_event])
                     :     +- Exchange(distribution=[hash[i_item_sk]])
                     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q70, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 70 in stream 0 using template query70.tpl
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1176 and 1176+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1176 and 1176+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100

-- end query 70 in stream 0 using template query70.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[$0], s_state=[$1], s_county=[$2], lochierarchy=[$3], rank_within_parent=[$4])
+- LogicalSort(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(total_sum=[$2], s_state=[$0], s_county=[$1], lochierarchy=[+($3, $4)], rank_within_parent=[RANK() OVER (PARTITION BY +($3, $4), CASE(=($4, 0), $0, null) ORDER BY $2 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$5=[CASE(=(+($3, $4), 0), $0, null)])
      +- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], total_sum=[SUM($2)], agg#1=[GROUPING($0)], agg#2=[GROUPING($1)])
         +- LogicalProject(s_state=[$75], s_county=[$74], ss_net_profit=[$22])
            +- LogicalFilter(condition=[AND(>=($26, 1176), <=($26, +(1176, 11)), =($23, $0), =($51, $7), IN($75, {
LogicalProject(s_state=[$0])
  LogicalFilter(condition=[<=($1, 5)])
    LogicalProject(s_state=[$0], ranking=[RANK() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
        LogicalProject(s_state=[$47], ss_net_profit=[$22])
          LogicalFilter(condition=[AND(>=($55, 1176), <=($55, +(1176, 11)), =($52, $0), =($23, $7))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
              LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[total_sum, s_state, s_county, $3 AS lochierarchy, w0$o0 AS rank_within_parent])
+- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[false])
         +- OverAggregate(partitionBy=[$3, $4], orderBy=[total_sum DESC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[s_state, s_county, total_sum, $3, $4, $5, w0$o0])
            +- Sort(orderBy=[$3 ASC, $4 ASC, total_sum DESC])
               +- Exchange(distribution=[hash[$3, $4]])
                  +- Calc(select=[s_state, s_county, total_sum, +(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)) AS $3, CASE(=(CASE(=($e, 0), 0, =($e, 1), 1, 1), 0), s_state, null) AS $4, CASE(=(+(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)), 0), s_state, null) AS $5])
                     +- HashAggregate(isMerge=[true], groupBy=[s_state, s_county, $e], select=[s_state, s_county, $e, Final_SUM(sum$0) AS total_sum])
                        +- Exchange(distribution=[hash[s_state, s_county, $e]])
                           +- LocalHashAggregate(groupBy=[s_state, s_county, $e], select=[s_state, s_county, $e, Partial_SUM(ss_net_profit) AS sum$0])
                              +- Expand(projects=[{s_state, s_county, ss_net_profit, 0 AS $e}, {s_state, null AS s_county, ss_net_profit, 1 AS $e}, {null AS s_state, null AS s_county, ss_net_profit, 3 AS $e}])
                                 +- Calc(select=[s_state, s_county, ss_net_profit])
                                    +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_net_profit, s_store_sk, s_county, s_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :- Exchange(distribution=[hash[ss_store_sk]], exchange_mode=[BATCH])
                                       :  +- Calc(select=[ss_store_sk, ss_net_profit], reuse_id=[1])
                                       :     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :        :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_store_sk, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_store_sk, ss_net_profit])
                                       :        +- Exchange(distribution=[broadcast])
                                       :           +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                                       :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
                                       +- Exchange(distribution=[broadcast])
                                          +- HashSemiJoin(where=[=(s_state, s_state0)], join=[s_store_sk, s_county, s_state], joinType=[LeftSemiJoin], build=[left])
                                             :- Exchange(distribution=[hash[s_state]])
                                             :  +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_county, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_county, s_state])
                                             +- Calc(select=[s_state])
                                                +- Rank(rankFunction=[RANK], partitionBy=[s_state], orderBy=[$f1 DESC], rankRange=[rankStart=1, rankEnd=5], global=[true], select=[s_state, $f1])
                                                   +- Sort(orderBy=[s_state ASC, $f1 DESC])
                                                      +- HashAggregate(isMerge=[true], groupBy=[s_state], select=[s_state, Final_SUM(sum$0) AS $f1])
                                                         +- Exchange(distribution=[hash[s_state]])
                                                            +- LocalHashAggregate(groupBy=[s_state], select=[s_state, Partial_SUM(ss_net_profit) AS sum$0])
                                                               +- Calc(select=[s_state, ss_net_profit])
                                                                  +- HashJoin(where=[=(s_store_sk, ss_store_sk)], join=[ss_store_sk, ss_net_profit, s_store_sk, s_state], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                                                     :- Reused(reference_id=[1])
                                                                     +- Exchange(distribution=[broadcast])
                                                                        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_state];filterPredicates=[]]]], fields=[s_store_sk, s_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q71, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 71 in stream 0 using template query71.tpl
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=11
                   and d_year=1998
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=11
                   and d_year=1998
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=11
                   and d_year=1998
                 ) tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
 

-- end query 71 in stream 0 using template query71.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first])
+- LogicalProject(brand_id=[$1], brand=[$0], t_hour=[$2], t_minute=[$3], ext_price=[$4])
   +- LogicalAggregate(group=[{0, 1, 2, 3}], ext_price=[SUM($4)])
      +- LogicalProject(brand=[$8], brand_id=[$7], t_hour=[$29], t_minute=[$30], ext_price=[$22])
         +- LogicalFilter(condition=[AND(=($24, $0), =($20, 1), =($25, $26), OR(=($35, 'breakfast'), =($35, 'dinner')))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               :  +- LogicalUnion(all=[true])
               :     :- LogicalUnion(all=[true])
               :     :  :- LogicalProject(ext_price=[$23], sold_date_sk=[$0], sold_item_sk=[$3], time_sk=[$1])
               :     :  :  +- LogicalFilter(condition=[AND(=($34, $0), =($42, 11), =($40, 1998))])
               :     :  :     +- LogicalJoin(condition=[true], joinType=[inner])
               :     :  :        :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
               :     :  :        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :     :  +- LogicalProject(ext_price=[$23], sold_date_sk=[$0], sold_item_sk=[$15], time_sk=[$1])
               :     :     +- LogicalFilter(condition=[AND(=($34, $0), =($42, 11), =($40, 1998))])
               :     :        +- LogicalJoin(condition=[true], joinType=[inner])
               :     :           :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
               :     :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :     +- LogicalProject(ext_price=[$15], sold_date_sk=[$0], sold_item_sk=[$2], time_sk=[$1])
               :        +- LogicalFilter(condition=[AND(=($23, $0), =($31, 11), =($29, 1998))])
               :           +- LogicalJoin(condition=[true], joinType=[inner])
               :              :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_brand_id AS brand_id, i_brand AS brand, t_hour, t_minute, ext_price])
+- SortLimit(orderBy=[ext_price DESC, i_brand_id ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ext_price DESC, i_brand_id ASC], offset=[0], limit=[200], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[t_hour, t_minute, i_brand_id, i_brand], select=[t_hour, t_minute, i_brand_id, i_brand, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[t_hour, t_minute, i_brand_id, i_brand]])
               +- LocalHashAggregate(groupBy=[t_hour, t_minute, i_brand_id, i_brand], select=[t_hour, t_minute, i_brand_id, i_brand, Partial_SUM(ext_price) AS sum$0])
                  +- HashJoin(where=[=(sold_item_sk, i_item_sk)], join=[sold_item_sk, t_hour, t_minute, ext_price, i_item_sk, i_brand_id, i_brand], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- HashAggregate(isMerge=[true], groupBy=[sold_item_sk, t_hour, t_minute], select=[sold_item_sk, t_hour, t_minute, Final_SUM(sum$0) AS ext_price])
                     :  +- Exchange(distribution=[hash[sold_item_sk, t_hour, t_minute]])
                     :     +- LocalHashAggregate(groupBy=[sold_item_sk, t_hour, t_minute], select=[sold_item_sk, t_hour, t_minute, Partial_SUM(ext_price) AS sum$0])
                     :        +- HashJoin(where=[=(time_sk, t_time_sk)], join=[sold_item_sk, time_sk, ext_price, t_time_sk, t_hour, t_minute], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :           :- HashAggregate(isMerge=[true], groupBy=[sold_item_sk, time_sk], select=[sold_item_sk, time_sk, Final_SUM(sum$0) AS ext_price])
                     :           :  +- Exchange(distribution=[hash[sold_item_sk, time_sk]])
                     :           :     +- LocalHashAggregate(groupBy=[sold_item_sk, time_sk], select=[sold_item_sk, time_sk, Partial_SUM(ext_price) AS sum$0])
                     :           :        +- Calc(select=[ext_price, sold_item_sk, time_sk])
                     :           :           +- Union(all=[true], union=[ext_price, sold_date_sk, sold_item_sk, time_sk])
                     :           :              :- Union(all=[true], union=[ext_price, sold_date_sk, sold_item_sk, time_sk])
                     :           :              :  :- Calc(select=[ws_ext_sales_price AS ext_price, ws_sold_date_sk AS sold_date_sk, ws_item_sk AS sold_item_sk, ws_sold_time_sk AS time_sk])
                     :           :              :  :  +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :           :              :  :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price])
                     :           :              :  :     +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :           :              :  :        +- Calc(select=[d_date_sk], where=[AND(=(d_moy, 11), =(d_year, 1998))])
                     :           :              :  :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                     :           :              :  +- Calc(select=[cs_ext_sales_price AS ext_price, cs_sold_date_sk AS sold_date_sk, cs_item_sk AS sold_item_sk, cs_sold_time_sk AS time_sk])
                     :           :              :     +- HashJoin(where=[=(d_date_sk, cs_sold_date_sk)], join=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :           :              :        :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price])
                     :           :              :        +- Reused(reference_id=[1])
                     :           :              +- Calc(select=[ss_ext_sales_price AS ext_price, ss_sold_date_sk AS sold_date_sk, ss_item_sk AS sold_item_sk, ss_sold_time_sk AS time_sk])
                     :           :                 +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :           :                    :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price])
                     :           :                    +- Reused(reference_id=[1])
                     :           +- Exchange(distribution=[broadcast])
                     :              +- Calc(select=[t_time_sk, t_hour, t_minute], where=[OR(=(t_meal_time, 'breakfast'), =(t_meal_time, 'dinner'))])
                     :                 +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute, t_meal_time];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute, t_meal_time])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[=(i_manager_id, 1)])
                           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_brand, i_manager_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q72, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 72 in stream 0 using template query72.tpl
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,sum(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,sum(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + interval '5' day
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 1998
  and cd_marital_status = 'M'
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100

-- end query 72 in stream 0 using template query72.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$5], sort1=[$0], sort2=[$1], sort3=[$2], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], no_promo=[SUM($3)], promo=[SUM($4)], total_cnt=[COUNT()])
   +- LogicalProject(i_item_desc=[$56], w_warehouse_name=[$40], d_week_seq=[$92], $f3=[CASE(IS NULL($172), 1, 0)], $f4=[CASE(IS NOT NULL($172), 1, 0)])
      +- LogicalFilter(condition=[AND(=($92, $120), <($37, $18), >($146, +($90, 432000000)), =($85, '1001-5000'), =($94, 1998), =($76, 'M'))])
         +- LogicalJoin(condition=[AND(=($193, $15), =($207, $17))], joinType=[left])
            :- LogicalJoin(condition=[=($16, $172)], joinType=[left])
            :  :- LogicalJoin(condition=[=($2, $144)], joinType=[inner])
            :  :  :- LogicalJoin(condition=[=($34, $116)], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[=($0, $88)], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[=($5, $83)], joinType=[inner])
            :  :  :  :  :  :- LogicalJoin(condition=[=($4, $74)], joinType=[inner])
            :  :  :  :  :  :  :- LogicalJoin(condition=[=($52, $15)], joinType=[inner])
            :  :  :  :  :  :  :  :- LogicalJoin(condition=[=($38, $36)], joinType=[inner])
            :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[=($15, $35)], joinType=[inner])
            :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
            :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
            :  :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
            :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
            :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[total_cnt DESC, i_item_desc ASC, w_warehouse_name ASC, d_week_seq ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_cnt DESC, i_item_desc ASC, w_warehouse_name ASC, d_week_seq ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_desc, w_warehouse_name, d_week_seq], select=[i_item_desc, w_warehouse_name, d_week_seq, Final_SUM(sum$0) AS no_promo, Final_SUM(sum$1) AS promo, Final_COUNT(count$2) AS total_cnt])
         +- Exchange(distribution=[hash[i_item_desc, w_warehouse_name, d_week_seq]])
            +- LocalHashAggregate(groupBy=[i_item_desc, w_warehouse_name, d_week_seq], select=[i_item_desc, w_warehouse_name, d_week_seq, Partial_SUM($f3) AS sum$0, Partial_SUM($f4) AS sum$1, Partial_COUNT(*) AS count$2])
               +- Calc(select=[i_item_desc, w_warehouse_name, d_week_seq0 AS d_week_seq, CASE(IS NULL(p_promo_sk), 1, 0) AS $f3, CASE(IS NOT NULL(p_promo_sk), 1, 0) AS $f4])
                  +- HashJoin(where=[=(i_item_sk, cs_item_sk)], join=[cs_item_sk, d_week_seq0, w_warehouse_name, p_promo_sk, i_item_sk, i_item_desc], joinType=[InnerJoin], isBroadcast=[true], build=[left])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[cs_item_sk, d_week_seq0, w_warehouse_name, p_promo_sk])
                     :     +- HashJoin(where=[=(cs_promo_sk, p_promo_sk)], join=[cs_item_sk, cs_promo_sk, d_week_seq0, w_warehouse_name, p_promo_sk], joinType=[LeftOuterJoin], isBroadcast=[true], build=[right])
                     :        :- Calc(select=[cs_item_sk, cs_promo_sk, d_week_seq0, w_warehouse_name])
                     :        :  +- HashJoin(where=[=(w_warehouse_sk, inv_warehouse_sk)], join=[cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :- Calc(select=[cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0])
                     :        :     :  +- HashJoin(where=[=(cs_bill_cdemo_sk, cd_demo_sk)], join=[cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0, cd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :     :- Calc(select=[cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0])
                     :        :     :     :  +- HashJoin(where=[=(cs_bill_hdemo_sk, hd_demo_sk)], join=[cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :     :     :- Calc(select=[cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_week_seq0])
                     :        :     :     :     :  +- HashJoin(where=[AND(=(cs_ship_date_sk, d_date_sk), >(d_date, +(d_date0, 432000000)))], join=[cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_date0, d_week_seq0, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :     :     :     :- Calc(select=[cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, inv_warehouse_sk, d_date0, d_week_seq0])
                     :        :     :     :     :     :  +- HashJoin(where=[AND(=(cs_sold_date_sk, d_date_sk0), =(cs_item_sk, inv_item_sk), <(inv_quantity_on_hand, cs_quantity))], join=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk0, d_date0, d_week_seq0], joinType=[InnerJoin], build=[right])
                     :        :     :     :     :     :     :- Exchange(distribution=[hash[cs_item_sk]])
                     :        :     :     :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity])
                     :        :     :     :     :     :     +- Exchange(distribution=[hash[inv_item_sk]])
                     :        :     :     :     :     :        +- Calc(select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk0, d_date0, d_week_seq0])
                     :        :     :     :     :     :           +- HashJoin(where=[=(inv_date_sk, d_date_sk)], join=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk, d_date_sk0, d_date0, d_week_seq0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :     :     :     :              :- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                     :        :     :     :     :     :              +- Exchange(distribution=[broadcast])
                     :        :     :     :     :     :                 +- Calc(select=[d_date_sk, d_date_sk0, d_date AS d_date0, d_week_seq0])
                     :        :     :     :     :     :                    +- HashJoin(where=[=(d_week_seq0, d_week_seq)], join=[d_date_sk, d_week_seq, d_date_sk0, d_date, d_week_seq0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :        :     :     :     :     :                       :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_week_seq];filterPredicates=[]]]], fields=[d_date_sk, d_week_seq])
                     :        :     :     :     :     :                       +- Exchange(distribution=[broadcast])
                     :        :     :     :     :     :                          +- Calc(select=[d_date_sk, d_date, d_week_seq], where=[=(d_year, 1998)])
                     :        :     :     :     :     :                             +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_week_seq, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_week_seq, d_year])
                     :        :     :     :     :     +- Exchange(distribution=[broadcast])
                     :        :     :     :     :        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                     :        :     :     :     +- Exchange(distribution=[broadcast])
                     :        :     :     :        +- Calc(select=[hd_demo_sk], where=[=(hd_buy_potential, '1001-5000')])
                     :        :     :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_buy_potential];filterPredicates=[]]]], fields=[hd_demo_sk, hd_buy_potential])
                     :        :     :     +- Exchange(distribution=[broadcast])
                     :        :     :        +- Calc(select=[cd_demo_sk], where=[=(cd_marital_status, 'M')])
                     :        :     :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status])
                     :        :     +- Exchange(distribution=[broadcast])
                     :        :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
                     :        +- Exchange(distribution=[broadcast])
                     :           +- TableSourceScan(table=[[builtin, default, promotion, source: [TestParquetTableSource -> selectedFields=[p_promo_sk];filterPredicates=[]]]], fields=[p_promo_sk])
                     +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_desc];filterPredicates=[]]]], fields=[i_item_sk, i_item_desc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q73, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 73 in stream 0 using template query73.tpl
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag 
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2 
    and (household_demographics.hd_buy_potential = '1001-5000' or
         household_demographics.hd_buy_potential = '0-500')
    and household_demographics.hd_vehicle_count > 0
    and case when household_demographics.hd_vehicle_count > 0 then 
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
    and date_dim.d_year in (1998,1998+1,1998+2)
    and store.s_county in ('Williamson County','Ziebach County','Walker County','Fairfield County')
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc, c_last_name asc

-- end query 73 in stream 0 using template query73.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$5], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first])
+- LogicalProject(c_last_name=[$12], c_first_name=[$11], c_salutation=[$10], c_preferred_cust_flag=[$13], ss_ticket_number=[$0], cnt=[$2])
   +- LogicalFilter(condition=[AND(=($1, $3), >=($2, 1), <=($2, 5))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1}], cnt=[COUNT()])
         :  +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3])
         :     +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), >=($32, 1), <=($32, 2), OR(=($82, '1001-5000'), =($82, '0-500')), >($84, 0), >(CASE(>($84, 0), /(CAST($83):DOUBLE, CAST($84):DOUBLE), null), 1), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL)), OR(=($74, 'Williamson County'), =($74, 'Ziebach County'), =($74, 'Walker County'), =($74, 'Fairfield County')))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :           :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :           :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :           +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number, cnt])
+- SortLimit(orderBy=[cnt DESC, c_last_name ASC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cnt DESC, c_last_name ASC], offset=[0], limit=[200], global=[false])
         +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_ticket_number, ss_customer_sk, cnt, c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, cnt], where=[AND(>=(cnt, 1), <=(cnt, 5))])
            :     +- HashAggregate(isMerge=[true], groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, Final_COUNT(count$0) AS cnt])
            :        +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk]])
            :           +- LocalHashAggregate(groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, Partial_COUNT(*) AS count$0])
            :              +- Calc(select=[ss_ticket_number, ss_customer_sk])
            :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_store_sk, ss_ticket_number, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_customer_sk, ss_store_sk, ss_ticket_number])
            :                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])
            :                    :     :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])
            :                    :     :     +- Exchange(distribution=[broadcast])
            :                    :     :        +- Calc(select=[hd_demo_sk], where=[AND(OR(=(hd_buy_potential, '1001-5000'), =(hd_buy_potential, '0-500')), >(hd_vehicle_count, 0), CASE(>(hd_vehicle_count, 0), >(/(CAST(hd_dep_count), CAST(hd_vehicle_count)), 1), null))])
            :                    :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count])
            :                    :     +- Exchange(distribution=[broadcast])
            :                    :        +- Calc(select=[d_date_sk], where=[AND(>=(d_dom, 1), <=(d_dom, 2), OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000)))])
            :                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_dom];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_dom])
            :                    +- Exchange(distribution=[broadcast])
            :                       +- Calc(select=[s_store_sk], where=[IN(s_county, 'Williamson County', 'Ziebach County', 'Walker County', 'Fairfield County')])
            :                          +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_county];filterPredicates=[]]]], fields=[s_store_sk, s_county])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag];filterPredicates=[]]]], fields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q74, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 74 in stream 0 using template query74.tpl
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as `year`
       ,sum(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as `year`
       ,sum(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (1998,1998+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.`year` = 1998
         and t_s_secyear.`year` = 1998+1
         and t_w_firstyear.`year` = 1998
         and t_w_secyear.`year` = 1998+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 1,2,3
limit 100

-- end query 74 in stream 0 using template query74.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$6], customer_first_name=[$7], customer_last_name=[$8])
   +- LogicalFilter(condition=[AND(=($6, $0), =($0, $18), =($0, $12), =($5, 's'), =($17, 'w'), =($11, 's'), =($23, 'w'), =($3, 1998), =($9, CAST(+(1998, 1)):BIGINT NOT NULL), =($15, 1998), =($21, CAST(+(1998, 1)):BIGINT NOT NULL), >($4, 0), >($16, 0), >(CASE(>($16, 0), /($22, $16), null), CASE(>($4, 0), /($10, $4), null)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalUnion(all=[true])
         :  :  :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['s'])
         :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :  :  :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :  :  :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['w'])
         :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :  :  :           +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 1998), =($58, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :                 :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :  :                 +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :  +- LogicalUnion(all=[true])
         :  :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['s'])
         :  :     :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :  :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :  :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :  :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :     :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :  :     :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['w'])
         :  :        +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 1998), =($58, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :  :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['s'])
         :     :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :     :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :     :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['w'])
         :        +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
         :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 1998), =($58, CAST(+(1998, 1)):BIGINT NOT NULL)))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :                    :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :                    :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalUnion(all=[true])
            :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['s'])
            :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
            :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
            :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 1998), =($47, CAST(+(1998, 1)):BIGINT NOT NULL)))])
            :           +- LogicalJoin(condition=[true], joinType=[inner])
            :              :- LogicalJoin(condition=[true], joinType=[inner])
            :              :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
            :              :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=['w'])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[SUM($4)])
                  +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
                     +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 1998), =($58, CAST(+(1998, 1)):BIGINT NOT NULL)))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
                           :  +- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[customer_id0 AS customer_id, customer_first_name, customer_last_name])
+- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[customer_id0 ASC, customer_first_name ASC, customer_last_name ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[AND(CASE(CAST(IS NOT NULL(year_total)), CASE(CAST(IS NOT NULL(year_total000)), >(/(year_total00, year_total000), /(year_total0, year_total)), >(null, /(year_total0, year_total))), CASE(CAST(IS NOT NULL(year_total000)), >(/(year_total00, year_total000), null), null)), =(customer_id, customer_id00))], join=[customer_id, year_total, customer_id0, customer_first_name, customer_last_name, year_total0, customer_id00, year_total00, year_total000], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
            :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Final_SUM(sum$0) AS year_total])
            :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, year]])
            :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Partial_SUM(ss_net_paid) AS sum$0])
            :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, CAST(1998) AS year, ss_net_paid])
            :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_net_paid, c_customer_id, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_sold_date_sk, ss_net_paid, c_customer_id, c_first_name, c_last_name], reuse_id=[1])
            :                    :  +- HashJoin(where=[=(c_customer_sk, ss_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_net_paid, c_customer_sk, c_customer_id, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
            :                    :     :- Exchange(distribution=[hash[ss_customer_sk]])
            :                    :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_net_paid];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_net_paid])
            :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
            :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
            :                    +- Exchange(distribution=[broadcast], reuse_id=[4])
            :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            +- Exchange(distribution=[hash[customer_id0]])
               +- Calc(select=[customer_id, customer_first_name, customer_last_name, year_total, customer_id0, year_total0, year_total00])
                  +- HashJoin(where=[=(customer_id, customer_id00)], join=[customer_id, customer_first_name, customer_last_name, year_total, customer_id0, year_total0, customer_id00, year_total00], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[customer_id]])
                     :  +- Calc(select=[customer_id, customer_first_name, customer_last_name, year_total])
                     :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Final_SUM(sum$0) AS year_total])
                     :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, year]])
                     :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Partial_SUM(ss_net_paid) AS sum$0])
                     :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, CAST(1999) AS year, ss_net_paid])
                     :                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_net_paid, c_customer_id, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :                    :- Reused(reference_id=[1])
                     :                    +- Exchange(distribution=[broadcast], reuse_id=[2])
                     :                       +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
                     :                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                     +- HashJoin(where=[=(customer_id, customer_id0)], join=[customer_id, year_total, customer_id0, year_total0], joinType=[InnerJoin], build=[right])
                        :- Exchange(distribution=[hash[customer_id]])
                        :  +- Calc(select=[customer_id, year_total])
                        :     +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Final_SUM(sum$0) AS year_total])
                        :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, year]])
                        :           +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Partial_SUM(ws_net_paid) AS sum$0])
                        :              +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, CAST(1999) AS year, ws_net_paid])
                        :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_net_paid, c_customer_id, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :                    :- Calc(select=[ws_sold_date_sk, ws_net_paid, c_customer_id, c_first_name, c_last_name], reuse_id=[3])
                        :                    :  +- HashJoin(where=[=(c_customer_sk, ws_bill_customer_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid, c_customer_sk, c_customer_id, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                        :                    :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid])
                        :                    :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :                    :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
                        :                    +- Reused(reference_id=[2])
                        +- Exchange(distribution=[hash[customer_id]])
                           +- Calc(select=[customer_id, year_total], where=[>(year_total, 0)])
                              +- HashAggregate(isMerge=[true], groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Final_SUM(sum$0) AS year_total])
                                 +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, year]])
                                    +- LocalHashAggregate(groupBy=[customer_id, customer_first_name, customer_last_name, year], select=[customer_id, customer_first_name, customer_last_name, year, Partial_SUM(ws_net_paid) AS sum$0])
                                       +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, CAST(1998) AS year, ws_net_paid])
                                          +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_net_paid, c_customer_id, c_first_name, c_last_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                             :- Reused(reference_id=[3])
                                             +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q75, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 75 in stream 0 using template query75.tpl
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Women'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Women'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Women') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS `year`
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=1999
   AND prev_yr.d_year=1999-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100

-- end query 75 in stream 0 using template query75.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$8], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(prev_year=[$7], year=[$0], i_brand_id=[$1], i_class_id=[$2], i_category_id=[$3], i_manufact_id=[$4], prev_yr_cnt=[$12], curr_yr_cnt=[$5], sales_cnt_diff=[-($5, $12)], sales_amt_diff=[-($6, $13)])
   +- LogicalFilter(condition=[AND(=($1, $8), =($2, $9), =($3, $10), =($4, $11), =($0, 1999), =($7, CAST(-(1999, 1)):BIGINT NOT NULL), <(/(CAST($5):DECIMAL(17, 2), CAST($12):DECIMAL(17, 2)), 0.9))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[SUM($5)], sales_amt=[SUM($6)])
         :  +- LogicalUnion(all=[false])
         :     :- LogicalUnion(all=[false])
         :     :  :- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, CASE(IS NOT NULL($101), $101, 0))], sales_amt=[-($23, CASE(IS NOT NULL($102), $102, 0.0))])
         :     :  :  +- LogicalFilter(condition=[=($46, 'Women')])
         :     :  :     +- LogicalJoin(condition=[AND(=($17, $100), =($15, $86))], joinType=[left])
         :     :  :        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
         :     :  :        :  :- LogicalJoin(condition=[=($34, $15)], joinType=[inner])
         :     :  :        :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
         :     :  :        :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :     :  :        :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     :  :        +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
         :     :  +- LogicalProject(d_year=[$51], i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], i_manufact_id=[$36], sales_cnt=[-($10, CASE(IS NOT NULL($83), $83, 0))], sales_amt=[-($15, CASE(IS NOT NULL($84), $84, 0.0))])
         :     :     +- LogicalFilter(condition=[=($35, 'Women')])
         :     :        +- LogicalJoin(condition=[AND(=($9, $82), =($2, $75))], joinType=[left])
         :     :           :- LogicalJoin(condition=[=($45, $0)], joinType=[inner])
         :     :           :  :- LogicalJoin(condition=[=($23, $2)], joinType=[inner])
         :     :           :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :     :           :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :     :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :     :           +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
         :     +- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, CASE(IS NOT NULL($98), $98, 0))], sales_amt=[-($23, CASE(IS NOT NULL($99), $99, 0.0))])
         :        +- LogicalFilter(condition=[=($46, 'Women')])
         :           +- LogicalJoin(condition=[AND(=($17, $97), =($3, $86))], joinType=[left])
         :              :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
         :              :  :- LogicalJoin(condition=[=($34, $3)], joinType=[inner])
         :              :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
         :              :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[SUM($5)], sales_amt=[SUM($6)])
            +- LogicalUnion(all=[false])
               :- LogicalUnion(all=[false])
               :  :- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, CASE(IS NOT NULL($101), $101, 0))], sales_amt=[-($23, CASE(IS NOT NULL($102), $102, 0.0))])
               :  :  +- LogicalFilter(condition=[=($46, 'Women')])
               :  :     +- LogicalJoin(condition=[AND(=($17, $100), =($15, $86))], joinType=[left])
               :  :        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
               :  :        :  :- LogicalJoin(condition=[=($34, $15)], joinType=[inner])
               :  :        :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
               :  :        :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               :  :        :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  :        +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
               :  +- LogicalProject(d_year=[$51], i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], i_manufact_id=[$36], sales_cnt=[-($10, CASE(IS NOT NULL($83), $83, 0))], sales_amt=[-($15, CASE(IS NOT NULL($84), $84, 0.0))])
               :     +- LogicalFilter(condition=[=($35, 'Women')])
               :        +- LogicalJoin(condition=[AND(=($9, $82), =($2, $75))], joinType=[left])
               :           :- LogicalJoin(condition=[=($45, $0)], joinType=[inner])
               :           :  :- LogicalJoin(condition=[=($23, $2)], joinType=[inner])
               :           :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :           :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :           +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
               +- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, CASE(IS NOT NULL($98), $98, 0))], sales_amt=[-($23, CASE(IS NOT NULL($99), $99, 0.0))])
                  +- LogicalFilter(condition=[=($46, 'Women')])
                     +- LogicalJoin(condition=[AND(=($17, $97), =($3, $86))], joinType=[left])
                        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
                        :  :- LogicalJoin(condition=[=($34, $3)], joinType=[inner])
                        :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                        :  :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[sales_cnt_diff ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[sales_cnt_diff ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(1998) AS prev_year, CAST(1999) AS year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt0 AS prev_yr_cnt, sales_cnt AS curr_yr_cnt, -(sales_cnt, sales_cnt0) AS sales_cnt_diff, -(sales_amt, sales_amt0) AS sales_amt_diff])
         +- HashJoin(where=[AND(=(i_brand_id, i_brand_id0), =(i_class_id, i_class_id0), =(i_category_id, i_category_id0), =(i_manufact_id, i_manufact_id0), <(/(CAST(sales_cnt), CAST(sales_cnt0)), 0.9))], join=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt, i_brand_id0, i_class_id0, i_category_id0, i_manufact_id0, sales_cnt0, sales_amt0], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id, i_manufact_id]])
            :  +- Calc(select=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :     +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Final_SUM(sum$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])
            :        +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id]])
            :           +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Partial_SUM(sales_cnt) AS sum$0, Partial_SUM(sales_amt) AS sum$1])
            :              +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                 +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
            :                    +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                       +- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                          :- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                          :  :- Calc(select=[CAST(1999) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(cs_quantity, CASE(IS NOT NULL(cr_return_quantity), cr_return_quantity, 0)) AS sales_cnt, -(cs_ext_sales_price, CASE(IS NOT NULL(cr_return_amount), cr_return_amount, 0.0)) AS sales_amt])
            :                          :  :  +- HashJoin(where=[=(d_date_sk, cs_sold_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, cr_return_quantity, cr_return_amount, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :  :     :- Calc(select=[cs_sold_date_sk, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, cr_return_quantity, cr_return_amount], reuse_id=[3])
            :                          :  :     :  +- HashJoin(where=[AND(=(cs_order_number, cr_order_number), =(cs_item_sk, cr_item_sk))], join=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount], joinType=[LeftOuterJoin], build=[right])
            :                          :  :     :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
            :                          :  :     :     :  +- HashJoin(where=[=(i_item_sk, cs_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :  :     :     :     :- Exchange(distribution=[hash[cs_order_number, cs_item_sk]])
            :                          :  :     :     :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price])
            :                          :  :     :     :     +- Exchange(distribution=[broadcast], reuse_id=[1])
            :                          :  :     :     :        +- Calc(select=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], where=[=(i_category, 'Women')])
            :                          :  :     :     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_category, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_category, i_manufact_id])
            :                          :  :     :     +- Exchange(distribution=[hash[cr_order_number, cr_item_sk]])
            :                          :  :     :        +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount];filterPredicates=[]]]], fields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount])
            :                          :  :     +- Exchange(distribution=[broadcast], reuse_id=[2])
            :                          :  :        +- Calc(select=[d_date_sk], where=[=(d_year, 1999)])
            :                          :  :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :                          :  +- Calc(select=[CAST(1999) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(ss_quantity, CASE(IS NOT NULL(sr_return_quantity), sr_return_quantity, 0)) AS sales_cnt, -(ss_ext_sales_price, CASE(IS NOT NULL(sr_return_amt), sr_return_amt, 0.0)) AS sales_amt])
            :                          :     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_ext_sales_price, sr_return_quantity, sr_return_amt, i_brand_id, i_class_id, i_category_id, i_manufact_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :        :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_ext_sales_price, sr_return_quantity, sr_return_amt, i_brand_id, i_class_id, i_category_id, i_manufact_id], reuse_id=[4])
            :                          :        :  +- HashJoin(where=[=(i_item_sk, ss_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_ext_sales_price, sr_return_quantity, sr_return_amt, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                          :        :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_ext_sales_price, sr_return_quantity, sr_return_amt])
            :                          :        :     :  +- HashJoin(where=[AND(=(ss_ticket_number, sr_ticket_number), =(ss_item_sk, sr_item_sk))], join=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt], joinType=[LeftOuterJoin], build=[right])
            :                          :        :     :     :- Exchange(distribution=[hash[ss_item_sk]])
            :                          :        :     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price])
            :                          :        :     :     +- Exchange(distribution=[hash[sr_item_sk]])
            :                          :        :     :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt])
            :                          :        :     +- Reused(reference_id=[1])
            :                          :        +- Reused(reference_id=[2])
            :                          +- Calc(select=[CAST(1999) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(ws_quantity, CASE(IS NOT NULL(wr_return_quantity), wr_return_quantity, 0)) AS sales_cnt, -(ws_ext_sales_price, CASE(IS NOT NULL(wr_return_amt), wr_return_amt, 0.0)) AS sales_amt])
            :                             +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, wr_return_quantity, wr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                                :- Calc(select=[ws_sold_date_sk, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, wr_return_quantity, wr_return_amt], reuse_id=[6])
            :                                :  +- HashJoin(where=[AND(=(ws_order_number, wr_order_number), =(ws_item_sk, wr_item_sk))], join=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt], joinType=[LeftOuterJoin], build=[right])
            :                                :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
            :                                :     :  +- HashJoin(where=[=(i_item_sk, ws_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                                :     :     :- Exchange(distribution=[hash[ws_order_number, ws_item_sk]])
            :                                :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])
            :                                :     :     +- Reused(reference_id=[1])
            :                                :     +- Exchange(distribution=[hash[wr_order_number, wr_item_sk]])
            :                                :        +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt];filterPredicates=[]]]], fields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt])
            :                                +- Reused(reference_id=[2])
            +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id, i_manufact_id]])
               +- Calc(select=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                  +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Final_SUM(sum$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])
                     +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id]])
                        +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Partial_SUM(sales_cnt) AS sum$0, Partial_SUM(sales_amt) AS sum$1])
                           +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                              +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
                                 +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                                    +- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                                       :- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                                       :  :- Calc(select=[CAST(1998) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(cs_quantity, CASE(IS NOT NULL(cr_return_quantity), cr_return_quantity, 0)) AS sales_cnt, -(cs_ext_sales_price, CASE(IS NOT NULL(cr_return_amount), cr_return_amount, 0.0)) AS sales_amt])
                                       :  :  +- HashJoin(where=[=(d_date_sk, cs_sold_date_sk)], join=[cs_sold_date_sk, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, cr_return_quantity, cr_return_amount, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :  :     :- Reused(reference_id=[3])
                                       :  :     +- Exchange(distribution=[broadcast], reuse_id=[5])
                                       :  :        +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                                       :  :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
                                       :  +- Calc(select=[CAST(1998) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(ss_quantity, CASE(IS NOT NULL(sr_return_quantity), sr_return_quantity, 0)) AS sales_cnt, -(ss_ext_sales_price, CASE(IS NOT NULL(sr_return_amt), sr_return_amt, 0.0)) AS sales_amt])
                                       :     +- HashJoin(where=[=(d_date_sk, ss_sold_date_sk)], join=[ss_sold_date_sk, ss_quantity, ss_ext_sales_price, sr_return_quantity, sr_return_amt, i_brand_id, i_class_id, i_category_id, i_manufact_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :        :- Reused(reference_id=[4])
                                       :        +- Reused(reference_id=[5])
                                       +- Calc(select=[CAST(1998) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, -(ws_quantity, CASE(IS NOT NULL(wr_return_quantity), wr_return_quantity, 0)) AS sales_cnt, -(ws_ext_sales_price, CASE(IS NOT NULL(wr_return_amt), wr_return_amt, 0.0)) AS sales_amt])
                                          +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id, wr_return_quantity, wr_return_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                             :- Reused(reference_id=[6])
                                             +- Reused(reference_id=[5])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q76, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 76 in stream 0 using template query76.tpl
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_customer_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_customer_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_bill_customer_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_bill_customer_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_bill_customer_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_bill_customer_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100

-- end query 76 in stream 0 using template query76.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[COUNT()], sales_amt=[SUM($5)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=['store'], col_name=['ss_customer_sk'], d_year=[$51], d_qoy=[$55], i_category=[$35], ext_sales_price=[$15])
      :  :  +- LogicalFilter(condition=[AND(IS NULL($3), =($0, $45), =($2, $23))])
      :  :     +- LogicalJoin(condition=[true], joinType=[inner])
      :  :        :- LogicalJoin(condition=[true], joinType=[inner])
      :  :        :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :        :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :  :        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  +- LogicalProject(channel=['web'], col_name=['ws_bill_customer_sk'], d_year=[$62], d_qoy=[$66], i_category=[$46], ext_sales_price=[$23])
      :     +- LogicalFilter(condition=[AND(IS NULL($4), =($0, $56), =($3, $34))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
      :           :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
      :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalProject(channel=['catalog'], col_name=['cs_bill_customer_sk'], d_year=[$62], d_qoy=[$66], i_category=[$46], ext_sales_price=[$23])
         +- LogicalFilter(condition=[AND(IS NULL($3), =($0, $56), =($15, $34))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, col_name ASC, d_year ASC, d_qoy ASC, i_category ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, col_name ASC, d_year ASC, d_qoy ASC, i_category ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[channel, col_name, d_year, d_qoy, i_category], select=[channel, col_name, d_year, d_qoy, i_category, Final_COUNT(count$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])
         +- Exchange(distribution=[hash[channel, col_name, d_year, d_qoy, i_category]])
            +- LocalHashAggregate(groupBy=[channel, col_name, d_year, d_qoy, i_category], select=[channel, col_name, d_year, d_qoy, i_category, Partial_COUNT(*) AS count$0, Partial_SUM(ext_sales_price) AS sum$1])
               +- Union(all=[true], union=[channel, col_name, d_year, d_qoy, i_category, ext_sales_price])
                  :- Calc(select=[CAST(channel) AS channel, col_name, d_year, d_qoy, i_category, ext_sales_price])
                  :  +- Union(all=[true], union=[channel, col_name, d_year, d_qoy, i_category, ext_sales_price])
                  :     :- Calc(select=['store' AS channel, 'ss_customer_sk' AS col_name, d_year, d_qoy, i_category, ss_ext_sales_price AS ext_sales_price])
                  :     :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_category, d_date_sk, d_year, d_qoy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :     :     :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_category])
                  :     :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_category], joinType=[InnerJoin], build=[right])
                  :     :     :     :- Exchange(distribution=[hash[ss_item_sk]])
                  :     :     :     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[IS NULL(ss_customer_sk)])
                  :     :     :     :     +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ext_sales_price])
                  :     :     :     +- Exchange(distribution=[hash[i_item_sk]])
                  :     :     :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_category])
                  :     :     +- Exchange(distribution=[broadcast])
                  :     :        +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                  :     +- Calc(select=['web' AS channel, 'ws_bill_customer_sk' AS col_name, d_year, d_qoy, i_category, ws_ext_sales_price AS ext_sales_price])
                  :        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, i_category, d_date_sk, d_year, d_qoy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                  :           :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, i_category])
                  :           :  +- HashJoin(where=[=(ws_item_sk, i_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, i_item_sk, i_category], joinType=[InnerJoin], build=[right])
                  :           :     :- Exchange(distribution=[hash[ws_item_sk]])
                  :           :     :  +- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price], where=[IS NULL(ws_bill_customer_sk)])
                  :           :     :     +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_ext_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_ext_sales_price])
                  :           :     +- Exchange(distribution=[hash[i_item_sk]])
                  :           :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_category])
                  :           +- Exchange(distribution=[broadcast])
                  :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                  +- Calc(select=['catalog' AS channel, 'cs_bill_customer_sk' AS col_name, d_year, d_qoy, i_category, cs_ext_sales_price AS ext_sales_price])
                     +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ext_sales_price, i_category, d_date_sk, d_year, d_qoy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[cs_sold_date_sk, cs_ext_sales_price, i_category])
                        :  +- HashJoin(where=[=(cs_item_sk, i_item_sk)], join=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, i_item_sk, i_category], joinType=[InnerJoin], build=[right])
                        :     :- Exchange(distribution=[hash[cs_item_sk]])
                        :     :  +- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price], where=[IS NULL(cs_bill_customer_sk)])
                        :     :     +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_ext_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_ext_sales_price])
                        :     +- Exchange(distribution=[hash[i_item_sk]])
                        :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_category])
                        +- Exchange(distribution=[broadcast])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q77, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 77 in stream 0 using template query77.tpl
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date) 
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as `returns`,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
 group by cs_call_center_sk 
 ), 
 cr as
 (select cr_call_center_sk,
         sum(cr_return_amount) as `returns`,
         sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
 group by cr_call_center_sk
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as `returns`,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-02' as date)
                  and (cast('1998-08-02' as date) +  INTERVAL '30' day)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(`returns`, 0) as `returns`
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(`returns`, 0) `returns`
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 77 in stream 0 using template query77.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=['store channel'], id=[$0], sales=[$1], returns=[CASE(IS NOT NULL($4), $4, 0)], profit=[-($2, CASE(IS NOT NULL($5), $5, 0))])
      :  :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :  :     :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
      :  :     :  +- LogicalProject(s_store_sk=[$51], ss_ext_sales_price=[$15], ss_net_profit=[$22])
      :  :     :     +- LogicalFilter(condition=[AND(=($0, $23), >=($25, CAST('1998-08-02'):DATE NOT NULL), <=($25, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)), =($7, $51))])
      :  :     :        +- LogicalJoin(condition=[true], joinType=[inner])
      :  :     :           :- LogicalJoin(condition=[true], joinType=[inner])
      :  :     :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :     :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :     :           +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
      :  :     +- LogicalAggregate(group=[{0}], returns=[SUM($1)], profit_loss=[SUM($2)])
      :  :        +- LogicalProject(s_store_sk=[$48], sr_return_amt=[$11], sr_net_loss=[$19])
      :  :           +- LogicalFilter(condition=[AND(=($0, $20), >=($22, CAST('1998-08-02'):DATE NOT NULL), <=($22, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)), =($7, $48))])
      :  :              +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :  :- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
      :  :                 :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :                 +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
      :  +- LogicalProject(channel=['catalog channel'], id=[$0], sales=[$1], returns=[$4], profit=[-($2, $5)])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
      :        :  +- LogicalProject(cs_call_center_sk=[$11], cs_ext_sales_price=[$23], cs_net_profit=[$33])
      :        :     +- LogicalFilter(condition=[AND(=($0, $34), >=($36, CAST('1998-08-02'):DATE NOT NULL), <=($36, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)))])
      :        :        +- LogicalJoin(condition=[true], joinType=[inner])
      :        :           :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :        :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :        +- LogicalAggregate(group=[{0}], returns=[SUM($1)], profit_loss=[SUM($2)])
      :           +- LogicalProject(cr_call_center_sk=[$11], cr_return_amount=[$18], cr_net_loss=[$26])
      :              +- LogicalFilter(condition=[AND(=($0, $27), >=($29, CAST('1998-08-02'):DATE NOT NULL), <=($29, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)))])
      :                 +- LogicalJoin(condition=[true], joinType=[inner])
      :                    :- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
      :                    +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      +- LogicalProject(channel=['web channel'], id=[$0], sales=[$1], returns=[CASE(IS NOT NULL($4), $4, 0)], profit=[-($2, CASE(IS NOT NULL($5), $5, 0))])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
            :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
            :  +- LogicalProject(wp_web_page_sk=[$62], ws_ext_sales_price=[$23], ws_net_profit=[$33])
            :     +- LogicalFilter(condition=[AND(=($0, $34), >=($36, CAST('1998-08-02'):DATE NOT NULL), <=($36, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)), =($12, $62))])
            :        +- LogicalJoin(condition=[true], joinType=[inner])
            :           :- LogicalJoin(condition=[true], joinType=[inner])
            :           :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :           +- LogicalTableScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_web_page_id, wp_rec_start_date, wp_rec_end_date, wp_creation_date_sk, wp_access_date_sk, wp_autogen_flag, wp_customer_sk, wp_url, wp_type, wp_char_count, wp_link_count, wp_image_count, wp_max_ad_count];filterPredicates=[]]]])
            +- LogicalAggregate(group=[{0}], returns=[SUM($1)], profit_loss=[SUM($2)])
               +- LogicalProject(wp_web_page_sk=[$52], wr_return_amt=[$15], wr_net_loss=[$23])
                  +- LogicalFilter(condition=[AND(=($0, $24), >=($26, CAST('1998-08-02'):DATE NOT NULL), <=($26, +(CAST('1998-08-02'):DATE NOT NULL, 2592000000)), =($11, $52))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_web_page_id, wp_rec_start_date, wp_rec_end_date, wp_creation_date_sk, wp_access_date_sk, wp_autogen_flag, wp_customer_sk, wp_url, wp_type, wp_char_count, wp_link_count, wp_image_count, wp_max_ad_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[channel ASC, id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[CAST(channel) AS channel, id, sales, returns, profit])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :  :- Calc(select=['store channel' AS channel, CAST(s_store_sk) AS id, sales, CASE(IS NOT NULL(returns), returns, 0) AS returns, -(profit, CASE(IS NOT NULL(profit_loss), profit_loss, 0)) AS profit])
                        :  :  +- SortMergeJoin(where=[=(s_store_sk, s_store_sk0)], join=[s_store_sk, sales, profit, s_store_sk0, returns, profit_loss], joinType=[LeftOuterJoin])
                        :  :     :- HashAggregate(isMerge=[true], groupBy=[s_store_sk], select=[s_store_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])
                        :  :     :  +- Exchange(distribution=[hash[s_store_sk]])
                        :  :     :     +- LocalHashAggregate(groupBy=[s_store_sk], select=[s_store_sk, Partial_SUM(ss_ext_sales_price) AS sum$0, Partial_SUM(ss_net_profit) AS sum$1])
                        :  :     :        +- Calc(select=[s_store_sk, ss_ext_sales_price, ss_net_profit])
                        :  :     :           +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_ext_sales_price, ss_net_profit, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :              :- Calc(select=[ss_store_sk, ss_ext_sales_price, ss_net_profit])
                        :  :     :              :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :     :              :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])
                        :  :     :              :     +- Exchange(distribution=[broadcast], reuse_id=[1])
                        :  :     :              :        +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-08-02), <=(d_date, 1998-09-01))])
                        :  :     :              :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                        :  :     :              +- Exchange(distribution=[broadcast])
                        :  :     :                 +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
                        :  :     +- HashAggregate(isMerge=[true], groupBy=[s_store_sk], select=[s_store_sk, Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])
                        :  :        +- Exchange(distribution=[hash[s_store_sk]])
                        :  :           +- LocalHashAggregate(groupBy=[s_store_sk], select=[s_store_sk, Partial_SUM(sr_return_amt) AS sum$0, Partial_SUM(sr_net_loss) AS sum$1])
                        :  :              +- Calc(select=[s_store_sk, sr_return_amt, sr_net_loss])
                        :  :                 +- HashJoin(where=[=(sr_store_sk, s_store_sk)], join=[sr_store_sk, sr_return_amt, sr_net_loss, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :                    :- Calc(select=[sr_store_sk, sr_return_amt, sr_net_loss])
                        :  :                    :  +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :  :                    :     :- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss])
                        :  :                    :     +- Reused(reference_id=[1])
                        :  :                    +- Exchange(distribution=[broadcast])
                        :  :                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk];filterPredicates=[]]]], fields=[s_store_sk])
                        :  +- Calc(select=['catalog channel' AS channel, cs_call_center_sk AS id, sales, returns, -(profit, profit_loss) AS profit])
                        :     +- NestedLoopJoin(where=[true], join=[cs_call_center_sk, sales, profit, returns, profit_loss], joinType=[InnerJoin], build=[right])
                        :        :- HashAggregate(isMerge=[true], groupBy=[cs_call_center_sk], select=[cs_call_center_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])
                        :        :  +- Exchange(distribution=[hash[cs_call_center_sk]])
                        :        :     +- LocalHashAggregate(groupBy=[cs_call_center_sk], select=[cs_call_center_sk, Partial_SUM(cs_ext_sales_price) AS sum$0, Partial_SUM(cs_net_profit) AS sum$1])
                        :        :        +- Calc(select=[cs_call_center_sk, cs_ext_sales_price, cs_net_profit])
                        :        :           +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :        :              :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit])
                        :        :              +- Reused(reference_id=[1])
                        :        +- Exchange(distribution=[broadcast])
                        :           +- Calc(select=[returns, profit_loss])
                        :              +- HashAggregate(isMerge=[true], groupBy=[cr_call_center_sk], select=[cr_call_center_sk, Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])
                        :                 +- Exchange(distribution=[hash[cr_call_center_sk]])
                        :                    +- LocalHashAggregate(groupBy=[cr_call_center_sk], select=[cr_call_center_sk, Partial_SUM(cr_return_amount) AS sum$0, Partial_SUM(cr_net_loss) AS sum$1])
                        :                       +- Calc(select=[cr_call_center_sk, cr_return_amount, cr_net_loss])
                        :                          +- HashJoin(where=[=(cr_returned_date_sk, d_date_sk)], join=[cr_returned_date_sk, cr_call_center_sk, cr_return_amount, cr_net_loss, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :                             :- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_call_center_sk, cr_return_amount, cr_net_loss];filterPredicates=[]]]], fields=[cr_returned_date_sk, cr_call_center_sk, cr_return_amount, cr_net_loss])
                        :                             +- Reused(reference_id=[1])
                        +- Calc(select=['web channel' AS channel, CAST(wp_web_page_sk) AS id, sales, CASE(IS NOT NULL(returns), returns, 0) AS returns, -(profit, CASE(IS NOT NULL(profit_loss), profit_loss, 0)) AS profit])
                           +- SortMergeJoin(where=[=(wp_web_page_sk, wp_web_page_sk0)], join=[wp_web_page_sk, sales, profit, wp_web_page_sk0, returns, profit_loss], joinType=[LeftOuterJoin])
                              :- HashAggregate(isMerge=[true], groupBy=[wp_web_page_sk], select=[wp_web_page_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])
                              :  +- Exchange(distribution=[hash[wp_web_page_sk]])
                              :     +- LocalHashAggregate(groupBy=[wp_web_page_sk], select=[wp_web_page_sk, Partial_SUM(ws_ext_sales_price) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                              :        +- Calc(select=[wp_web_page_sk, ws_ext_sales_price, ws_net_profit])
                              :           +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_ext_sales_price, ws_net_profit, wp_web_page_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :              :- Calc(select=[ws_sold_date_sk, ws_ext_sales_price, ws_net_profit, wp_web_page_sk])
                              :              :  +- HashJoin(where=[=(ws_web_page_sk, wp_web_page_sk)], join=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit, wp_web_page_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :              :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit])
                              :              :     +- Exchange(distribution=[broadcast])
                              :              :        +- TableSourceScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk];filterPredicates=[]]]], fields=[wp_web_page_sk])
                              :              +- Reused(reference_id=[1])
                              +- HashAggregate(isMerge=[true], groupBy=[wp_web_page_sk], select=[wp_web_page_sk, Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])
                                 +- Exchange(distribution=[hash[wp_web_page_sk]])
                                    +- LocalHashAggregate(groupBy=[wp_web_page_sk], select=[wp_web_page_sk, Partial_SUM(wr_return_amt) AS sum$0, Partial_SUM(wr_net_loss) AS sum$1])
                                       +- Calc(select=[wp_web_page_sk, wr_return_amt, wr_net_loss])
                                          +- HashJoin(where=[=(wr_returned_date_sk, d_date_sk)], join=[wr_returned_date_sk, wr_return_amt, wr_net_loss, wp_web_page_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                             :- Calc(select=[wr_returned_date_sk, wr_return_amt, wr_net_loss, wp_web_page_sk])
                                             :  +- HashJoin(where=[=(wr_web_page_sk, wp_web_page_sk)], join=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss, wp_web_page_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                             :     :- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss];filterPredicates=[]]]], fields=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss])
                                             :     +- Exchange(distribution=[broadcast])
                                             :        +- TableSourceScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk];filterPredicates=[]]]], fields=[wp_web_page_sk])
                                             +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q78, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 78 in stream 0 using template query78.tpl
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year,
round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk)
where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=1998
order by 
  ss_sold_year,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100

-- end query 78 in stream 0 using template query78.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(ss_sold_year=[$0], ratio=[$1], store_qty=[$2], store_wholesale_cost=[$3], store_sales_price=[$4], other_chan_qty=[$5], other_chan_wholesale_cost=[$6], other_chan_sales_price=[$7])
+- LogicalSort(sort0=[$0], sort1=[$2], sort2=[$3], sort3=[$4], sort4=[$5], sort5=[$6], sort6=[$7], sort7=[$8], dir0=[ASC-nulls-first], dir1=[DESC-nulls-last], dir2=[DESC-nulls-last], dir3=[DESC-nulls-last], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(ss_sold_year=[$0], ratio=[ROUND(/(CAST($3):DOUBLE, CAST(+(CASE(IS NOT NULL($9), $9, 0), CASE(IS NOT NULL($15), $15, 0))):DOUBLE), 2)], store_qty=[$3], store_wholesale_cost=[$4], store_sales_price=[$5], other_chan_qty=[+(CASE(IS NOT NULL($9), $9, 0), CASE(IS NOT NULL($15), $15, 0))], other_chan_wholesale_cost=[+(CASE(IS NOT NULL($10), $10, 0), CASE(IS NOT NULL($16), $16, 0))], other_chan_sales_price=[+(CASE(IS NOT NULL($11), $11, 0), CASE(IS NOT NULL($17), $17, 0))], EXPR$8=[ROUND(/(CAST($3):DOUBLE, CAST(CASE(IS NOT NULL(+($9, $15)), +($9, $15), 1)):DOUBLE), 2)])
      +- LogicalFilter(condition=[AND(OR(>(CASE(IS NOT NULL($9), $9, 0), 0), >(CASE(IS NOT NULL($15), $15, 0), 0)), =($0, 1998))])
         +- LogicalJoin(condition=[AND(=($12, $0), =($13, $1), =($14, $2))], joinType=[left])
            :- LogicalJoin(condition=[AND(=($6, $0), =($7, $1), =($8, $2))], joinType=[left])
            :  :- LogicalAggregate(group=[{0, 1, 2}], ss_qty=[SUM($3)], ss_wc=[SUM($4)], ss_sp=[SUM($5)])
            :  :  +- LogicalProject(ss_sold_year=[$49], ss_item_sk=[$2], ss_customer_sk=[$3], ss_quantity=[$10], ss_wholesale_cost=[$11], ss_sales_price=[$13])
            :  :     +- LogicalFilter(condition=[IS NULL($32)])
            :  :        +- LogicalJoin(condition=[=($0, $43)], joinType=[inner])
            :  :           :- LogicalJoin(condition=[AND(=($32, $9), =($2, $25))], joinType=[left])
            :  :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :           :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
            :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalAggregate(group=[{0, 1, 2}], ws_qty=[SUM($3)], ws_wc=[SUM($4)], ws_sp=[SUM($5)])
            :     +- LogicalProject(ws_sold_year=[$64], ws_item_sk=[$3], ws_customer_sk=[$4], ws_quantity=[$18], ws_wholesale_cost=[$19], ws_sales_price=[$21])
            :        +- LogicalFilter(condition=[IS NULL($47)])
            :           +- LogicalJoin(condition=[=($0, $58)], joinType=[inner])
            :              :- LogicalJoin(condition=[AND(=($47, $17), =($3, $36))], joinType=[left])
            :              :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :              :  +- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
            :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalAggregate(group=[{0, 1, 2}], cs_qty=[SUM($3)], cs_wc=[SUM($4)], cs_sp=[SUM($5)])
               +- LogicalProject(cs_sold_year=[$67], cs_item_sk=[$15], cs_customer_sk=[$3], cs_quantity=[$18], cs_wholesale_cost=[$19], cs_sales_price=[$21])
                  +- LogicalFilter(condition=[IS NULL($50)])
                     +- LogicalJoin(condition=[=($0, $61)], joinType=[inner])
                        :- LogicalJoin(condition=[AND(=($50, $17), =($15, $36))], joinType=[left])
                        :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[ss_sold_year, ratio, store_qty, store_wholesale_cost, store_sales_price, other_chan_qty, other_chan_wholesale_cost, other_chan_sales_price])
+- SortLimit(orderBy=[ss_sold_year ASC, store_qty DESC, store_wholesale_cost DESC, store_sales_price DESC, other_chan_qty ASC, other_chan_wholesale_cost ASC, other_chan_sales_price ASC, EXPR$8 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ss_sold_year ASC, store_qty DESC, store_wholesale_cost DESC, store_sales_price DESC, other_chan_qty ASC, other_chan_wholesale_cost ASC, other_chan_sales_price ASC, EXPR$8 ASC], offset=[0], limit=[100], global=[false])
         +- Calc(select=[CAST(1998) AS ss_sold_year, ROUND(/(CAST(ss_qty), CAST(+(CASE(IS NOT NULL(ws_qty), ws_qty, 0), CASE(IS NOT NULL(cs_qty), cs_qty, 0)))), 2) AS ratio, ss_qty AS store_qty, ss_wc AS store_wholesale_cost, ss_sp AS store_sales_price, +(CASE(IS NOT NULL(ws_qty), ws_qty, 0), CASE(IS NOT NULL(cs_qty), cs_qty, 0)) AS other_chan_qty, +(CASE(IS NOT NULL(ws_wc), ws_wc, 0), CASE(IS NOT NULL(cs_wc), cs_wc, 0)) AS other_chan_wholesale_cost, +(CASE(IS NOT NULL(ws_sp), ws_sp, 0), CASE(IS NOT NULL(cs_sp), cs_sp, 0)) AS other_chan_sales_price, ROUND(/(CAST(ss_qty), CAST(CASE(AND(IS NOT NULL(ws_qty), IS NOT NULL(cs_qty)), +(ws_qty, cs_qty), 1))), 2) AS EXPR$8], where=[OR(CASE(IS NOT NULL(ws_qty), >(ws_qty, 0), CAST(false)), CASE(IS NOT NULL(cs_qty), >(cs_qty, 0), CAST(false)))])
            +- HashJoin(where=[AND(=(cs_sold_year, ss_sold_year), =(cs_item_sk, ss_item_sk), =(cs_customer_sk, ss_customer_sk))], join=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_qty, ws_wc, ws_sp, cs_sold_year, cs_item_sk, cs_customer_sk, cs_qty, cs_wc, cs_sp], joinType=[LeftOuterJoin], build=[right])
               :- Calc(select=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_qty, ws_wc, ws_sp])
               :  +- HashJoin(where=[AND(=(ws_sold_year, ss_sold_year), =(ws_item_sk, ss_item_sk), =(ws_customer_sk, ss_customer_sk))], join=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_sold_year, ws_item_sk, ws_customer_sk, ws_qty, ws_wc, ws_sp], joinType=[LeftOuterJoin], build=[right])
               :     :- HashAggregate(isMerge=[true], groupBy=[ss_sold_year, ss_item_sk, ss_customer_sk], select=[ss_sold_year, ss_item_sk, ss_customer_sk, Final_SUM(sum$0) AS ss_qty, Final_SUM(sum$1) AS ss_wc, Final_SUM(sum$2) AS ss_sp])
               :     :  +- Exchange(distribution=[hash[ss_sold_year, ss_item_sk, ss_customer_sk]])
               :     :     +- LocalHashAggregate(groupBy=[ss_sold_year, ss_item_sk, ss_customer_sk], select=[ss_sold_year, ss_item_sk, ss_customer_sk, Partial_SUM(ss_quantity) AS sum$0, Partial_SUM(ss_wholesale_cost) AS sum$1, Partial_SUM(ss_sales_price) AS sum$2])
               :     :        +- Calc(select=[CAST(1998) AS ss_sold_year, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price])
               :     :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :     :              :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price], where=[IS NULL(sr_ticket_number)])
               :     :              :  +- HashJoin(where=[AND(=(sr_ticket_number, ss_ticket_number), =(ss_item_sk, sr_item_sk))], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price, sr_item_sk, sr_ticket_number], joinType=[LeftOuterJoin], build=[right])
               :     :              :     :- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
               :     :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price])
               :     :              :     +- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
               :     :              :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_ticket_number];filterPredicates=[]]]], fields=[sr_item_sk, sr_ticket_number])
               :     :              +- Exchange(distribution=[broadcast])
               :     :                 +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
               :     :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
               :     +- HashAggregate(isMerge=[true], groupBy=[ws_sold_year, ws_item_sk, ws_customer_sk], select=[ws_sold_year, ws_item_sk, ws_customer_sk, Final_SUM(sum$0) AS ws_qty, Final_SUM(sum$1) AS ws_wc, Final_SUM(sum$2) AS ws_sp])
               :        +- Exchange(distribution=[hash[ws_sold_year, ws_item_sk, ws_customer_sk]])
               :           +- LocalHashAggregate(groupBy=[ws_sold_year, ws_item_sk, ws_customer_sk], select=[ws_sold_year, ws_item_sk, ws_customer_sk, Partial_SUM(ws_quantity) AS sum$0, Partial_SUM(ws_wholesale_cost) AS sum$1, Partial_SUM(ws_sales_price) AS sum$2])
               :              +- Calc(select=[d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk AS ws_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price])
               :                 +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price, d_date_sk, d_year], joinType=[InnerJoin], isBroadcast=[true], build=[right])
               :                    :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price], where=[IS NULL(wr_order_number)])
               :                    :  +- HashJoin(where=[AND(=(wr_order_number, ws_order_number), =(ws_item_sk, wr_item_sk))], join=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price, wr_item_sk, wr_order_number], joinType=[LeftOuterJoin], build=[right])
               :                    :     :- Exchange(distribution=[hash[ws_order_number, ws_item_sk]])
               :                    :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price])
               :                    :     +- Exchange(distribution=[hash[wr_order_number, wr_item_sk]])
               :                    :        +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_item_sk, wr_order_number];filterPredicates=[]]]], fields=[wr_item_sk, wr_order_number])
               :                    +- Exchange(distribution=[broadcast])
               :                       +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
               +- HashAggregate(isMerge=[true], groupBy=[cs_sold_year, cs_item_sk, cs_customer_sk], select=[cs_sold_year, cs_item_sk, cs_customer_sk, Final_SUM(sum$0) AS cs_qty, Final_SUM(sum$1) AS cs_wc, Final_SUM(sum$2) AS cs_sp])
                  +- Exchange(distribution=[hash[cs_sold_year, cs_item_sk, cs_customer_sk]])
                     +- LocalHashAggregate(groupBy=[cs_sold_year, cs_item_sk, cs_customer_sk], select=[cs_sold_year, cs_item_sk, cs_customer_sk, Partial_SUM(cs_quantity) AS sum$0, Partial_SUM(cs_wholesale_cost) AS sum$1, Partial_SUM(cs_sales_price) AS sum$2])
                        +- Calc(select=[d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk AS cs_customer_sk, cs_quantity, cs_wholesale_cost, cs_sales_price])
                           +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_wholesale_cost, cs_sales_price, d_date_sk, d_year], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                              :- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_wholesale_cost, cs_sales_price], where=[IS NULL(cr_order_number)])
                              :  +- HashJoin(where=[AND(=(cr_order_number, cs_order_number), =(cs_item_sk, cr_item_sk))], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price, cr_item_sk, cr_order_number], joinType=[LeftOuterJoin], build=[right])
                              :     :- Exchange(distribution=[hash[cs_order_number, cs_item_sk]])
                              :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price])
                              :     +- Exchange(distribution=[hash[cr_order_number, cr_item_sk]])
                              :        +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_item_sk, cr_order_number];filterPredicates=[]]]], fields=[cr_item_sk, cr_order_number])
                              +- Exchange(distribution=[broadcast])
                                 +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q79, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 79 in stream 0 using template query79.tpl
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 0 or household_demographics.hd_vehicle_count > -1)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100

-- end query 79 in stream 0 using template query79.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$5], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$14], c_first_name=[$13], EXPR$2=[SUBSTR($2, 1, 30)], ss_ticket_number=[$0], amt=[$3], profit=[$4])
   +- LogicalFilter(condition=[=($1, $5)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], s_city=[$3], amt=[$4], profit=[$5])
         :  +- LogicalAggregate(group=[{0, 1, 2, 3}], amt=[SUM($4)], profit=[SUM($5)])
         :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], s_city=[$73], ss_coupon_amt=[$19], ss_net_profit=[$22])
         :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), OR(=($83, 0), >($84, -1)), =($30, 1), OR(=($29, 1998), =($29, CAST(+(1998, 1)):BIGINT NOT NULL), =($29, CAST(+(1998, 2)):BIGINT NOT NULL)), >=($57, 200), <=($57, 295))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :              :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, EXPR$2 ASC, profit ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, EXPR$2 ASC, profit ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[c_last_name, c_first_name, SUBSTR(s_city, 1, 30) AS EXPR$2, ss_ticket_number, amt, profit])
         +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_ticket_number, ss_customer_sk, s_city, amt, profit, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, s_city, amt, profit])
            :     +- HashAggregate(isMerge=[true], groupBy=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city], select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city, Final_SUM(sum$0) AS amt, Final_SUM(sum$1) AS profit])
            :        +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city]])
            :           +- LocalHashAggregate(groupBy=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city], select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city, Partial_SUM(ss_coupon_amt) AS sum$0, Partial_SUM(ss_net_profit) AS sum$1])
            :              +- Calc(select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city, ss_coupon_amt, ss_net_profit])
            :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, s_store_sk, s_city], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :                    :     :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :                    :     :     +- Exchange(distribution=[broadcast])
            :                    :     :        +- Calc(select=[hd_demo_sk], where=[OR(=(hd_dep_count, 0), >(hd_vehicle_count, -1))])
            :                    :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
            :                    :     +- Exchange(distribution=[broadcast])
            :                    :        +- Calc(select=[d_date_sk], where=[AND(=(d_dow, 1), OR(=(d_year, 1998), =(d_year, 1999), =(d_year, 2000)))])
            :                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_dow];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_dow])
            :                    +- Exchange(distribution=[broadcast])
            :                       +- Calc(select=[s_store_sk, s_city], where=[AND(>=(s_number_employees, 200), <=(s_number_employees, 295))])
            :                          +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_number_employees, s_city];filterPredicates=[]]]], fields=[s_store_sk, s_number_employees, s_city])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q8, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 8 in stream 0 using template query8.tpl
select  s_store_name
      ,sum(ss_net_profit)
 from store_sales
     ,date_dim
     ,store,
     (select ca_zip
     from (
      SELECT substr(ca_zip,1,5) ca_zip
      FROM customer_address
      WHERE substr(ca_zip,1,5) IN (
                          '10000','10001','10002','10003','10004','10005',
                          '10006','10007','10008','10009','10010',
                          '10011','10012','10013','10014','10015',
                          '10016','10017','10018','10019','10020',
                          '10021','10022','10023','10024','10025',
                          '10026','10027','10028','10029','10030',
                          '10031','10032','10033','10034','10035',
                          '10036','10037','10038','10039','10040',
                          '10041','10042','10043','10044','10045',
                          '10046','10047','10048','10049','10050',
                          '10051','10052','10053','10054','10055',
                          '10056','10057','10058','10059','10060',
                          '10061','10062','10063','10064','10065',
                          '10066','10067','10068','10069','10070',
                          '10071','10072','10073','10074','10075',
                          '10076','10077','10078','10079','10080',
                          '10081','10082','10083','10084','10085',
                          '10086','10087','10088','10089','10090',
                          '10091','10092','10093','10094','10095',
                          '10096','10097','10098','10099','10100',
                          '10101','10102','10103','10104','10105',
                          '10106','10107','10108','10109','10110',
                          '10111','10112','10113','10114','10115',
                          '10116','10117','10118','10119','10120',
                          '10121','10122','10123','10124','10125',
                          '10126','10127','10128','10129','10130',
                          '10131','10132','10133','10134','10135',
                          '10136','10137','10138','10139','10140',
                          '10141','10142','10143','10144','10145',
                          '10146','10147','10148','10149','10150',
                          '10151','10152','10153','10154','10155',
                          '10156','10157','10158','10159','10160',
                          '10161','10162','10163','10164','10165',
                          '10166','10167','10168','10169','10170',
                          '10171','10172','10173','10174','10175',
                          '10176','10177','10178','10179','10180',
                          '10181','10182','10183','10184','10185',
                          '10186','10187','10188','10189','10190',
                          '10191','10192','10193','10194','10195',
                          '10196','10197','10198','10199','10200',
                          '10201','10202','10203','10204','10205',
                          '10206','10207','10208','10209','10210',
                          '10211','10212','10213','10214','10215',
                          '10216','10217','10218','10219','10220',
                          '10221','10222','10223','10224','10225',
                          '10226','10227','10228','10229','10230',
                          '10231','10232','10233','10234','10235',
                          '10236','10237','10238','10239','10240',
                          '10241','10242','10243','10244','10245',
                          '10246','10247','10248','10249','10250',
                          '10251','10252','10253','10254','10255',
                          '10256','10257','10258','10259','10260',
                          '10261','10262','10263','10264','10265',
                          '10266','10267','10268','10269','10270',
                          '10271','10272','10273','10274','10275',
                          '10276','10277','10278','10279','10280',
                          '10281','10282','10283','10284','10285',
                          '10286','10287','10288','10289','10290',
                          '10291','10292','10293','10294','10295',
                          '10296','10297','10298','10299','10300',
                          '10301','10302','10303','10304','10305',
                          '10306','10307','10308','10309','10310',
                          '10311','10312','10313','10314','10315',
                          '10316','10317','10318','10319','10320',
                          '10321','10322','10323','10324','10325',
                          '10326','10327','10328','10329','10330',
                          '10331','10332','10333','10334','10335',
                          '10336','10337','10338','10339','10340',
                          '10341','10342','10343','10344','10345',
                          '10346','10347','10348','10349','10350',
                          '10351','10352','10353','10354','10355',
                          '10356','10357','10358','10359','10360',
                          '10361','10362','10363','10364','10365',
                          '10366','10367','10368','10369','10370',
                          '10371','10372','10373','10374','10375',
                          '10376','10377','10378','10379','10380',
                          '10381','10382','10383','10384','10385',
                          '10386','10387','10388','10389','10390',
                          '10391','10392','10393','10394','10395',
                          '10396','10397','10398','10399')
     intersect
      select ca_zip
      from (SELECT substr(ca_zip,1,5) ca_zip,count(*) cnt
            FROM customer_address, customer
            WHERE ca_address_sk = c_current_addr_sk and
                  c_preferred_cust_flag='Y'
            group by ca_zip
            having count(*) > 10)A1)A2) V1
 where ss_store_sk = s_store_sk
  and ss_sold_date_sk = d_date_sk
  and d_qoy = 1 and d_year = 1998
  and (substr(s_zip,1,2) = substr(V1.ca_zip,1,2))
 group by s_store_name
 order by s_store_name
 limit 100

-- end query 8 in stream 0 using template query8.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
   +- LogicalProject(s_store_name=[$56], ss_net_profit=[$22])
      +- LogicalFilter(condition=[AND(=($7, $51), =($0, $23), =($33, 1), =($29, 1998), =(SUBSTR($76, 1, 2), SUBSTR($80, 1, 2)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
            +- LogicalProject(ca_zip=[$0])
               +- LogicalIntersect(all=[false])
                  :- LogicalProject(ca_zip=[SUBSTR($9, 1, 5)])
                  :  +- LogicalFilter(condition=[OR(=(SUBSTR($9, 1, 5), '10000'), =(SUBSTR($9, 1, 5), '10001'), =(SUBSTR($9, 1, 5), '10002'), =(SUBSTR($9, 1, 5), '10003'), =(SUBSTR($9, 1, 5), '10004'), =(SUBSTR($9, 1, 5), '10005'), =(SUBSTR($9, 1, 5), '10006'), =(SUBSTR($9, 1, 5), '10007'), =(SUBSTR($9, 1, 5), '10008'), =(SUBSTR($9, 1, 5), '10009'), =(SUBSTR($9, 1, 5), '10010'), =(SUBSTR($9, 1, 5), '10011'), =(SUBSTR($9, 1, 5), '10012'), =(SUBSTR($9, 1, 5), '10013'), =(SUBSTR($9, 1, 5), '10014'), =(SUBSTR($9, 1, 5), '10015'), =(SUBSTR($9, 1, 5), '10016'), =(SUBSTR($9, 1, 5), '10017'), =(SUBSTR($9, 1, 5), '10018'), =(SUBSTR($9, 1, 5), '10019'), =(SUBSTR($9, 1, 5), '10020'), =(SUBSTR($9, 1, 5), '10021'), =(SUBSTR($9, 1, 5), '10022'), =(SUBSTR($9, 1, 5), '10023'), =(SUBSTR($9, 1, 5), '10024'), =(SUBSTR($9, 1, 5), '10025'), =(SUBSTR($9, 1, 5), '10026'), =(SUBSTR($9, 1, 5), '10027'), =(SUBSTR($9, 1, 5), '10028'), =(SUBSTR($9, 1, 5), '10029'), =(SUBSTR($9, 1, 5), '10030'), =(SUBSTR($9, 1, 5), '10031'), =(SUBSTR($9, 1, 5), '10032'), =(SUBSTR($9, 1, 5), '10033'), =(SUBSTR($9, 1, 5), '10034'), =(SUBSTR($9, 1, 5), '10035'), =(SUBSTR($9, 1, 5), '10036'), =(SUBSTR($9, 1, 5), '10037'), =(SUBSTR($9, 1, 5), '10038'), =(SUBSTR($9, 1, 5), '10039'), =(SUBSTR($9, 1, 5), '10040'), =(SUBSTR($9, 1, 5), '10041'), =(SUBSTR($9, 1, 5), '10042'), =(SUBSTR($9, 1, 5), '10043'), =(SUBSTR($9, 1, 5), '10044'), =(SUBSTR($9, 1, 5), '10045'), =(SUBSTR($9, 1, 5), '10046'), =(SUBSTR($9, 1, 5), '10047'), =(SUBSTR($9, 1, 5), '10048'), =(SUBSTR($9, 1, 5), '10049'), =(SUBSTR($9, 1, 5), '10050'), =(SUBSTR($9, 1, 5), '10051'), =(SUBSTR($9, 1, 5), '10052'), =(SUBSTR($9, 1, 5), '10053'), =(SUBSTR($9, 1, 5), '10054'), =(SUBSTR($9, 1, 5), '10055'), =(SUBSTR($9, 1, 5), '10056'), =(SUBSTR($9, 1, 5), '10057'), =(SUBSTR($9, 1, 5), '10058'), =(SUBSTR($9, 1, 5), '10059'), =(SUBSTR($9, 1, 5), '10060'), =(SUBSTR($9, 1, 5), '10061'), =(SUBSTR($9, 1, 5), '10062'), =(SUBSTR($9, 1, 5), '10063'), =(SUBSTR($9, 1, 5), '10064'), =(SUBSTR($9, 1, 5), '10065'), =(SUBSTR($9, 1, 5), '10066'), =(SUBSTR($9, 1, 5), '10067'), =(SUBSTR($9, 1, 5), '10068'), =(SUBSTR($9, 1, 5), '10069'), =(SUBSTR($9, 1, 5), '10070'), =(SUBSTR($9, 1, 5), '10071'), =(SUBSTR($9, 1, 5), '10072'), =(SUBSTR($9, 1, 5), '10073'), =(SUBSTR($9, 1, 5), '10074'), =(SUBSTR($9, 1, 5), '10075'), =(SUBSTR($9, 1, 5), '10076'), =(SUBSTR($9, 1, 5), '10077'), =(SUBSTR($9, 1, 5), '10078'), =(SUBSTR($9, 1, 5), '10079'), =(SUBSTR($9, 1, 5), '10080'), =(SUBSTR($9, 1, 5), '10081'), =(SUBSTR($9, 1, 5), '10082'), =(SUBSTR($9, 1, 5), '10083'), =(SUBSTR($9, 1, 5), '10084'), =(SUBSTR($9, 1, 5), '10085'), =(SUBSTR($9, 1, 5), '10086'), =(SUBSTR($9, 1, 5), '10087'), =(SUBSTR($9, 1, 5), '10088'), =(SUBSTR($9, 1, 5), '10089'), =(SUBSTR($9, 1, 5), '10090'), =(SUBSTR($9, 1, 5), '10091'), =(SUBSTR($9, 1, 5), '10092'), =(SUBSTR($9, 1, 5), '10093'), =(SUBSTR($9, 1, 5), '10094'), =(SUBSTR($9, 1, 5), '10095'), =(SUBSTR($9, 1, 5), '10096'), =(SUBSTR($9, 1, 5), '10097'), =(SUBSTR($9, 1, 5), '10098'), =(SUBSTR($9, 1, 5), '10099'), =(SUBSTR($9, 1, 5), '10100'), =(SUBSTR($9, 1, 5), '10101'), =(SUBSTR($9, 1, 5), '10102'), =(SUBSTR($9, 1, 5), '10103'), =(SUBSTR($9, 1, 5), '10104'), =(SUBSTR($9, 1, 5), '10105'), =(SUBSTR($9, 1, 5), '10106'), =(SUBSTR($9, 1, 5), '10107'), =(SUBSTR($9, 1, 5), '10108'), =(SUBSTR($9, 1, 5), '10109'), =(SUBSTR($9, 1, 5), '10110'), =(SUBSTR($9, 1, 5), '10111'), =(SUBSTR($9, 1, 5), '10112'), =(SUBSTR($9, 1, 5), '10113'), =(SUBSTR($9, 1, 5), '10114'), =(SUBSTR($9, 1, 5), '10115'), =(SUBSTR($9, 1, 5), '10116'), =(SUBSTR($9, 1, 5), '10117'), =(SUBSTR($9, 1, 5), '10118'), =(SUBSTR($9, 1, 5), '10119'), =(SUBSTR($9, 1, 5), '10120'), =(SUBSTR($9, 1, 5), '10121'), =(SUBSTR($9, 1, 5), '10122'), =(SUBSTR($9, 1, 5), '10123'), =(SUBSTR($9, 1, 5), '10124'), =(SUBSTR($9, 1, 5), '10125'), =(SUBSTR($9, 1, 5), '10126'), =(SUBSTR($9, 1, 5), '10127'), =(SUBSTR($9, 1, 5), '10128'), =(SUBSTR($9, 1, 5), '10129'), =(SUBSTR($9, 1, 5), '10130'), =(SUBSTR($9, 1, 5), '10131'), =(SUBSTR($9, 1, 5), '10132'), =(SUBSTR($9, 1, 5), '10133'), =(SUBSTR($9, 1, 5), '10134'), =(SUBSTR($9, 1, 5), '10135'), =(SUBSTR($9, 1, 5), '10136'), =(SUBSTR($9, 1, 5), '10137'), =(SUBSTR($9, 1, 5), '10138'), =(SUBSTR($9, 1, 5), '10139'), =(SUBSTR($9, 1, 5), '10140'), =(SUBSTR($9, 1, 5), '10141'), =(SUBSTR($9, 1, 5), '10142'), =(SUBSTR($9, 1, 5), '10143'), =(SUBSTR($9, 1, 5), '10144'), =(SUBSTR($9, 1, 5), '10145'), =(SUBSTR($9, 1, 5), '10146'), =(SUBSTR($9, 1, 5), '10147'), =(SUBSTR($9, 1, 5), '10148'), =(SUBSTR($9, 1, 5), '10149'), =(SUBSTR($9, 1, 5), '10150'), =(SUBSTR($9, 1, 5), '10151'), =(SUBSTR($9, 1, 5), '10152'), =(SUBSTR($9, 1, 5), '10153'), =(SUBSTR($9, 1, 5), '10154'), =(SUBSTR($9, 1, 5), '10155'), =(SUBSTR($9, 1, 5), '10156'), =(SUBSTR($9, 1, 5), '10157'), =(SUBSTR($9, 1, 5), '10158'), =(SUBSTR($9, 1, 5), '10159'), =(SUBSTR($9, 1, 5), '10160'), =(SUBSTR($9, 1, 5), '10161'), =(SUBSTR($9, 1, 5), '10162'), =(SUBSTR($9, 1, 5), '10163'), =(SUBSTR($9, 1, 5), '10164'), =(SUBSTR($9, 1, 5), '10165'), =(SUBSTR($9, 1, 5), '10166'), =(SUBSTR($9, 1, 5), '10167'), =(SUBSTR($9, 1, 5), '10168'), =(SUBSTR($9, 1, 5), '10169'), =(SUBSTR($9, 1, 5), '10170'), =(SUBSTR($9, 1, 5), '10171'), =(SUBSTR($9, 1, 5), '10172'), =(SUBSTR($9, 1, 5), '10173'), =(SUBSTR($9, 1, 5), '10174'), =(SUBSTR($9, 1, 5), '10175'), =(SUBSTR($9, 1, 5), '10176'), =(SUBSTR($9, 1, 5), '10177'), =(SUBSTR($9, 1, 5), '10178'), =(SUBSTR($9, 1, 5), '10179'), =(SUBSTR($9, 1, 5), '10180'), =(SUBSTR($9, 1, 5), '10181'), =(SUBSTR($9, 1, 5), '10182'), =(SUBSTR($9, 1, 5), '10183'), =(SUBSTR($9, 1, 5), '10184'), =(SUBSTR($9, 1, 5), '10185'), =(SUBSTR($9, 1, 5), '10186'), =(SUBSTR($9, 1, 5), '10187'), =(SUBSTR($9, 1, 5), '10188'), =(SUBSTR($9, 1, 5), '10189'), =(SUBSTR($9, 1, 5), '10190'), =(SUBSTR($9, 1, 5), '10191'), =(SUBSTR($9, 1, 5), '10192'), =(SUBSTR($9, 1, 5), '10193'), =(SUBSTR($9, 1, 5), '10194'), =(SUBSTR($9, 1, 5), '10195'), =(SUBSTR($9, 1, 5), '10196'), =(SUBSTR($9, 1, 5), '10197'), =(SUBSTR($9, 1, 5), '10198'), =(SUBSTR($9, 1, 5), '10199'), =(SUBSTR($9, 1, 5), '10200'), =(SUBSTR($9, 1, 5), '10201'), =(SUBSTR($9, 1, 5), '10202'), =(SUBSTR($9, 1, 5), '10203'), =(SUBSTR($9, 1, 5), '10204'), =(SUBSTR($9, 1, 5), '10205'), =(SUBSTR($9, 1, 5), '10206'), =(SUBSTR($9, 1, 5), '10207'), =(SUBSTR($9, 1, 5), '10208'), =(SUBSTR($9, 1, 5), '10209'), =(SUBSTR($9, 1, 5), '10210'), =(SUBSTR($9, 1, 5), '10211'), =(SUBSTR($9, 1, 5), '10212'), =(SUBSTR($9, 1, 5), '10213'), =(SUBSTR($9, 1, 5), '10214'), =(SUBSTR($9, 1, 5), '10215'), =(SUBSTR($9, 1, 5), '10216'), =(SUBSTR($9, 1, 5), '10217'), =(SUBSTR($9, 1, 5), '10218'), =(SUBSTR($9, 1, 5), '10219'), =(SUBSTR($9, 1, 5), '10220'), =(SUBSTR($9, 1, 5), '10221'), =(SUBSTR($9, 1, 5), '10222'), =(SUBSTR($9, 1, 5), '10223'), =(SUBSTR($9, 1, 5), '10224'), =(SUBSTR($9, 1, 5), '10225'), =(SUBSTR($9, 1, 5), '10226'), =(SUBSTR($9, 1, 5), '10227'), =(SUBSTR($9, 1, 5), '10228'), =(SUBSTR($9, 1, 5), '10229'), =(SUBSTR($9, 1, 5), '10230'), =(SUBSTR($9, 1, 5), '10231'), =(SUBSTR($9, 1, 5), '10232'), =(SUBSTR($9, 1, 5), '10233'), =(SUBSTR($9, 1, 5), '10234'), =(SUBSTR($9, 1, 5), '10235'), =(SUBSTR($9, 1, 5), '10236'), =(SUBSTR($9, 1, 5), '10237'), =(SUBSTR($9, 1, 5), '10238'), =(SUBSTR($9, 1, 5), '10239'), =(SUBSTR($9, 1, 5), '10240'), =(SUBSTR($9, 1, 5), '10241'), =(SUBSTR($9, 1, 5), '10242'), =(SUBSTR($9, 1, 5), '10243'), =(SUBSTR($9, 1, 5), '10244'), =(SUBSTR($9, 1, 5), '10245'), =(SUBSTR($9, 1, 5), '10246'), =(SUBSTR($9, 1, 5), '10247'), =(SUBSTR($9, 1, 5), '10248'), =(SUBSTR($9, 1, 5), '10249'), =(SUBSTR($9, 1, 5), '10250'), =(SUBSTR($9, 1, 5), '10251'), =(SUBSTR($9, 1, 5), '10252'), =(SUBSTR($9, 1, 5), '10253'), =(SUBSTR($9, 1, 5), '10254'), =(SUBSTR($9, 1, 5), '10255'), =(SUBSTR($9, 1, 5), '10256'), =(SUBSTR($9, 1, 5), '10257'), =(SUBSTR($9, 1, 5), '10258'), =(SUBSTR($9, 1, 5), '10259'), =(SUBSTR($9, 1, 5), '10260'), =(SUBSTR($9, 1, 5), '10261'), =(SUBSTR($9, 1, 5), '10262'), =(SUBSTR($9, 1, 5), '10263'), =(SUBSTR($9, 1, 5), '10264'), =(SUBSTR($9, 1, 5), '10265'), =(SUBSTR($9, 1, 5), '10266'), =(SUBSTR($9, 1, 5), '10267'), =(SUBSTR($9, 1, 5), '10268'), =(SUBSTR($9, 1, 5), '10269'), =(SUBSTR($9, 1, 5), '10270'), =(SUBSTR($9, 1, 5), '10271'), =(SUBSTR($9, 1, 5), '10272'), =(SUBSTR($9, 1, 5), '10273'), =(SUBSTR($9, 1, 5), '10274'), =(SUBSTR($9, 1, 5), '10275'), =(SUBSTR($9, 1, 5), '10276'), =(SUBSTR($9, 1, 5), '10277'), =(SUBSTR($9, 1, 5), '10278'), =(SUBSTR($9, 1, 5), '10279'), =(SUBSTR($9, 1, 5), '10280'), =(SUBSTR($9, 1, 5), '10281'), =(SUBSTR($9, 1, 5), '10282'), =(SUBSTR($9, 1, 5), '10283'), =(SUBSTR($9, 1, 5), '10284'), =(SUBSTR($9, 1, 5), '10285'), =(SUBSTR($9, 1, 5), '10286'), =(SUBSTR($9, 1, 5), '10287'), =(SUBSTR($9, 1, 5), '10288'), =(SUBSTR($9, 1, 5), '10289'), =(SUBSTR($9, 1, 5), '10290'), =(SUBSTR($9, 1, 5), '10291'), =(SUBSTR($9, 1, 5), '10292'), =(SUBSTR($9, 1, 5), '10293'), =(SUBSTR($9, 1, 5), '10294'), =(SUBSTR($9, 1, 5), '10295'), =(SUBSTR($9, 1, 5), '10296'), =(SUBSTR($9, 1, 5), '10297'), =(SUBSTR($9, 1, 5), '10298'), =(SUBSTR($9, 1, 5), '10299'), =(SUBSTR($9, 1, 5), '10300'), =(SUBSTR($9, 1, 5), '10301'), =(SUBSTR($9, 1, 5), '10302'), =(SUBSTR($9, 1, 5), '10303'), =(SUBSTR($9, 1, 5), '10304'), =(SUBSTR($9, 1, 5), '10305'), =(SUBSTR($9, 1, 5), '10306'), =(SUBSTR($9, 1, 5), '10307'), =(SUBSTR($9, 1, 5), '10308'), =(SUBSTR($9, 1, 5), '10309'), =(SUBSTR($9, 1, 5), '10310'), =(SUBSTR($9, 1, 5), '10311'), =(SUBSTR($9, 1, 5), '10312'), =(SUBSTR($9, 1, 5), '10313'), =(SUBSTR($9, 1, 5), '10314'), =(SUBSTR($9, 1, 5), '10315'), =(SUBSTR($9, 1, 5), '10316'), =(SUBSTR($9, 1, 5), '10317'), =(SUBSTR($9, 1, 5), '10318'), =(SUBSTR($9, 1, 5), '10319'), =(SUBSTR($9, 1, 5), '10320'), =(SUBSTR($9, 1, 5), '10321'), =(SUBSTR($9, 1, 5), '10322'), =(SUBSTR($9, 1, 5), '10323'), =(SUBSTR($9, 1, 5), '10324'), =(SUBSTR($9, 1, 5), '10325'), =(SUBSTR($9, 1, 5), '10326'), =(SUBSTR($9, 1, 5), '10327'), =(SUBSTR($9, 1, 5), '10328'), =(SUBSTR($9, 1, 5), '10329'), =(SUBSTR($9, 1, 5), '10330'), =(SUBSTR($9, 1, 5), '10331'), =(SUBSTR($9, 1, 5), '10332'), =(SUBSTR($9, 1, 5), '10333'), =(SUBSTR($9, 1, 5), '10334'), =(SUBSTR($9, 1, 5), '10335'), =(SUBSTR($9, 1, 5), '10336'), =(SUBSTR($9, 1, 5), '10337'), =(SUBSTR($9, 1, 5), '10338'), =(SUBSTR($9, 1, 5), '10339'), =(SUBSTR($9, 1, 5), '10340'), =(SUBSTR($9, 1, 5), '10341'), =(SUBSTR($9, 1, 5), '10342'), =(SUBSTR($9, 1, 5), '10343'), =(SUBSTR($9, 1, 5), '10344'), =(SUBSTR($9, 1, 5), '10345'), =(SUBSTR($9, 1, 5), '10346'), =(SUBSTR($9, 1, 5), '10347'), =(SUBSTR($9, 1, 5), '10348'), =(SUBSTR($9, 1, 5), '10349'), =(SUBSTR($9, 1, 5), '10350'), =(SUBSTR($9, 1, 5), '10351'), =(SUBSTR($9, 1, 5), '10352'), =(SUBSTR($9, 1, 5), '10353'), =(SUBSTR($9, 1, 5), '10354'), =(SUBSTR($9, 1, 5), '10355'), =(SUBSTR($9, 1, 5), '10356'), =(SUBSTR($9, 1, 5), '10357'), =(SUBSTR($9, 1, 5), '10358'), =(SUBSTR($9, 1, 5), '10359'), =(SUBSTR($9, 1, 5), '10360'), =(SUBSTR($9, 1, 5), '10361'), =(SUBSTR($9, 1, 5), '10362'), =(SUBSTR($9, 1, 5), '10363'), =(SUBSTR($9, 1, 5), '10364'), =(SUBSTR($9, 1, 5), '10365'), =(SUBSTR($9, 1, 5), '10366'), =(SUBSTR($9, 1, 5), '10367'), =(SUBSTR($9, 1, 5), '10368'), =(SUBSTR($9, 1, 5), '10369'), =(SUBSTR($9, 1, 5), '10370'), =(SUBSTR($9, 1, 5), '10371'), =(SUBSTR($9, 1, 5), '10372'), =(SUBSTR($9, 1, 5), '10373'), =(SUBSTR($9, 1, 5), '10374'), =(SUBSTR($9, 1, 5), '10375'), =(SUBSTR($9, 1, 5), '10376'), =(SUBSTR($9, 1, 5), '10377'), =(SUBSTR($9, 1, 5), '10378'), =(SUBSTR($9, 1, 5), '10379'), =(SUBSTR($9, 1, 5), '10380'), =(SUBSTR($9, 1, 5), '10381'), =(SUBSTR($9, 1, 5), '10382'), =(SUBSTR($9, 1, 5), '10383'), =(SUBSTR($9, 1, 5), '10384'), =(SUBSTR($9, 1, 5), '10385'), =(SUBSTR($9, 1, 5), '10386'), =(SUBSTR($9, 1, 5), '10387'), =(SUBSTR($9, 1, 5), '10388'), =(SUBSTR($9, 1, 5), '10389'), =(SUBSTR($9, 1, 5), '10390'), =(SUBSTR($9, 1, 5), '10391'), =(SUBSTR($9, 1, 5), '10392'), =(SUBSTR($9, 1, 5), '10393'), =(SUBSTR($9, 1, 5), '10394'), =(SUBSTR($9, 1, 5), '10395'), =(SUBSTR($9, 1, 5), '10396'), =(SUBSTR($9, 1, 5), '10397'), =(SUBSTR($9, 1, 5), '10398'), =(SUBSTR($9, 1, 5), '10399'))])
                  :     +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                  +- LogicalProject(ca_zip=[$0])
                     +- LogicalProject(ca_zip=[SUBSTR($0, 1, 5)], cnt=[$1])
                        +- LogicalFilter(condition=[>($1, 10)])
                           +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
                              +- LogicalProject(ca_zip=[$9])
                                 +- LogicalFilter(condition=[AND(=($0, $17), =($23, 'Y'))])
                                    +- LogicalJoin(condition=[true], joinType=[inner])
                                       :- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
                                       +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[s_store_name], select=[s_store_name, Final_SUM(sum$0) AS EXPR$1])
         +- Exchange(distribution=[hash[s_store_name]])
            +- LocalHashAggregate(groupBy=[s_store_name], select=[s_store_name, Partial_SUM(ss_net_profit) AS sum$0])
               +- Calc(select=[s_store_name, ss_net_profit])
                  +- HashJoin(where=[=($f80, $f1)], join=[ss_net_profit, s_store_name, $f80, $f1], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_net_profit, s_store_name, SUBSTR(s_zip, 1, 2) AS $f80])
                     :  +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_net_profit, s_store_sk, s_store_name, s_zip], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[ss_store_sk, ss_net_profit])
                     :     :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_store_sk, ss_net_profit];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_store_sk, ss_net_profit])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- Calc(select=[d_date_sk], where=[AND(=(d_qoy, 1), =(d_year, 1998))])
                     :     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_qoy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_qoy])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_zip];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_zip])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[SUBSTR(ca_zip, 1, 2) AS $f1])
                           +- HashAggregate(isMerge=[false], groupBy=[ca_zip], select=[ca_zip])
                              +- Exchange(distribution=[hash[ca_zip]])
                                 +- HashSemiJoin(where=[OR(=(ca_zip, ca_zip0), AND(IS NULL(ca_zip), IS NULL(ca_zip0)))], join=[ca_zip], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])
                                    :- Calc(select=[SUBSTR(ca_zip, 1, 5) AS ca_zip], where=[IN(SUBSTR(ca_zip, 1, 5), '10000', '10001', '10002', '10003', '10004', '10005', '10006', '10007', '10008', '10009', '10010', '10011', '10012', '10013', '10014', '10015', '10016', '10017', '10018', '10019', '10020', '10021', '10022', '10023', '10024', '10025', '10026', '10027', '10028', '10029', '10030', '10031', '10032', '10033', '10034', '10035', '10036', '10037', '10038', '10039', '10040', '10041', '10042', '10043', '10044', '10045', '10046', '10047', '10048', '10049', '10050', '10051', '10052', '10053', '10054', '10055', '10056', '10057', '10058', '10059', '10060', '10061', '10062', '10063', '10064', '10065', '10066', '10067', '10068', '10069', '10070', '10071', '10072', '10073', '10074', '10075', '10076', '10077', '10078', '10079', '10080', '10081', '10082', '10083', '10084', '10085', '10086', '10087', '10088', '10089', '10090', '10091', '10092', '10093', '10094', '10095', '10096', '10097', '10098', '10099', '10100', '10101', '10102', '10103', '10104', '10105', '10106', '10107', '10108', '10109', '10110', '10111', '10112', '10113', '10114', '10115', '10116', '10117', '10118', '10119', '10120', '10121', '10122', '10123', '10124', '10125', '10126', '10127', '10128', '10129', '10130', '10131', '10132', '10133', '10134', '10135', '10136', '10137', '10138', '10139', '10140', '10141', '10142', '10143', '10144', '10145', '10146', '10147', '10148', '10149', '10150', '10151', '10152', '10153', '10154', '10155', '10156', '10157', '10158', '10159', '10160', '10161', '10162', '10163', '10164', '10165', '10166', '10167', '10168', '10169', '10170', '10171', '10172', '10173', '10174', '10175', '10176', '10177', '10178', '10179', '10180', '10181', '10182', '10183', '10184', '10185', '10186', '10187', '10188', '10189', '10190', '10191', '10192', '10193', '10194', '10195', '10196', '10197', '10198', '10199', '10200', '10201', '10202', '10203', '10204', '10205', '10206', '10207', '10208', '10209', '10210', '10211', '10212', '10213', '10214', '10215', '10216', '10217', '10218', '10219', '10220', '10221', '10222', '10223', '10224', '10225', '10226', '10227', '10228', '10229', '10230', '10231', '10232', '10233', '10234', '10235', '10236', '10237', '10238', '10239', '10240', '10241', '10242', '10243', '10244', '10245', '10246', '10247', '10248', '10249', '10250', '10251', '10252', '10253', '10254', '10255', '10256', '10257', '10258', '10259', '10260', '10261', '10262', '10263', '10264', '10265', '10266', '10267', '10268', '10269', '10270', '10271', '10272', '10273', '10274', '10275', '10276', '10277', '10278', '10279', '10280', '10281', '10282', '10283', '10284', '10285', '10286', '10287', '10288', '10289', '10290', '10291', '10292', '10293', '10294', '10295', '10296', '10297', '10298', '10299', '10300', '10301', '10302', '10303', '10304', '10305', '10306', '10307', '10308', '10309', '10310', '10311', '10312', '10313', '10314', '10315', '10316', '10317', '10318', '10319', '10320', '10321', '10322', '10323', '10324', '10325', '10326', '10327', '10328', '10329', '10330', '10331', '10332', '10333', '10334', '10335', '10336', '10337', '10338', '10339', '10340', '10341', '10342', '10343', '10344', '10345', '10346', '10347', '10348', '10349', '10350', '10351', '10352', '10353', '10354', '10355', '10356', '10357', '10358', '10359', '10360', '10361', '10362', '10363', '10364', '10365', '10366', '10367', '10368', '10369', '10370', '10371', '10372', '10373', '10374', '10375', '10376', '10377', '10378', '10379', '10380', '10381', '10382', '10383', '10384', '10385', '10386', '10387', '10388', '10389', '10390', '10391', '10392', '10393', '10394', '10395', '10396', '10397', '10398', '10399')])
                                    :  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_zip];filterPredicates=[]]]], fields=[ca_zip])
                                    +- Exchange(distribution=[broadcast])
                                       +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip])
                                          +- Calc(select=[SUBSTR(ca_zip, 1, 5) AS ca_zip], where=[>(cnt, 10)])
                                             +- HashAggregate(isMerge=[true], groupBy=[ca_zip], select=[ca_zip, Final_COUNT(count$0) AS cnt])
                                                +- Exchange(distribution=[hash[ca_zip]])
                                                   +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip, Partial_COUNT(*) AS count$0])
                                                      +- Calc(select=[ca_zip])
                                                         +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[ca_address_sk, ca_zip, c_current_addr_sk], joinType=[InnerJoin], build=[right])
                                                            :- Exchange(distribution=[hash[ca_address_sk]])
                                                            :  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_zip];filterPredicates=[]]]], fields=[ca_address_sk, ca_zip])
                                                            +- Exchange(distribution=[hash[c_current_addr_sk]])
                                                               +- Calc(select=[c_current_addr_sk], where=[=(c_preferred_cust_flag, 'Y')])
                                                                  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_current_addr_sk, c_preferred_cust_flag];filterPredicates=[]]]], fields=[c_current_addr_sk, c_preferred_cust_flag])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q9, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 9 in stream 0 using template query9.tpl
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 1
            then (select avg(ss_ext_discount_amt) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 2
            then (select avg(ss_ext_discount_amt)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 3
            then (select avg(ss_ext_discount_amt)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 4
            then (select avg(ss_ext_discount_amt)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 5
            then (select avg(ss_ext_discount_amt)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1


-- end query 9 in stream 0 using template query9.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(bucket1=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), 1), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_discount_amt=[$14])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid=[$20])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}))], bucket2=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), 2), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_discount_amt=[$14])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid=[$20])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}))], bucket3=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), 3), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_discount_amt=[$14])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid=[$20])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}))], bucket4=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), 4), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_discount_amt=[$14])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid=[$20])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}))], bucket5=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), 5), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_discount_amt=[$14])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid=[$20])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
}))])
+- LogicalFilter(condition=[=($0, 1)])
   +- LogicalTableScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk, r_reason_id, r_reason_desc];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[CASE(>(EXPR$0, 1), EXPR$00, EXPR$01) AS bucket1, CASE(>(EXPR$02, 2), EXPR$03, EXPR$04) AS bucket2, CASE(>(EXPR$05, 3), EXPR$06, EXPR$07) AS bucket3, CASE(>(EXPR$08, 4), EXPR$09, EXPR$010) AS bucket4, CASE(>(EXPR$011, 5), EXPR$012, EXPR$013) AS bucket5])
+- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011, EXPR$012, EXPR$013], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011, EXPR$012], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01, EXPR$02], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00, EXPR$01], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[EXPR$0, EXPR$00], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :- Calc(select=[EXPR$0])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- NestedLoopJoin(where=[true], join=[r_reason_sk, EXPR$0], joinType=[LeftOuterJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :     :- Calc(select=[r_reason_sk], where=[=(r_reason_sk, 1)])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :     :  +- TableSourceScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk];filterPredicates=[]]]], fields=[r_reason_sk])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :     +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :        +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :           +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :              +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :                 +- Calc(select=[0 AS $f0], where=[AND(>=(ss_quantity, 1), <=(ss_quantity, 20))])
   :  :  :  :  :  :  :  :  :  :  :  :  :  :                    +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity];filterPredicates=[]]]], fields=[ss_quantity])
   :  :  :  :  :  :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_ext_discount_amt) AS (sum$0, count$1)])
   :  :  :  :  :  :  :  :  :  :  :  :  :              +- Calc(select=[ss_ext_discount_amt], where=[AND(>=(ss_quantity, 1), <=(ss_quantity, 20))])
   :  :  :  :  :  :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_ext_discount_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_ext_discount_amt])
   :  :  :  :  :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_net_paid) AS (sum$0, count$1)])
   :  :  :  :  :  :  :  :  :  :  :  :              +- Calc(select=[ss_net_paid], where=[AND(>=(ss_quantity, 1), <=(ss_quantity, 20))])
   :  :  :  :  :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_net_paid];filterPredicates=[]]]], fields=[ss_quantity, ss_net_paid])
   :  :  :  :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
   :  :  :  :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :  :  :  :  :  :  :              +- Calc(select=[0 AS $f0], where=[AND(>=(ss_quantity, 21), <=(ss_quantity, 40))])
   :  :  :  :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity];filterPredicates=[]]]], fields=[ss_quantity])
   :  :  :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_ext_discount_amt) AS (sum$0, count$1)])
   :  :  :  :  :  :  :  :  :  :              +- Calc(select=[ss_ext_discount_amt], where=[AND(>=(ss_quantity, 21), <=(ss_quantity, 40))])
   :  :  :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_ext_discount_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_ext_discount_amt])
   :  :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_net_paid) AS (sum$0, count$1)])
   :  :  :  :  :  :  :  :  :              +- Calc(select=[ss_net_paid], where=[AND(>=(ss_quantity, 21), <=(ss_quantity, 40))])
   :  :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_net_paid];filterPredicates=[]]]], fields=[ss_quantity, ss_net_paid])
   :  :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
   :  :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :  :  :  :              +- Calc(select=[0 AS $f0], where=[AND(>=(ss_quantity, 41), <=(ss_quantity, 60))])
   :  :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity];filterPredicates=[]]]], fields=[ss_quantity])
   :  :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_ext_discount_amt) AS (sum$0, count$1)])
   :  :  :  :  :  :  :              +- Calc(select=[ss_ext_discount_amt], where=[AND(>=(ss_quantity, 41), <=(ss_quantity, 60))])
   :  :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_ext_discount_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_ext_discount_amt])
   :  :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_net_paid) AS (sum$0, count$1)])
   :  :  :  :  :  :              +- Calc(select=[ss_net_paid], where=[AND(>=(ss_quantity, 41), <=(ss_quantity, 60))])
   :  :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_net_paid];filterPredicates=[]]]], fields=[ss_quantity, ss_net_paid])
   :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
   :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :              +- Calc(select=[0 AS $f0], where=[AND(>=(ss_quantity, 61), <=(ss_quantity, 80))])
   :  :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity];filterPredicates=[]]]], fields=[ss_quantity])
   :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_ext_discount_amt) AS (sum$0, count$1)])
   :  :  :  :              +- Calc(select=[ss_ext_discount_amt], where=[AND(>=(ss_quantity, 61), <=(ss_quantity, 80))])
   :  :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_ext_discount_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_ext_discount_amt])
   :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :  :  :        +- Exchange(distribution=[single])
   :  :  :           +- LocalSortAggregate(select=[Partial_AVG(ss_net_paid) AS (sum$0, count$1)])
   :  :  :              +- Calc(select=[ss_net_paid], where=[AND(>=(ss_quantity, 61), <=(ss_quantity, 80))])
   :  :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_net_paid];filterPredicates=[]]]], fields=[ss_quantity, ss_net_paid])
   :  :  +- Exchange(distribution=[broadcast])
   :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
   :  :        +- Exchange(distribution=[single])
   :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :              +- Calc(select=[0 AS $f0], where=[AND(>=(ss_quantity, 81), <=(ss_quantity, 100))])
   :  :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity];filterPredicates=[]]]], fields=[ss_quantity])
   :  +- Exchange(distribution=[broadcast])
   :     +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :        +- Exchange(distribution=[single])
   :           +- LocalSortAggregate(select=[Partial_AVG(ss_ext_discount_amt) AS (sum$0, count$1)])
   :              +- Calc(select=[ss_ext_discount_amt], where=[AND(>=(ss_quantity, 81), <=(ss_quantity, 100))])
   :                 +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_ext_discount_amt];filterPredicates=[]]]], fields=[ss_quantity, ss_ext_discount_amt])
   +- Exchange(distribution=[broadcast])
      +- SortAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_AVG(ss_net_paid) AS (sum$0, count$1)])
               +- Calc(select=[ss_net_paid], where=[AND(>=(ss_quantity, 81), <=(ss_quantity, 100))])
                  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_quantity, ss_net_paid];filterPredicates=[]]]], fields=[ss_quantity, ss_net_paid])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q81, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 81 in stream 0 using template query81.tpl
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'TN'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100

-- end query 81 in stream 0 using template query81.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], sort10=[$10], sort11=[$11], sort12=[$12], sort13=[$13], sort14=[$14], sort15=[$15], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], dir10=[ASC-nulls-first], dir11=[ASC-nulls-first], dir12=[ASC-nulls-first], dir13=[ASC-nulls-first], dir14=[ASC-nulls-first], dir15=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$17], c_salutation=[$23], c_first_name=[$24], c_last_name=[$25], ca_street_number=[$5], ca_street_name=[$6], ca_street_type=[$7], ca_suite_number=[$8], ca_city=[$9], ca_county=[$10], ca_state=[$11], ca_zip=[$12], ca_country=[$13], ca_gmt_offset=[$14], ca_location_type=[$15], ctr_total_return=[$2])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_state, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$7], ctr_state=[$63], cr_return_amt_inc_tax=[$20])
            LogicalFilter(condition=[AND(=($0, $27), =($33, 1998), =($10, $55))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
                  LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
})), =($3, $20), =($11, 'TN'), =($0, $16))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$7], ctr_state=[$63], cr_return_amt_inc_tax=[$20])
         :  :     +- LogicalFilter(condition=[AND(=($0, $27), =($33, 1998), =($10, $55))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
         :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, ca_street_number ASC, ca_street_name ASC, ca_street_type ASC, ca_suite_number ASC, ca_city ASC, ca_county ASC, ca_state ASC, ca_zip ASC, ca_country ASC, ca_gmt_offset ASC, ca_location_type ASC, ctr_total_return ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, ca_street_number ASC, ca_street_name ASC, ca_street_type ASC, ca_suite_number ASC, ca_city ASC, ca_county ASC, ca_state ASC, ca_zip ASC, ca_country ASC, ca_gmt_offset ASC, ca_location_type ASC, ctr_total_return ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, CAST('TN') AS ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type, ctr_total_return])
         +- HashJoin(where=[=(ctr_customer_sk, c_customer_sk)], join=[ctr_customer_sk, ctr_total_return, c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], joinType=[InnerJoin], build=[left])
            :- Exchange(distribution=[hash[ctr_customer_sk]])
            :  +- Calc(select=[ctr_customer_sk, ctr_total_return])
            :     +- HashJoin(where=[AND(=(ctr_state, ctr_state0), >(ctr_total_return, *($f1, 1.2)))], join=[ctr_customer_sk, ctr_state, ctr_total_return, ctr_state0, $f1], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Final_SUM(sum$0) AS ctr_total_return])
            :        :  +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :        :     +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Partial_SUM(cr_return_amt_inc_tax) AS sum$0])
            :        :        +- Calc(select=[cr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, cr_return_amt_inc_tax])
            :        :           +- HashJoin(where=[=(cr_returned_date_sk, d_date_sk)], join=[cr_returned_date_sk, cr_returning_customer_sk, cr_return_amt_inc_tax, ca_state, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :        :              :- Calc(select=[cr_returned_date_sk, cr_returning_customer_sk, cr_return_amt_inc_tax, ca_state])
            :        :              :  +- HashJoin(where=[=(cr_returning_addr_sk, ca_address_sk)], join=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
            :        :              :     :- Exchange(distribution=[hash[cr_returning_addr_sk]])
            :        :              :     :  +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax];filterPredicates=[]]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax])
            :        :              :     +- Exchange(distribution=[hash[ca_address_sk]])
            :        :              :        +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
            :        :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :        :                 +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
            :        :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
            :        +- Exchange(distribution=[broadcast])
            :           +- HashAggregate(isMerge=[true], groupBy=[ctr_state], select=[ctr_state, Final_AVG(sum$0, count$1) AS $f1])
            :              +- Exchange(distribution=[hash[ctr_state]])
            :                 +- LocalHashAggregate(groupBy=[ctr_state], select=[ctr_state, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
            :                    +- Calc(select=[ctr_state, ctr_total_return])
            :                       +- HashAggregate(isMerge=[true], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Final_SUM(sum$0) AS ctr_total_return])
            :                          +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :                             +- LocalHashAggregate(groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, Partial_SUM(cr_return_amt_inc_tax) AS sum$0])
            :                                +- Calc(select=[cr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, cr_return_amt_inc_tax])
            :                                   +- HashJoin(where=[=(cr_returned_date_sk, d_date_sk)], join=[cr_returned_date_sk, cr_returning_customer_sk, cr_return_amt_inc_tax, ca_state, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                                      :- Calc(select=[cr_returned_date_sk, cr_returning_customer_sk, cr_return_amt_inc_tax, ca_state])
            :                                      :  +- HashJoin(where=[=(cr_returning_addr_sk, ca_address_sk)], join=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
            :                                      :     :- Exchange(distribution=[hash[cr_returning_addr_sk]])
            :                                      :     :  +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax];filterPredicates=[]]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax])
            :                                      :     +- Exchange(distribution=[hash[ca_address_sk]])
            :                                      :        +- Calc(select=[ca_address_sk, ca_state], where=[IS NOT NULL(ca_state)])
            :                                      :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
            :                                      +- Reused(reference_id=[1])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- Calc(select=[c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type])
                  +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], joinType=[InnerJoin], build=[right])
                     :- Exchange(distribution=[hash[c_current_addr_sk]])
                     :  +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name])
                     +- Exchange(distribution=[hash[ca_address_sk]])
                        +- Calc(select=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], where=[=(ca_state, 'TN')])
                           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q82, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 82 in stream 0 using template query82.tpl
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 0 and 0+30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('1998-01-02' as date) and (cast('1998-01-02' as date) +  INTERVAL '60' day)
 and i_manufact_id in (1,2,3,4)
 and inv_quantity_on_hand between 100 and 500
 and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100

-- end query 82 in stream 0 using template query82.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}])
   +- LogicalProject(i_item_id=[$1], i_item_desc=[$4], i_current_price=[$5])
      +- LogicalFilter(condition=[AND(>=($5, 0), <=($5, +(0, 30)), =($23, $0), =($26, $22), >=($28, CAST('1998-01-02'):DATE NOT NULL), <=($28, +(CAST('1998-01-02'):DATE NOT NULL, 5184000000)), OR(=($13, 1), =($13, 2), =($13, 3), =($13, 4)), >=($25, 100), <=($25, 500), =($56, $0))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
               +- Calc(select=[i_item_id, i_item_desc, i_current_price])
                  +- HashJoin(where=[=(d_date_sk, inv_date_sk)], join=[inv_date_sk, i_item_id, i_item_desc, i_current_price, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[inv_date_sk, i_item_id, i_item_desc, i_current_price])
                     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_item_sk, inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], joinType=[InnerJoin], build=[right])
                     :     :- Exchange(distribution=[hash[ss_item_sk]])
                     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_item_sk];filterPredicates=[]]]], fields=[ss_item_sk])
                     :     +- Exchange(distribution=[hash[i_item_sk]])
                     :        +- Calc(select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price])
                     :           +- HashJoin(where=[=(inv_item_sk, i_item_sk)], join=[inv_date_sk, inv_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :- Calc(select=[inv_date_sk, inv_item_sk], where=[AND(>=(inv_quantity_on_hand, 100), <=(inv_quantity_on_hand, 500))])
                     :              :  +- TableSourceScan(table=[[builtin, default, inventory, source: [TestParquetTableSource -> selectedFields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand];filterPredicates=[]]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])
                     :              +- Exchange(distribution=[broadcast])
                     :                 +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price], where=[AND(>=(i_current_price, 0), <=(i_current_price, 30), IN(i_manufact_id, 1, 2, 3, 4))])
                     :                    +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-03-03))])
                           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q83, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 83 in stream 0 using template query83.tpl
with sr_items as
 (select i_item_id item_id,
        sum(sr_return_quantity) sr_item_qty
 from store_returns,
      item,
      date_dim
 where sr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-08-02','1998-11-02')))
 and   sr_returned_date_sk   = d_date_sk
 group by i_item_id),
 cr_items as
 (select i_item_id item_id,
        sum(cr_return_quantity) cr_item_qty
 from catalog_returns,
      item,
      date_dim
 where cr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-08-02','1998-11-02')))
 and   cr_returned_date_sk   = d_date_sk
 group by i_item_id),
 wr_items as
 (select i_item_id item_id,
        sum(wr_return_quantity) wr_item_qty
 from web_returns,
      item,
      date_dim
 where wr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('1998-01-02','1998-08-02','1998-11-02')))
 and   wr_returned_date_sk   = d_date_sk
 group by i_item_id)
  select  sr_items.item_id
       ,sr_item_qty
       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev
       ,cr_item_qty
       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev
       ,wr_item_qty
       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev
       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
 from sr_items
     ,cr_items
     ,wr_items
 where sr_items.item_id=cr_items.item_id
   and sr_items.item_id=wr_items.item_id 
 order by sr_items.item_id
         ,sr_item_qty
 limit 100

-- end query 83 in stream 0 using template query83.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_id=[$0], sr_item_qty=[$1], sr_dev=[*(/(/(CAST($1):DOUBLE, CAST(+(+($1, $3), $5)):DOUBLE), 3.0), 100)], cr_item_qty=[$3], cr_dev=[*(/(/(CAST($3):DOUBLE, CAST(+(+($1, $3), $5)):DOUBLE), 3.0), 100)], wr_item_qty=[$5], wr_dev=[*(/(/(CAST($5):DOUBLE, CAST(+(+($1, $3), $5)):DOUBLE), 3.0), 100)], average=[/(+(+($1, $3), $5), 3.0)])
   +- LogicalFilter(condition=[AND(=($0, $2), =($0, $4))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0}], sr_item_qty=[SUM($1)])
         :  :  +- LogicalProject(item_id=[$21], sr_return_quantity=[$10])
         :  :     +- LogicalFilter(condition=[AND(=($2, $20), IN($44, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST('1998-01-02'):DATE NOT NULL), =($2, CAST('1998-08-02'):DATE NOT NULL), =($2, CAST('1998-11-02'):DATE NOT NULL))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $42))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
         :  :           :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :  :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         :  +- LogicalAggregate(group=[{0}], cr_item_qty=[SUM($1)])
         :     +- LogicalProject(item_id=[$28], cr_return_quantity=[$17])
         :        +- LogicalFilter(condition=[AND(=($2, $27), IN($51, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST('1998-01-02'):DATE NOT NULL), =($2, CAST('1998-08-02'):DATE NOT NULL), =($2, CAST('1998-11-02'):DATE NOT NULL))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $49))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
         :              :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
         :              +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0}], wr_item_qty=[SUM($1)])
            +- LogicalProject(item_id=[$25], wr_return_quantity=[$14])
               +- LogicalFilter(condition=[AND(=($2, $24), IN($48, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST('1998-01-02'):DATE NOT NULL), =($2, CAST('1998-08-02'):DATE NOT NULL), =($2, CAST('1998-11-02'):DATE NOT NULL))])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})])
    LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
}), =($0, $46))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
                     :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[item_id, sr_item_qty, *(/(/(CAST(sr_item_qty), CAST(+(+(sr_item_qty, cr_item_qty), wr_item_qty))), 3.0), 100) AS sr_dev, cr_item_qty, *(/(/(CAST(cr_item_qty), CAST(+(+(sr_item_qty, cr_item_qty), wr_item_qty))), 3.0), 100) AS cr_dev, wr_item_qty, *(/(/(CAST(wr_item_qty), CAST(+(+(sr_item_qty, cr_item_qty), wr_item_qty))), 3.0), 100) AS wr_dev, /(+(+(sr_item_qty, cr_item_qty), wr_item_qty), 3.0) AS average])
+- SortLimit(orderBy=[item_id ASC, sr_item_qty ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[item_id ASC, sr_item_qty ASC], offset=[0], limit=[100], global=[false])
         +- SortMergeJoin(where=[=(item_id, item_id0)], join=[item_id, cr_item_qty, sr_item_qty, item_id0, wr_item_qty], joinType=[InnerJoin])
            :- Calc(select=[item_id, cr_item_qty, sr_item_qty])
            :  +- HashJoin(where=[=(item_id0, item_id)], join=[item_id, cr_item_qty, item_id0, sr_item_qty], joinType=[InnerJoin], build=[left])
            :     :- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS cr_item_qty])
            :     :  +- Exchange(distribution=[hash[item_id]])
            :     :     +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(cr_return_quantity) AS sum$0])
            :     :        +- Calc(select=[i_item_id AS item_id, cr_return_quantity])
            :     :           +- HashJoin(where=[=(cr_returned_date_sk, d_date_sk)], join=[cr_returned_date_sk, cr_return_quantity, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :     :              :- Calc(select=[cr_returned_date_sk, cr_return_quantity, i_item_id])
            :     :              :  +- HashJoin(where=[=(cr_item_sk, i_item_sk)], join=[cr_returned_date_sk, cr_item_sk, cr_return_quantity, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
            :     :              :     :- Exchange(distribution=[hash[cr_item_sk]])
            :     :              :     :  +- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_item_sk, cr_return_quantity];filterPredicates=[]]]], fields=[cr_returned_date_sk, cr_item_sk, cr_return_quantity])
            :     :              :     +- Exchange(distribution=[hash[i_item_sk]])
            :     :              :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
            :     :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :     :                 +- Calc(select=[d_date_sk])
            :     :                    +- HashSemiJoin(where=[=(d_date, d_date0)], join=[d_date_sk, d_date], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :     :                       :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
            :     :                       +- Exchange(distribution=[broadcast])
            :     :                          +- Calc(select=[d_date])
            :     :                             +- HashSemiJoin(where=[=(d_week_seq, d_week_seq0)], join=[d_date, d_week_seq], joinType=[LeftSemiJoin], isBroadcast=[true], build=[right])
            :     :                                :- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date, d_week_seq];filterPredicates=[]]]], fields=[d_date, d_week_seq])
            :     :                                +- Exchange(distribution=[broadcast])
            :     :                                   +- Calc(select=[d_week_seq], where=[OR(=(d_date, 1998-01-02), =(d_date, 1998-08-02), =(d_date, 1998-11-02))])
            :     :                                      +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date, d_week_seq];filterPredicates=[]]]], fields=[d_date, d_week_seq])
            :     +- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS sr_item_qty])
            :        +- Exchange(distribution=[hash[item_id]])
            :           +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(sr_return_quantity) AS sum$0])
            :              +- Calc(select=[i_item_id AS item_id, sr_return_quantity])
            :                 +- HashJoin(where=[=(sr_returned_date_sk, d_date_sk)], join=[sr_returned_date_sk, sr_return_quantity, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                    :- Calc(select=[sr_returned_date_sk, sr_return_quantity, i_item_id])
            :                    :  +- HashJoin(where=[=(sr_item_sk, i_item_sk)], join=[sr_returned_date_sk, sr_item_sk, sr_return_quantity, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
            :                    :     :- Exchange(distribution=[hash[sr_item_sk]])
            :                    :     :  +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_item_sk, sr_return_quantity];filterPredicates=[]]]], fields=[sr_returned_date_sk, sr_item_sk, sr_return_quantity])
            :                    :     +- Exchange(distribution=[hash[i_item_sk]])
            :                    :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
            :                    +- Reused(reference_id=[1])
            +- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS wr_item_qty])
               +- Exchange(distribution=[hash[item_id]])
                  +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(wr_return_quantity) AS sum$0])
                     +- Calc(select=[i_item_id AS item_id, wr_return_quantity])
                        +- HashJoin(where=[=(wr_returned_date_sk, d_date_sk)], join=[wr_returned_date_sk, wr_return_quantity, i_item_id, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[wr_returned_date_sk, wr_return_quantity, i_item_id])
                           :  +- HashJoin(where=[=(wr_item_sk, i_item_sk)], join=[wr_returned_date_sk, wr_item_sk, wr_return_quantity, i_item_sk, i_item_id], joinType=[InnerJoin], build=[right])
                           :     :- Exchange(distribution=[hash[wr_item_sk]])
                           :     :  +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_item_sk, wr_return_quantity];filterPredicates=[]]]], fields=[wr_returned_date_sk, wr_item_sk, wr_return_quantity])
                           :     +- Exchange(distribution=[hash[i_item_sk]])
                           :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id];filterPredicates=[]]]], fields=[i_item_sk, i_item_id])
                           +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q84, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 84 in stream 0 using template query84.tpl
select  c_customer_id as customer_id
       , coalesce(c_last_name,'') || ', ' || coalesce(c_first_name,'') as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Midway'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  0
   and ib_upper_bound   <=  0 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100

-- end query 84 in stream 0 using template query84.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$1], customername=[||(||(CASE(IS NOT NULL($9), $9, ''), ', '), CASE(IS NOT NULL($8), $8, ''))])
   +- LogicalFilter(condition=[AND(=($24, 'Midway'), =($4, $18), >=($46, 0), <=($47, +(0, 50000)), =($45, $41), =($31, $2), =($40, $3), =($52, $31))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
         :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
         :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
         :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
         :  +- LogicalTableScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]])
         +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c_customer_id AS customer_id, ||(||(CASE(IS NOT NULL(c_last_name), c_last_name, ''), ', '), CASE(IS NOT NULL(c_first_name), c_first_name, '')) AS customername])
+- SortLimit(orderBy=[c_customer_id ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC], offset=[0], limit=[100], global=[false])
         +- HashJoin(where=[=(c_current_addr_sk, ca_address_sk)], join=[c_customer_id, c_current_addr_sk, c_first_name, c_last_name, ca_address_sk], joinType=[InnerJoin], build=[right])
            :- Exchange(distribution=[hash[c_current_addr_sk]])
            :  +- Calc(select=[c_customer_id, c_current_addr_sk, c_first_name, c_last_name])
            :     +- HashJoin(where=[=(sr_cdemo_sk, cd_demo_sk)], join=[sr_cdemo_sk, c_customer_id, c_current_addr_sk, c_first_name, c_last_name, cd_demo_sk], joinType=[InnerJoin], build=[right])
            :        :- Exchange(distribution=[hash[sr_cdemo_sk]])
            :        :  +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_cdemo_sk];filterPredicates=[]]]], fields=[sr_cdemo_sk])
            :        +- Calc(select=[c_customer_id, c_current_addr_sk, c_first_name, c_last_name, cd_demo_sk])
            :           +- HashJoin(where=[=(cd_demo_sk, c_current_cdemo_sk)], join=[c_customer_id, c_current_cdemo_sk, c_current_addr_sk, c_first_name, c_last_name, cd_demo_sk], joinType=[InnerJoin], build=[right])
            :              :- Exchange(distribution=[hash[c_current_cdemo_sk]])
            :              :  +- Calc(select=[c_customer_id, c_current_cdemo_sk, c_current_addr_sk, c_first_name, c_last_name])
            :              :     +- HashJoin(where=[=(hd_demo_sk, c_current_hdemo_sk)], join=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :              :        :- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name])
            :              :        +- Exchange(distribution=[broadcast])
            :              :           +- Calc(select=[hd_demo_sk])
            :              :              +- NestedLoopJoin(where=[=(ib_income_band_sk, hd_income_band_sk)], join=[hd_demo_sk, hd_income_band_sk, ib_income_band_sk], joinType=[InnerJoin], build=[right])
            :              :                 :- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk];filterPredicates=[]]]], fields=[hd_demo_sk, hd_income_band_sk])
            :              :                 +- Exchange(distribution=[broadcast])
            :              :                    +- Calc(select=[ib_income_band_sk], where=[AND(>=(ib_lower_bound, 0), <=(ib_upper_bound, 50000))])
            :              :                       +- TableSourceScan(table=[[builtin, default, income_band, source: [TestParquetTableSource -> selectedFields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound];filterPredicates=[]]]], fields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound])
            :              +- Exchange(distribution=[hash[cd_demo_sk]])
            :                 +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk];filterPredicates=[]]]], fields=[cd_demo_sk])
            +- Exchange(distribution=[hash[ca_address_sk]])
               +- Calc(select=[ca_address_sk], where=[=(ca_city, 'Midway')])
                  +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_city];filterPredicates=[]]]], fields=[ca_address_sk, ca_city])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q85, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 85 in stream 0 using template query85.tpl
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Unknown'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'S'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Secondary'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('ID', 'TN', 'SD')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('AL', 'SC', 'OH')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('LA', 'MO', 'GA')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100

-- end query 85 in stream 0 using template query85.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(EXPR$0=[SUBSTR($0, 1, 20)], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[$3])
   +- LogicalAggregate(group=[{0}], EXPR$1=[AVG($1)], EXPR$2=[AVG($2)], EXPR$3=[AVG($3)])
      +- LogicalProject(r_reason_desc=[$133], ws_quantity=[$18], wr_refunded_cash=[$54], wr_fee=[$52])
         +- LogicalFilter(condition=[AND(=($12, $58), =($3, $36), =($17, $47), =($0, $103), =($109, 1998), =($72, $38), =($81, $42), =($90, $40), =($131, $46), OR(AND(=($74, 'U'), =($74, $83), =($75, 'Unknown'), =($75, $84), >=($21, 100.00), <=($21, 150.00)), AND(=($74, 'M'), =($74, $83), =($75, 'Primary'), =($75, $84), >=($21, 50.00), <=($21, 100.00)), AND(=($74, 'S'), =($74, $83), =($75, 'Secondary'), =($75, $84), >=($21, 150.00), <=($21, 200.00))), OR(AND(=($100, 'United States'), OR(=($98, 'ID'), =($98, 'TN'), =($98, 'SD')), >=($33, 100), <=($33, 200)), AND(=($100, 'United States'), OR(=($98, 'AL'), =($98, 'SC'), =($98, 'OH')), >=($33, 150), <=($33, 300)), AND(=($100, 'United States'), OR(=($98, 'LA'), =($98, 'MO'), =($98, 'GA')), >=($33, 50), <=($33, 250))))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
               :  :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
               :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_web_page_id, wp_rec_start_date, wp_rec_end_date, wp_creation_date_sk, wp_access_date_sk, wp_autogen_flag, wp_customer_sk, wp_url, wp_type, wp_char_count, wp_link_count, wp_image_count, wp_max_ad_count];filterPredicates=[]]]])
               :  :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
               :  :  :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk, r_reason_id, r_reason_desc];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, EXPR$1 ASC, EXPR$2 ASC, EXPR$3 ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, EXPR$1 ASC, EXPR$2 ASC, EXPR$3 ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[SUBSTR(r_reason_desc, 1, 20) AS EXPR$0, EXPR$1, EXPR$2, EXPR$3])
         +- HashAggregate(isMerge=[true], groupBy=[r_reason_desc], select=[r_reason_desc, Final_AVG(sum$0, count$1) AS EXPR$1, Final_AVG(sum$2, count$3) AS EXPR$2, Final_AVG(sum$4, count$5) AS EXPR$3])
            +- Exchange(distribution=[hash[r_reason_desc]])
               +- LocalHashAggregate(groupBy=[r_reason_desc], select=[r_reason_desc, Partial_AVG(ws_quantity) AS (sum$0, count$1), Partial_AVG(wr_refunded_cash) AS (sum$2, count$3), Partial_AVG(wr_fee) AS (sum$4, count$5)])
                  +- Calc(select=[r_reason_desc, ws_quantity, wr_refunded_cash, wr_fee])
                     +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, ws_quantity, wr_fee, wr_refunded_cash, r_reason_desc, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[ws_sold_date_sk, ws_quantity, wr_fee, wr_refunded_cash, r_reason_desc])
                        :  +- HashJoin(where=[=(ws_web_page_sk, wp_web_page_sk)], join=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, wr_fee, wr_refunded_cash, r_reason_desc, wp_web_page_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :- Calc(select=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, wr_fee, wr_refunded_cash, r_reason_desc])
                        :     :  +- HashJoin(where=[=(r_reason_sk, wr_reason_sk)], join=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, wr_reason_sk, wr_fee, wr_refunded_cash, r_reason_sk, r_reason_desc], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :- Calc(select=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, wr_reason_sk, wr_fee, wr_refunded_cash])
                        :     :     :  +- HashJoin(where=[AND(=(ca_address_sk, wr_refunded_addr_sk), OR(AND(OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD')), >=(ws_net_profit, 100), <=(ws_net_profit, 200)), AND(OR(=(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH')), >=(ws_net_profit, 150), <=(ws_net_profit, 300)), AND(OR(=(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')), >=(ws_net_profit, 50), <=(ws_net_profit, 250))))], join=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, ws_net_profit, wr_refunded_addr_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ca_address_sk, ca_state], joinType=[InnerJoin], build=[right])
                        :     :     :     :- Exchange(distribution=[hash[wr_refunded_addr_sk]])
                        :     :     :     :  +- Calc(select=[ws_sold_date_sk, ws_web_page_sk, ws_quantity, ws_net_profit, wr_refunded_addr_sk, wr_reason_sk, wr_fee, wr_refunded_cash])
                        :     :     :     :     +- HashJoin(where=[AND(OR(AND(=(cd_marital_status0, 'U'), =(cd_education_status0, 'Unknown'), >=(ws_sales_price, 100.00), <=(ws_sales_price, 150.00)), AND(=(cd_marital_status0, 'M'), =(cd_education_status0, 'Primary'), >=(ws_sales_price, 50.00), <=(ws_sales_price, 100.00)), AND(=(cd_marital_status0, 'S'), =(cd_education_status0, 'Secondary'), >=(ws_sales_price, 150.00), <=(ws_sales_price, 200.00))), =(ws_item_sk, wr_item_sk), =(ws_order_number, wr_order_number))], join=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit, wr_item_sk, wr_refunded_addr_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash, cd_marital_status0, cd_education_status0], joinType=[InnerJoin], build=[right])
                        :     :     :     :        :- Exchange(distribution=[hash[ws_item_sk, ws_order_number]])
                        :     :     :     :        :  +- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit], where=[AND(OR(AND(>=(ws_sales_price, 100.00), <=(ws_sales_price, 150.00)), AND(>=(ws_sales_price, 50.00), <=(ws_sales_price, 100.00)), AND(>=(ws_sales_price, 150.00), <=(ws_sales_price, 200.00))), OR(AND(>=(ws_net_profit, 100), <=(ws_net_profit, 200)), AND(>=(ws_net_profit, 150), <=(ws_net_profit, 300)), AND(>=(ws_net_profit, 50), <=(ws_net_profit, 250))))])
                        :     :     :     :        :     +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit])
                        :     :     :     :        +- Calc(select=[wr_item_sk, wr_refunded_addr_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash, cd_marital_status0, cd_education_status0])
                        :     :     :     :           +- HashJoin(where=[AND(=(cd_demo_sk, wr_returning_cdemo_sk), =(cd_demo_sk0, wr_refunded_cdemo_sk))], join=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash, cd_demo_sk, cd_demo_sk0, cd_marital_status0, cd_education_status0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :     :              :- Exchange(distribution=[hash[wr_item_sk, wr_order_number]])
                        :     :     :     :              :  +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash];filterPredicates=[]]]], fields=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash])
                        :     :     :     :              +- Exchange(distribution=[broadcast])
                        :     :     :     :                 +- Calc(select=[cd_demo_sk, cd_demo_sk0, cd_marital_status0, cd_education_status0])
                        :     :     :     :                    +- HashJoin(where=[AND(=(cd_marital_status0, cd_marital_status), =(cd_education_status0, cd_education_status))], join=[cd_demo_sk, cd_marital_status, cd_education_status, cd_demo_sk0, cd_marital_status0, cd_education_status0], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :     :     :                       :- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                        :     :     :     :                       +- Exchange(distribution=[broadcast])
                        :     :     :     :                          +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[OR(AND(=(cd_marital_status, 'U'), =(cd_education_status, 'Unknown')), AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Primary')), AND(=(cd_marital_status, 'S'), =(cd_education_status, 'Secondary')))])
                        :     :     :     :                             +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                        :     :     :     +- Exchange(distribution=[hash[ca_address_sk]])
                        :     :     :        +- Calc(select=[ca_address_sk, ca_state], where=[AND(=(ca_country, 'United States'), OR(=(ca_state, 'ID'), =(ca_state, 'TN'), =(ca_state, 'SD'), =(ca_state, 'AL'), =(ca_state, 'SC'), =(ca_state, 'OH'), =(ca_state, 'LA'), =(ca_state, 'MO'), =(ca_state, 'GA')))])
                        :     :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state, ca_country];filterPredicates=[]]]], fields=[ca_address_sk, ca_state, ca_country])
                        :     :     +- Exchange(distribution=[broadcast])
                        :     :        +- TableSourceScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk, r_reason_desc];filterPredicates=[]]]], fields=[r_reason_sk, r_reason_desc])
                        :     +- Exchange(distribution=[broadcast])
                        :        +- TableSourceScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk];filterPredicates=[]]]], fields=[wp_web_page_sk])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[d_date_sk], where=[=(d_year, 1998)])
                              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year];filterPredicates=[]]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q86, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 86 in stream 0 using template query86.tpl
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1176 and 1176+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100

-- end query 86 in stream 0 using template query86.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[$0], i_category=[$1], i_class=[$2], lochierarchy=[$3], rank_within_parent=[$4])
+- LogicalSort(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(total_sum=[$2], i_category=[$0], i_class=[$1], lochierarchy=[+($3, $4)], rank_within_parent=[RANK() OVER (PARTITION BY +($3, $4), CASE(=($4, 0), $0, null) ORDER BY $2 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$5=[CASE(=(+($3, $4), 0), $0, null)])
      +- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], total_sum=[SUM($2)], agg#1=[GROUPING($0)], agg#2=[GROUPING($1)])
         +- LogicalProject(i_category=[$74], i_class=[$72], ws_net_paid=[$29])
            +- LogicalFilter(condition=[AND(>=($37, 1176), <=($37, +(1176, 11)), =($34, $0), =($62, $3))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[total_sum, i_category, i_class, $3 AS lochierarchy, w0$o0 AS rank_within_parent])
+- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], limit=[100], global=[false])
         +- OverAggregate(partitionBy=[$3, $4], orderBy=[total_sum DESC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_class, total_sum, $3, $4, $5, w0$o0])
            +- Sort(orderBy=[$3 ASC, $4 ASC, total_sum DESC])
               +- Exchange(distribution=[hash[$3, $4]])
                  +- Calc(select=[i_category, i_class, total_sum, +(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)) AS $3, CASE(=(CASE(=($e, 0), 0, =($e, 1), 1, 1), 0), i_category, null) AS $4, CASE(=(+(CASE(=($e, 0), 0, =($e, 1), 0, 1), CASE(=($e, 0), 0, =($e, 1), 1, 1)), 0), i_category, null) AS $5])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Final_SUM(sum$0) AS total_sum])
                        +- Exchange(distribution=[hash[i_category, i_class, $e]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Partial_SUM(ws_net_paid) AS sum$0])
                              +- Expand(projects=[{i_category, i_class, ws_net_paid, 0 AS $e}, {i_category, null AS i_class, ws_net_paid, 1 AS $e}, {null AS i_category, null AS i_class, ws_net_paid, 3 AS $e}])
                                 +- Calc(select=[i_category, i_class, ws_net_paid])
                                    +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_net_paid, i_class, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                       :- Calc(select=[ws_sold_date_sk, ws_net_paid, i_class, i_category])
                                       :  +- HashJoin(where=[=(i_item_sk, ws_item_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_net_paid, i_item_sk, i_class, i_category], joinType=[InnerJoin], build=[right])
                                       :     :- Exchange(distribution=[hash[ws_item_sk]])
                                       :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_net_paid];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_net_paid])
                                       :     +- Exchange(distribution=[hash[i_item_sk]])
                                       :        +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_class, i_category])
                                       +- Exchange(distribution=[broadcast])
                                          +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                                             +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q87, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 87 in stream 0 using template query87.tpl
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1176 and 1176+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1176 and 1176+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1176 and 1176+11)
) cool_cust


-- end query 87 in stream 0 using template query87.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
+- LogicalProject($f0=[0])
   +- LogicalMinus(all=[false])
      :- LogicalMinus(all=[false])
      :  :- LogicalAggregate(group=[{0, 1, 2}])
      :  :  +- LogicalProject(c_last_name=[$60], c_first_name=[$59], d_date=[$25])
      :  :     +- LogicalFilter(condition=[AND(=($0, $23), =($3, $51), >=($26, 1176), <=($26, +(1176, 11)))])
      :  :        +- LogicalJoin(condition=[true], joinType=[inner])
      :  :           :- LogicalJoin(condition=[true], joinType=[inner])
      :  :           :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
      :  :           :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :  :           +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
      :  +- LogicalAggregate(group=[{0, 1, 2}])
      :     +- LogicalProject(c_last_name=[$71], c_first_name=[$70], d_date=[$36])
      :        +- LogicalFilter(condition=[AND(=($0, $34), =($3, $62), >=($37, 1176), <=($37, +(1176, 11)))])
      :           +- LogicalJoin(condition=[true], joinType=[inner])
      :              :- LogicalJoin(condition=[true], joinType=[inner])
      :              :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
      :              :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
      :              +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
      +- LogicalAggregate(group=[{0, 1, 2}])
         +- LogicalProject(c_last_name=[$71], c_first_name=[$70], d_date=[$36])
            +- LogicalFilter(condition=[AND(=($0, $34), =($4, $62), >=($37, 1176), <=($37, +(1176, 11)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
      +- Calc(select=[0 AS $f0])
         +- HashSemiJoin(where=[AND(OR(=(c_last_name, c_last_name0), AND(IS NULL(c_last_name), IS NULL(c_last_name0))), OR(=(c_first_name, c_first_name0), AND(IS NULL(c_first_name), IS NULL(c_first_name0))), OR(=(d_date, d_date0), AND(IS NULL(d_date), IS NULL(d_date0))))], join=[c_last_name, c_first_name, d_date], joinType=[LeftAntiJoin], build=[right])
            :- HashSemiJoin(where=[AND(OR(=(c_last_name, c_last_name0), AND(IS NULL(c_last_name), IS NULL(c_last_name0))), OR(=(c_first_name, c_first_name0), AND(IS NULL(c_first_name), IS NULL(c_first_name0))), OR(=(d_date, d_date0), AND(IS NULL(d_date), IS NULL(d_date0))))], join=[c_last_name, c_first_name, d_date], joinType=[LeftAntiJoin], build=[right])
            :  :- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
            :  :  +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
            :  :     +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
            :  :        +- Calc(select=[c_last_name, c_first_name, d_date])
            :  :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :  :              :- Calc(select=[ss_sold_date_sk, c_first_name, c_last_name])
            :  :              :  +- HashJoin(where=[=(ss_customer_sk, c_customer_sk)], join=[ss_sold_date_sk, ss_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
            :  :              :     :- Exchange(distribution=[hash[ss_customer_sk]])
            :  :              :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_customer_sk])
            :  :              :     +- Exchange(distribution=[hash[c_customer_sk]])
            :  :              :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
            :  :              +- Exchange(distribution=[broadcast], reuse_id=[1])
            :  :                 +- Calc(select=[d_date_sk, d_date], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
            :  :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_date, d_month_seq])
            :  +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
            :     +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
            :        +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
            :           +- Calc(select=[c_last_name, c_first_name, d_date])
            :              +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[cs_sold_date_sk, c_first_name, c_last_name])
            :                 :  +- HashJoin(where=[=(cs_bill_customer_sk, c_customer_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
            :                 :     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
            :                 :     :  +- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk])
            :                 :     +- Exchange(distribution=[hash[c_customer_sk]])
            :                 :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
            :                 +- Reused(reference_id=[1])
            +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
               +- Exchange(distribution=[hash[c_last_name, c_first_name, d_date]])
                  +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, d_date], select=[c_last_name, c_first_name, d_date])
                     +- Calc(select=[c_last_name, c_first_name, d_date])
                        +- HashJoin(where=[=(ws_sold_date_sk, d_date_sk)], join=[ws_sold_date_sk, c_first_name, c_last_name, d_date_sk, d_date], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ws_sold_date_sk, c_first_name, c_last_name])
                           :  +- HashJoin(where=[=(ws_bill_customer_sk, c_customer_sk)], join=[ws_sold_date_sk, ws_bill_customer_sk, c_customer_sk, c_first_name, c_last_name], joinType=[InnerJoin], build=[right])
                           :     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                           :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_bill_customer_sk];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                           :     +- Exchange(distribution=[hash[c_customer_sk]])
                           :        +- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_first_name, c_last_name];filterPredicates=[]]]], fields=[c_customer_sk, c_first_name, c_last_name])
                           +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q88, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 88 in stream 0 using template query88.tpl
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count<=-1+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8


-- end query 88 in stream 0 using template query88.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(h8_30_to_9=[$0], h9_to_9_30=[$1], h9_30_to_10=[$2], h10_to_10_30=[$3], h10_30_to_11=[$4], h11_to_11_30=[$5], h11_30_to_12=[$6], h12_to_12_30=[$7])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalJoin(condition=[true], joinType=[inner])
   :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :- LogicalAggregate(group=[{}], h8_30_to_9=[COUNT()])
   :  :  :  :  :  :  :  +- LogicalProject($f0=[0])
   :  :  :  :  :  :  :     +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 8), >=($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :  :  :  :  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :  :  :  :  :  :           :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :  :  :  :  :  :           :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :  :  :  :  :  :           +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  :  :  :  :  :  +- LogicalAggregate(group=[{}], h9_to_9_30=[COUNT()])
   :  :  :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 9), <($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :  :  :  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :  :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :  :  :  :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  :  :  :  :  +- LogicalAggregate(group=[{}], h9_30_to_10=[COUNT()])
   :  :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 9), >=($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :  :  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :  :  :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  :  :  :  +- LogicalAggregate(group=[{}], h10_to_10_30=[COUNT()])
   :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 10), <($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :  :  :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :  :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  :  :  +- LogicalAggregate(group=[{}], h10_30_to_11=[COUNT()])
   :  :  :     +- LogicalProject($f0=[0])
   :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 10), >=($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :  :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :  :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  :  +- LogicalAggregate(group=[{}], h11_to_11_30=[COUNT()])
   :  :     +- LogicalProject($f0=[0])
   :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 11), <($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :  :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :  :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :  :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   :  +- LogicalAggregate(group=[{}], h11_30_to_12=[COUNT()])
   :     +- LogicalProject($f0=[0])
   :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 11), >=($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
   :           +- LogicalJoin(condition=[true], joinType=[inner])
   :              :- LogicalJoin(condition=[true], joinType=[inner])
   :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :              :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
   :              :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
   :              :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
   :              +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
   +- LogicalAggregate(group=[{}], h12_to_12_30=[COUNT()])
      +- LogicalProject($f0=[0])
         +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 12), <($32, 30), OR(AND(=($26, -1), <=($27, +(-1, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, 'ese'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[h8_30_to_9, h9_to_9_30, h9_30_to_10, h10_to_10_30, h10_30_to_11, h11_to_11_30, h11_30_to_12, h12_to_12_30])
+- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30, h9_30_to_10, h9_to_9_30], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30, h9_30_to_10], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :  :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :  :  :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :  :  :  :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30, h11_30_to_12], joinType=[InnerJoin], build=[right], singleRowJoin=[true])
   :  :  :  :  :  :- NestedLoopJoin(where=[true], join=[h8_30_to_9, h12_to_12_30], joinType=[InnerJoin], build=[left], singleRowJoin=[true])
   :  :  :  :  :  :  :- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :  +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h8_30_to_9])
   :  :  :  :  :  :  :     +- Exchange(distribution=[single])
   :  :  :  :  :  :  :        +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :  :  :           +- Calc(select=[0 AS $f0])
   :  :  :  :  :  :  :              +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :  :  :                 :- Calc(select=[ss_store_sk])
   :  :  :  :  :  :  :                 :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :  :  :                 :     :- Calc(select=[ss_sold_time_sk, ss_store_sk], reuse_id=[1])
   :  :  :  :  :  :  :                 :     :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :  :  :                 :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk];filterPredicates=[]]]], fields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk])
   :  :  :  :  :  :  :                 :     :     +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :                 :     :        +- Calc(select=[hd_demo_sk], where=[OR(AND(=(hd_dep_count, -1), <=(hd_vehicle_count, 1)), AND(=(hd_dep_count, 0), <=(hd_vehicle_count, 2)), AND(=(hd_dep_count, 1), <=(hd_vehicle_count, 3)))])
   :  :  :  :  :  :  :                 :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
   :  :  :  :  :  :  :                 :     +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :  :                 :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 8), >=(t_minute, 30))])
   :  :  :  :  :  :  :                 :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :  :  :  :  :  :                 +- Exchange(distribution=[broadcast], reuse_id=[2])
   :  :  :  :  :  :  :                    +- Calc(select=[s_store_sk], where=[=(s_store_name, 'ese')])
   :  :  :  :  :  :  :                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_name])
   :  :  :  :  :  :  +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h12_to_12_30])
   :  :  :  :  :  :     +- Exchange(distribution=[single])
   :  :  :  :  :  :        +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :  :           +- Calc(select=[0 AS $f0])
   :  :  :  :  :  :              +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :  :                 :- Calc(select=[ss_store_sk])
   :  :  :  :  :  :                 :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :  :                 :     :- Reused(reference_id=[1])
   :  :  :  :  :  :                 :     +- Exchange(distribution=[broadcast])
   :  :  :  :  :  :                 :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 12), <(t_minute, 30))])
   :  :  :  :  :  :                 :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :  :  :  :  :                 +- Reused(reference_id=[2])
   :  :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h11_30_to_12])
   :  :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :  :              +- Calc(select=[0 AS $f0])
   :  :  :  :  :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :                    :- Calc(select=[ss_store_sk])
   :  :  :  :  :                    :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :  :                    :     :- Reused(reference_id=[1])
   :  :  :  :  :                    :     +- Exchange(distribution=[broadcast])
   :  :  :  :  :                    :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 11), >=(t_minute, 30))])
   :  :  :  :  :                    :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :  :  :  :                    +- Reused(reference_id=[2])
   :  :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h11_to_11_30])
   :  :  :  :        +- Exchange(distribution=[single])
   :  :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :  :              +- Calc(select=[0 AS $f0])
   :  :  :  :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :                    :- Calc(select=[ss_store_sk])
   :  :  :  :                    :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :  :                    :     :- Reused(reference_id=[1])
   :  :  :  :                    :     +- Exchange(distribution=[broadcast])
   :  :  :  :                    :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 11), <(t_minute, 30))])
   :  :  :  :                    :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :  :  :                    +- Reused(reference_id=[2])
   :  :  :  +- Exchange(distribution=[broadcast])
   :  :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h10_30_to_11])
   :  :  :        +- Exchange(distribution=[single])
   :  :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :  :              +- Calc(select=[0 AS $f0])
   :  :  :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :                    :- Calc(select=[ss_store_sk])
   :  :  :                    :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :  :                    :     :- Reused(reference_id=[1])
   :  :  :                    :     +- Exchange(distribution=[broadcast])
   :  :  :                    :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 10), >=(t_minute, 30))])
   :  :  :                    :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :  :                    +- Reused(reference_id=[2])
   :  :  +- Exchange(distribution=[broadcast])
   :  :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h10_to_10_30])
   :  :        +- Exchange(distribution=[single])
   :  :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :  :              +- Calc(select=[0 AS $f0])
   :  :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :                    :- Calc(select=[ss_store_sk])
   :  :                    :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :  :                    :     :- Reused(reference_id=[1])
   :  :                    :     +- Exchange(distribution=[broadcast])
   :  :                    :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 10), <(t_minute, 30))])
   :  :                    :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :  :                    +- Reused(reference_id=[2])
   :  +- Exchange(distribution=[broadcast])
   :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h9_30_to_10])
   :        +- Exchange(distribution=[single])
   :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
   :              +- Calc(select=[0 AS $f0])
   :                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                    :- Calc(select=[ss_store_sk])
   :                    :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
   :                    :     :- Reused(reference_id=[1])
   :                    :     +- Exchange(distribution=[broadcast])
   :                    :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 9), >=(t_minute, 30))])
   :                    :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
   :                    +- Reused(reference_id=[2])
   +- Exchange(distribution=[broadcast])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS h9_to_9_30])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
               +- Calc(select=[0 AS $f0])
                  +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_store_sk])
                     :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Reused(reference_id=[1])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 9), <(t_minute, 30))])
                     :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
                     +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q89, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 89 in stream 0 using template query89.tpl
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (1998) and
        ((i_category in ('Women','Men','Children') and
          i_class in ('dresses','accessories','newborn')
         )
      or (i_category in ('Shoes','Music','Jewelry') and
          i_class in ('womens','rock','birdal') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100

-- end query 89 in stream 0 using template query89.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7])
+- LogicalSort(sort0=[$8], sort1=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7], EXPR$8=[-($6, $7)])
      +- LogicalFilter(condition=[>(CASE(<>($7, 0), /(ABS(-($6, $7)), $7), null), 0.1)])
         +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CAST(CASE(>(COUNT($6) OVER (PARTITION BY $0, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($6) OVER (PARTITION BY $0, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null)):DECIMAL(38, 6), COUNT($6) OVER (PARTITION BY $0, $2, $3, $4 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))])
            +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
               +- LogicalProject(i_category=[$12], i_class=[$10], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_moy=[$53], ss_sales_price=[$35])
                  +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), =($51, 1998), OR(AND(OR(=($12, 'Women'), =($12, 'Men'), =($12, 'Children')), OR(=($10, 'dresses'), =($10, 'accessories'), =($10, 'newborn'))), AND(OR(=($12, 'Shoes'), =($12, 'Music'), =($12, 'Jewelry')), OR(=($10, 'womens'), =($10, 'rock'), =($10, 'birdal')))))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :  :- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
                        :  :  +- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
                        :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
                        +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, avg_monthly_sales])
+- SortLimit(orderBy=[EXPR$8 ASC, s_store_name ASC], offset=[0], limit=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$8 ASC, s_store_name ASC], offset=[0], limit=[100], global=[false])
         +- Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0) AS avg_monthly_sales, -(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)) AS EXPR$8], where=[CASE(<>(/(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0), 0), >(/(ABS(-(sum_sales, /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0))), /(CAST(CASE(>(w0$o0, 0), CAST(w0$o1), null)), w0$o0)), 0.1), null)])
            +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, w0$o0, w0$o1])
               +- Sort(orderBy=[i_category ASC, i_brand ASC, s_store_name ASC, s_company_name ASC])
                  +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, ss_sales_price])
                                 +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_moy, s_store_sk, s_store_name, s_company_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_moy])
                                    :  +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_date_sk, d_moy], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_class, i_category])
                                    :     :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_brand, i_class, i_category], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    :     :     +- Exchange(distribution=[broadcast])
                                    :     :        +- Calc(select=[i_item_sk, i_brand, i_class, i_category], where=[OR(AND(OR(=(i_category, 'Women'), =(i_category, 'Men'), =(i_category, 'Children')), OR(=(i_class, 'dresses'), =(i_class, 'accessories'), =(i_class, 'newborn'))), AND(OR(=(i_category, 'Shoes'), =(i_category, 'Music'), =(i_category, 'Jewelry')), OR(=(i_class, 'womens'), =(i_class, 'rock'), =(i_class, 'birdal'))))])
                                    :     :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_brand, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_brand, i_class, i_category])
                                    :     +- Exchange(distribution=[broadcast])
                                    :        +- Calc(select=[d_date_sk, d_moy], where=[=(d_year, 1998)])
                                    :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                                    +- Exchange(distribution=[broadcast])
                                       +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name, s_company_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_name, s_company_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q90, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 90 in stream 0 using template query90.tpl
select  cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
 from ( select count(*) amc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 6 and 6+1
         and household_demographics.hd_dep_count = 0
         and web_page.wp_char_count between 5000 and 5200) `at`,
      ( select count(*) pmc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 13 and 13+1
         and household_demographics.hd_dep_count = 0
         and web_page.wp_char_count between 5000 and 5200) pt
 order by am_pm_ratio
 limit 100

-- end query 90 in stream 0 using template query90.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(am_pm_ratio=[/(CAST($0):DECIMAL(15, 4) NOT NULL, CAST($1):DECIMAL(15, 4) NOT NULL)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{}], amc=[COUNT()])
      :  +- LogicalProject($f0=[0])
      :     +- LogicalFilter(condition=[AND(=($1, $39), =($10, $34), =($12, $49), >=($42, 6), <=($42, +(6, 1)), =($37, 0), >=($59, 5000), <=($59, 5200))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
      :           :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
      :           :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
      :           +- LogicalTableScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_web_page_id, wp_rec_start_date, wp_rec_end_date, wp_creation_date_sk, wp_access_date_sk, wp_autogen_flag, wp_customer_sk, wp_url, wp_type, wp_char_count, wp_link_count, wp_image_count, wp_max_ad_count];filterPredicates=[]]]])
      +- LogicalAggregate(group=[{}], pmc=[COUNT()])
         +- LogicalProject($f0=[0])
            +- LogicalFilter(condition=[AND(=($1, $39), =($10, $34), =($12, $49), >=($42, 13), <=($42, +(13, 1)), =($37, 0), >=($59, 5000), <=($59, 5200))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
                  :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
                  :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
                  +- LogicalTableScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_web_page_id, wp_rec_start_date, wp_rec_end_date, wp_creation_date_sk, wp_access_date_sk, wp_autogen_flag, wp_customer_sk, wp_url, wp_type, wp_char_count, wp_link_count, wp_image_count, wp_max_ad_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[am_pm_ratio ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[am_pm_ratio ASC], offset=[0], limit=[100], global=[false])
      +- Calc(select=[/(CAST(amc), CAST(pmc)) AS am_pm_ratio])
         +- NestedLoopJoin(where=[true], join=[amc, pmc], joinType=[InnerJoin], build=[left], singleRowJoin=[true])
            :- Exchange(distribution=[broadcast])
            :  +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS amc])
            :     +- Exchange(distribution=[single])
            :        +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
            :           +- Calc(select=[0 AS $f0])
            :              +- HashJoin(where=[=(ws_web_page_sk, wp_web_page_sk)], join=[ws_web_page_sk, wp_web_page_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :- Calc(select=[ws_web_page_sk])
            :                 :  +- HashJoin(where=[=(ws_sold_time_sk, t_time_sk)], join=[ws_sold_time_sk, ws_web_page_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :- Calc(select=[ws_sold_time_sk, ws_web_page_sk], reuse_id=[1])
            :                 :     :  +- HashJoin(where=[=(ws_ship_hdemo_sk, hd_demo_sk)], join=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
            :                 :     :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk];filterPredicates=[]]]], fields=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk])
            :                 :     :     +- Exchange(distribution=[broadcast])
            :                 :     :        +- Calc(select=[hd_demo_sk], where=[=(hd_dep_count, 0)])
            :                 :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count])
            :                 :     +- Exchange(distribution=[broadcast])
            :                 :        +- Calc(select=[t_time_sk], where=[AND(>=(t_hour, 6), <=(t_hour, 7))])
            :                 :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour];filterPredicates=[]]]], fields=[t_time_sk, t_hour])
            :                 +- Exchange(distribution=[broadcast], reuse_id=[2])
            :                    +- Calc(select=[wp_web_page_sk], where=[AND(>=(wp_char_count, 5000), <=(wp_char_count, 5200))])
            :                       +- TableSourceScan(table=[[builtin, default, web_page, source: [TestParquetTableSource -> selectedFields=[wp_web_page_sk, wp_char_count];filterPredicates=[]]]], fields=[wp_web_page_sk, wp_char_count])
            +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS pmc])
               +- Exchange(distribution=[single])
                  +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
                     +- Calc(select=[0 AS $f0])
                        +- HashJoin(where=[=(ws_web_page_sk, wp_web_page_sk)], join=[ws_web_page_sk, wp_web_page_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :- Calc(select=[ws_web_page_sk])
                           :  +- HashJoin(where=[=(ws_sold_time_sk, t_time_sk)], join=[ws_sold_time_sk, ws_web_page_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                           :     :- Reused(reference_id=[1])
                           :     +- Exchange(distribution=[broadcast])
                           :        +- Calc(select=[t_time_sk], where=[AND(>=(t_hour, 13), <=(t_hour, 14))])
                           :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour];filterPredicates=[]]]], fields=[t_time_sk, t_hour])
                           +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q91, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 91 in stream 0 using template query91.tpl
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1998 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '1001-5000%'
and     ca_gmt_offset           = -6
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc

-- end query 91 in stream 0 using template query91.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$3], dir0=[DESC-nulls-last])
+- LogicalProject(Call_Center=[$0], Call_Center_Name=[$1], Manager=[$2], Returns_Loss=[$5])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], Returns_Loss=[SUM($5)])
      +- LogicalProject(Call_Center=[$1], Call_Center_Name=[$6], Manager=[$11], cd_marital_status=[$119], cd_education_status=[$120], cr_net_loss=[$57])
         +- LogicalFilter(condition=[AND(=($42, $0), =($31, $58), =($38, $86), =($117, $88), =($126, $89), =($104, $90), =($64, 1998), =($66, 11), OR(AND(=($119, 'M'), =($120, 'Unknown')), AND(=($119, 'W'), =($120, 'Advanced Degree'))), LIKE($128, '1001-5000%'), =(CAST($115):DECIMAL(12, 2), -6))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
               :  :  :  :  :  +- LogicalTableScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss];filterPredicates=[]]]])
               :  :  :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
               :  :  :  +- LogicalTableScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date];filterPredicates=[]]]])
               :  :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[Call_Center, Call_Center_Name, Manager, Returns_Loss])
+- SortLimit(orderBy=[Returns_Loss DESC], offset=[0], limit=[200], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[Returns_Loss DESC], offset=[0], limit=[200], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[Call_Center, Call_Center_Name, Manager, cd_marital_status, cd_education_status], select=[Call_Center, Call_Center_Name, Manager, cd_marital_status, cd_education_status, Final_SUM(sum$0) AS Returns_Loss])
            +- Exchange(distribution=[hash[Call_Center, Call_Center_Name, Manager, cd_marital_status, cd_education_status]])
               +- LocalHashAggregate(groupBy=[Call_Center, Call_Center_Name, Manager, cd_marital_status, cd_education_status], select=[Call_Center, Call_Center_Name, Manager, cd_marital_status, cd_education_status, Partial_SUM(cr_net_loss) AS sum$0])
                  +- Calc(select=[cc_call_center_id AS Call_Center, cc_name AS Call_Center_Name, cc_manager AS Manager, cd_marital_status, cd_education_status, cr_net_loss])
                     +- HashJoin(where=[=(cr_call_center_sk, cc_call_center_sk)], join=[cr_call_center_sk, cr_net_loss, cd_marital_status, cd_education_status, cc_call_center_sk, cc_call_center_id, cc_name, cc_manager], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :- Calc(select=[cr_call_center_sk, cr_net_loss, cd_marital_status, cd_education_status])
                        :  +- HashJoin(where=[=(cr_returning_customer_sk, c_customer_sk)], join=[cr_returning_customer_sk, cr_call_center_sk, cr_net_loss, c_customer_sk, cd_marital_status, cd_education_status], joinType=[InnerJoin], build=[right])
                        :     :- Exchange(distribution=[hash[cr_returning_customer_sk]])
                        :     :  +- Calc(select=[cr_returning_customer_sk, cr_call_center_sk, cr_net_loss])
                        :     :     +- HashJoin(where=[=(cr_returned_date_sk, d_date_sk)], join=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :     :        :- TableSourceScan(table=[[builtin, default, catalog_returns, source: [TestParquetTableSource -> selectedFields=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss];filterPredicates=[]]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss])
                        :     :        +- Exchange(distribution=[broadcast])
                        :     :           +- Calc(select=[d_date_sk], where=[AND(=(d_year, 1998), =(d_moy, 11))])
                        :     :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_year, d_moy];filterPredicates=[]]]], fields=[d_date_sk, d_year, d_moy])
                        :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :        +- Calc(select=[c_customer_sk, cd_marital_status, cd_education_status])
                        :           +- HashJoin(where=[=(ca_address_sk, c_current_addr_sk)], join=[c_customer_sk, c_current_addr_sk, cd_marital_status, cd_education_status, ca_address_sk], joinType=[InnerJoin], build=[right])
                        :              :- Calc(select=[c_customer_sk, c_current_addr_sk, cd_marital_status, cd_education_status])
                        :              :  +- HashJoin(where=[=(cd_demo_sk, c_current_cdemo_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, cd_demo_sk, cd_marital_status, cd_education_status], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :              :     :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :              :     :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :              :     :     +- HashJoin(where=[=(hd_demo_sk, c_current_hdemo_sk)], join=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                        :              :     :        :- TableSourceScan(table=[[builtin, default, customer, source: [TestParquetTableSource -> selectedFields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk];filterPredicates=[]]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk])
                        :              :     :        +- Exchange(distribution=[broadcast])
                        :              :     :           +- Calc(select=[hd_demo_sk], where=[LIKE(hd_buy_potential, '1001-5000%')])
                        :              :     :              +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_buy_potential];filterPredicates=[]]]], fields=[hd_demo_sk, hd_buy_potential])
                        :              :     +- Exchange(distribution=[broadcast])
                        :              :        +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[OR(AND(=(cd_marital_status, 'M'), =(cd_education_status, 'Unknown')), AND(=(cd_marital_status, 'W'), =(cd_education_status, 'Advanced Degree')))])
                        :              :           +- TableSourceScan(table=[[builtin, default, customer_demographics, source: [TestParquetTableSource -> selectedFields=[cd_demo_sk, cd_marital_status, cd_education_status];filterPredicates=[]]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                        :              +- Exchange(distribution=[hash[ca_address_sk]])
                        :                 +- Calc(select=[ca_address_sk], where=[=(CAST(ca_gmt_offset), -6)])
                        :                    +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_gmt_offset];filterPredicates=[]]]], fields=[ca_address_sk, ca_gmt_offset])
                        +- Exchange(distribution=[broadcast])
                           +- TableSourceScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_name, cc_manager];filterPredicates=[]]]], fields=[cc_call_center_sk, cc_call_center_id, cc_name, cc_manager])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q92, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 92 in stream 0 using template query92.tpl
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount `
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 1
and i_item_sk = ws_item_sk 
and d_date between '1998-01-02' and 
        (cast('1998-01-02' as date) + INTERVAL '90' day)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-01-02' and
                             (cast('1998-01-02' as date) + INTERVAL '90' day)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100

-- end query 92 in stream 0 using template query92.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], Excess Discount Amount =[SUM($0)])
   +- LogicalProject(ws_ext_discount_amt=[$22])
      +- LogicalFilter(condition=[AND(=($47, 1), =($34, $3), >=($58, CAST('1998-01-02'):DATE NOT NULL), <=($58, +(CAST('1998-01-02'):DATE NOT NULL, 7776000000)), =($56, $0), >($22, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(1.3, $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ws_ext_discount_amt=[$22])
      LogicalFilter(condition=[AND(=($3, $cor0.i_item_sk), >=($36, CAST('1998-01-02'):DATE NOT NULL), <=($36, +(CAST('1998-01-02'):DATE NOT NULL, 7776000000)), =($34, $0))])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
          LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[Excess Discount Amount  ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[Excess Discount Amount  ASC], offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS Excess Discount Amount ])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_SUM(ws_ext_discount_amt) AS sum$0])
               +- Calc(select=[ws_ext_discount_amt])
                  +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_ext_discount_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ws_sold_date_sk, ws_ext_discount_amt])
                     :  +- HashJoin(where=[AND(>(ws_ext_discount_amt, *(1.3, $f1)), =(ws_item_sk, ws_item_sk0))], join=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt, ws_item_sk0, $f1], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[ws_item_sk, $f1])
                     :           +- HashJoin(where=[=(i_item_sk, ws_item_sk)], join=[ws_item_sk, $f1, i_item_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :- HashAggregate(isMerge=[true], groupBy=[ws_item_sk], select=[ws_item_sk, Final_AVG(sum$0, count$1) AS $f1])
                     :              :  +- Exchange(distribution=[hash[ws_item_sk]])
                     :              :     +- LocalHashAggregate(groupBy=[ws_item_sk], select=[ws_item_sk, Partial_AVG(ws_ext_discount_amt) AS (sum$0, count$1)])
                     :              :        +- Calc(select=[ws_item_sk, ws_ext_discount_amt])
                     :              :           +- HashJoin(where=[=(d_date_sk, ws_sold_date_sk)], join=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :              :- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt];filterPredicates=[]]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])
                     :              :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :              :                 +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-04-02))])
                     :              :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                     :              +- Exchange(distribution=[broadcast])
                     :                 +- Calc(select=[i_item_sk], where=[=(i_manufact_id, 1)])
                     :                    +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_manufact_id];filterPredicates=[]]]], fields=[i_item_sk, i_manufact_id])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q93, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 93 in stream 0 using template query93.tpl
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Package was damaged') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100

-- end query 93 in stream 0 using template query93.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], sumsales=[SUM($1)])
   +- LogicalProject(ss_customer_sk=[$2], act_sales=[$3])
      +- LogicalProject(ss_item_sk=[$2], ss_ticket_number=[$9], ss_customer_sk=[$3], act_sales=[CASE(IS NOT NULL($33), *(-($10, $33), $13), *($10, $13))])
         +- LogicalFilter(condition=[AND(=($31, $43), =($45, 'Package was damaged'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[AND(=($25, $2), =($32, $9))], joinType=[left])
               :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_returned_date_sk, sr_return_time_sk, sr_item_sk, sr_customer_sk, sr_cdemo_sk, sr_hdemo_sk, sr_addr_sk, sr_store_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, sr_return_tax, sr_return_amt_inc_tax, sr_fee, sr_return_ship_cost, sr_refunded_cash, sr_reversed_charge, sr_store_credit, sr_net_loss];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk, r_reason_id, r_reason_desc];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk], select=[ss_customer_sk, Final_SUM(sum$0) AS sumsales])
         +- Exchange(distribution=[hash[ss_customer_sk]])
            +- LocalHashAggregate(groupBy=[ss_customer_sk], select=[ss_customer_sk, Partial_SUM(act_sales) AS sum$0])
               +- Calc(select=[ss_customer_sk, CASE(IS NOT NULL(sr_return_quantity), *(-(ss_quantity, sr_return_quantity), ss_sales_price), *(ss_quantity, ss_sales_price)) AS act_sales])
                  +- HashJoin(where=[=(sr_reason_sk, r_reason_sk)], join=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity, r_reason_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity])
                     :  +- HashJoin(where=[AND(=(sr_item_sk, ss_item_sk), =(sr_ticket_number, ss_ticket_number))], join=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price, sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity], joinType=[LeftOuterJoin], build=[right])
                     :     :- Exchange(distribution=[hash[ss_item_sk, ss_ticket_number]])
                     :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price];filterPredicates=[]]]], fields=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price])
                     :     +- Exchange(distribution=[hash[sr_item_sk, sr_ticket_number]])
                     :        +- TableSourceScan(table=[[builtin, default, store_returns, source: [TestParquetTableSource -> selectedFields=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity];filterPredicates=[]]]], fields=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[r_reason_sk], where=[=(r_reason_desc, 'Package was damaged')])
                           +- TableSourceScan(table=[[builtin, default, reason, source: [TestParquetTableSource -> selectedFields=[r_reason_sk, r_reason_desc];filterPredicates=[]]]], fields=[r_reason_sk, r_reason_desc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q94, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 94 in stream 0 using template query94.tpl
select  
   count(distinct ws_order_number) as `order count `
  ,sum(ws_ext_ship_cost) as `total shipping cost `
  ,sum(ws_net_profit) as `total net profit `
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-02-01' and
           (cast('1999-02-01' as date) + INTERVAL '60' day)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TN'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and exists (select *
            from web_sales ws2
            where ws1.ws_order_number = ws2.ws_order_number
              and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
and not exists(select *
               from web_returns wr1
               where ws1.ws_order_number = wr1.wr_order_number)
order by count(distinct ws_order_number)
limit 100

-- end query 94 in stream 0 using template query94.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count =[COUNT(DISTINCT $0)], total shipping cost =[SUM($1)], total net profit =[SUM($2)])
   +- LogicalProject(ws_order_number=[$17], ws_ext_ship_cost=[$28], ws_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST('1999-02-01'):DATE NOT NULL), <=($36, +(CAST('1999-02-01'):DATE NOT NULL, 5184000000)), =($2, $34), =($11, $62), =($70, 'TN'), =($13, $75), =($89, 'pri'), EXISTS({
LogicalFilter(condition=[AND(=($cor0.ws_order_number, $17), <>($cor0.ws_warehouse_sk, $15))])
  LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
}), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.ws_order_number, $13)])
  LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_site_id, web_rec_start_date, web_rec_end_date, web_name, web_open_date_sk, web_close_date_sk, web_class, web_manager, web_mkt_id, web_mkt_class, web_mkt_desc, web_market_manager, web_company_id, web_company_name, web_street_number, web_street_name, web_street_type, web_suite_number, web_city, web_county, web_state, web_zip, web_country, web_gmt_offset, web_tax_percentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[order count  ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count  ASC], offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count , Final_MIN(min$1) AS total shipping cost , Final_MIN(min$2) AS total net profit ])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(ws_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost ) FILTER $g_1 AS min$1, Partial_MIN(total net profit ) FILTER $g_1 AS min$2])
               +- Calc(select=[CAST(ws_order_number) AS ws_order_number, total shipping cost , total net profit , =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Final_SUM(sum$0) AS total shipping cost , Final_SUM(sum$1) AS total net profit ])
                     +- Exchange(distribution=[hash[ws_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Partial_SUM(ws_ext_ship_cost) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                           +- Expand(projects=[{ws_order_number, ws_ext_ship_cost, ws_net_profit, 0 AS $e}, {null AS ws_order_number, ws_ext_ship_cost, ws_net_profit, 1 AS $e}])
                              +- HashSemiJoin(where=[=(ws_order_number, wr_order_number)], join=[ws_order_number, ws_ext_ship_cost, ws_net_profit], joinType=[LeftAntiJoin], build=[left])
                                 :- Calc(select=[ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :  +- HashSemiJoin(where=[AND(=(ws_order_number, ws_order_number0), <>(ws_warehouse_sk, ws_warehouse_sk0))], join=[ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit], joinType=[LeftSemiJoin], build=[left])
                                 :     :- Exchange(distribution=[hash[ws_order_number]])
                                 :     :  +- Calc(select=[ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     :     +- HashJoin(where=[=(ws_ship_date_sk, d_date_sk)], join=[ws_ship_date_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :        :- Calc(select=[ws_ship_date_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     :        :  +- HashJoin(where=[=(ws_web_site_sk, web_site_sk)], join=[ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, web_site_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :     :        :     :- Calc(select=[ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     :        :     :  +- HashJoin(where=[=(ws_ship_addr_sk, ca_address_sk)], join=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, ca_address_sk], joinType=[InnerJoin], build=[right])
                                 :     :        :     :     :- Exchange(distribution=[hash[ws_ship_addr_sk]])
                                 :     :        :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit];filterPredicates=[]]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     :        :     :     +- Exchange(distribution=[hash[ca_address_sk]])
                                 :     :        :     :        +- Calc(select=[ca_address_sk], where=[=(ca_state, 'TN')])
                                 :     :        :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
                                 :     :        :     +- Exchange(distribution=[broadcast])
                                 :     :        :        +- Calc(select=[web_site_sk], where=[=(web_company_name, 'pri')])
                                 :     :        :           +- TableSourceScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_company_name];filterPredicates=[]]]], fields=[web_site_sk, web_company_name])
                                 :     :        +- Exchange(distribution=[broadcast])
                                 :     :           +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1999-02-01), <=(d_date, 1999-04-02))])
                                 :     :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                                 :     +- Exchange(distribution=[hash[ws_order_number]])
                                 :        +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_warehouse_sk, ws_order_number];filterPredicates=[]]]], fields=[ws_warehouse_sk, ws_order_number])
                                 +- Exchange(distribution=[hash[wr_order_number]])
                                    +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_order_number];filterPredicates=[]]]], fields=[wr_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q95, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 95 in stream 0 using template query95.tpl
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count `
  ,sum(ws_ext_ship_cost) as `total shipping cost `
  ,sum(ws_net_profit) as `total net profit `
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-02-01' and
           (cast('1999-02-01' as date) + INTERVAL '60' day)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TN'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100

-- end query 95 in stream 0 using template query95.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count =[COUNT(DISTINCT $0)], total shipping cost =[SUM($1)], total net profit =[SUM($2)])
   +- LogicalProject(ws_order_number=[$17], ws_ext_ship_cost=[$28], ws_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST('1999-02-01'):DATE NOT NULL), <=($36, +(CAST('1999-02-01'):DATE NOT NULL, 5184000000)), =($2, $34), =($11, $62), =($70, 'TN'), =($13, $75), =($89, 'pri'), IN($17, {
LogicalProject(ws_order_number=[$0])
  LogicalProject(ws_order_number=[$17], wh1=[$15], wh2=[$49])
    LogicalFilter(condition=[AND(=($17, $51), <>($15, $49))])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
        LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
}), IN($17, {
LogicalProject(wr_order_number=[$13])
  LogicalFilter(condition=[=($13, $24)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss];filterPredicates=[]]]])
      LogicalProject(ws_order_number=[$17], wh1=[$15], wh2=[$49])
        LogicalFilter(condition=[AND(=($17, $51), <>($15, $49))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
}))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_sold_date_sk, ws_sold_time_sk, ws_ship_date_sk, ws_item_sk, ws_bill_customer_sk, ws_bill_cdemo_sk, ws_bill_hdemo_sk, ws_bill_addr_sk, ws_ship_customer_sk, ws_ship_cdemo_sk, ws_ship_hdemo_sk, ws_ship_addr_sk, ws_web_page_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, ws_promo_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_list_price, ws_sales_price, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, ws_ext_tax, ws_coupon_amt, ws_ext_ship_cost, ws_net_paid, ws_net_paid_inc_tax, ws_net_paid_inc_ship, ws_net_paid_inc_ship_tax, ws_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_site_id, web_rec_start_date, web_rec_end_date, web_name, web_open_date_sk, web_close_date_sk, web_class, web_manager, web_mkt_id, web_mkt_class, web_mkt_desc, web_market_manager, web_company_id, web_company_name, web_street_number, web_street_name, web_street_type, web_suite_number, web_city, web_county, web_state, web_zip, web_country, web_gmt_offset, web_tax_percentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[order count  ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count  ASC], offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count , Final_MIN(min$1) AS total shipping cost , Final_MIN(min$2) AS total net profit ])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(ws_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost ) FILTER $g_1 AS min$1, Partial_MIN(total net profit ) FILTER $g_1 AS min$2])
               +- Calc(select=[CAST(ws_order_number) AS ws_order_number, total shipping cost , total net profit , =(CASE(=($e, 0), 0, 1), 0) AS $g_0, =(CASE(=($e, 0), 0, 1), 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Final_SUM(sum$0) AS total shipping cost , Final_SUM(sum$1) AS total net profit ])
                     +- Exchange(distribution=[hash[ws_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Partial_SUM(ws_ext_ship_cost) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                           +- Expand(projects=[{ws_order_number, ws_ext_ship_cost, ws_net_profit, 0 AS $e}, {null AS ws_order_number, ws_ext_ship_cost, ws_net_profit, 1 AS $e}])
                              +- HashSemiJoin(where=[=(ws_order_number, wr_order_number)], join=[ws_order_number, ws_ext_ship_cost, ws_net_profit], joinType=[LeftSemiJoin], build=[left])
                                 :- HashSemiJoin(where=[=(ws_order_number, ws_order_number0)], join=[ws_order_number, ws_ext_ship_cost, ws_net_profit], joinType=[LeftSemiJoin], build=[left])
                                 :  :- Exchange(distribution=[hash[ws_order_number]])
                                 :  :  +- Calc(select=[ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :  :     +- HashJoin(where=[=(ws_ship_date_sk, d_date_sk)], join=[ws_ship_date_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :  :        :- Calc(select=[ws_ship_date_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :  :        :  +- HashJoin(where=[=(ws_web_site_sk, web_site_sk)], join=[ws_ship_date_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, web_site_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                 :  :        :     :- Calc(select=[ws_ship_date_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :  :        :     :  +- HashJoin(where=[=(ws_ship_addr_sk, ca_address_sk)], join=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, ca_address_sk], joinType=[InnerJoin], build=[right])
                                 :  :        :     :     :- Exchange(distribution=[hash[ws_ship_addr_sk]])
                                 :  :        :     :     :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit];filterPredicates=[]]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :  :        :     :     +- Exchange(distribution=[hash[ca_address_sk]])
                                 :  :        :     :        +- Calc(select=[ca_address_sk], where=[=(ca_state, 'TN')])
                                 :  :        :     :           +- TableSourceScan(table=[[builtin, default, customer_address, source: [TestParquetTableSource -> selectedFields=[ca_address_sk, ca_state];filterPredicates=[]]]], fields=[ca_address_sk, ca_state])
                                 :  :        :     +- Exchange(distribution=[broadcast])
                                 :  :        :        +- Calc(select=[web_site_sk], where=[=(web_company_name, 'pri')])
                                 :  :        :           +- TableSourceScan(table=[[builtin, default, web_site, source: [TestParquetTableSource -> selectedFields=[web_site_sk, web_company_name];filterPredicates=[]]]], fields=[web_site_sk, web_company_name])
                                 :  :        +- Exchange(distribution=[broadcast])
                                 :  :           +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1999-02-01), <=(d_date, 1999-04-02))])
                                 :  :              +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
                                 :  +- Calc(select=[ws_order_number], reuse_id=[1])
                                 :     +- HashJoin(where=[AND(=(ws_order_number, ws_order_number0), <>(ws_warehouse_sk, ws_warehouse_sk0))], join=[ws_warehouse_sk, ws_order_number, ws_warehouse_sk0, ws_order_number0], joinType=[InnerJoin], build=[left])
                                 :        :- Exchange(distribution=[hash[ws_order_number]])
                                 :        :  +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_warehouse_sk, ws_order_number];filterPredicates=[]]]], fields=[ws_warehouse_sk, ws_order_number])
                                 :        +- Exchange(distribution=[hash[ws_order_number]])
                                 :           +- TableSourceScan(table=[[builtin, default, web_sales, source: [TestParquetTableSource -> selectedFields=[ws_warehouse_sk, ws_order_number];filterPredicates=[]]]], fields=[ws_warehouse_sk, ws_order_number])
                                 +- Exchange(distribution=[hash[wr_order_number]], exchange_mode=[BATCH])
                                    +- Calc(select=[wr_order_number])
                                       +- HashJoin(where=[=(wr_order_number, ws_order_number)], join=[ws_order_number, wr_order_number], joinType=[InnerJoin], build=[right])
                                          :- Reused(reference_id=[1])
                                          +- Exchange(distribution=[hash[wr_order_number]])
                                             +- TableSourceScan(table=[[builtin, default, web_returns, source: [TestParquetTableSource -> selectedFields=[wr_order_number];filterPredicates=[]]]], fields=[wr_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q96, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 96 in stream 0 using template query96.tpl
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 20
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 0
    and store.s_store_name = 'ese'
order by count(*)
limit 100

-- end query 96 in stream 0 using template query96.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
   +- LogicalProject($f0=[0])
      +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 20), >=($32, 30), =($26, 0), =($43, 'ese'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_income_band_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC], offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_COUNT(*) AS count$0])
               +- Calc(select=[0 AS $f0])
                  +- HashJoin(where=[=(ss_store_sk, s_store_sk)], join=[ss_store_sk, s_store_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[ss_store_sk])
                     :  +- HashJoin(where=[=(ss_sold_time_sk, t_time_sk)], join=[ss_sold_time_sk, ss_store_sk, t_time_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[ss_sold_time_sk, ss_store_sk])
                     :     :  +- HashJoin(where=[=(ss_hdemo_sk, hd_demo_sk)], join=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, hd_demo_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk];filterPredicates=[]]]], fields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- Calc(select=[hd_demo_sk], where=[=(hd_dep_count, 0)])
                     :     :           +- TableSourceScan(table=[[builtin, default, household_demographics, source: [TestParquetTableSource -> selectedFields=[hd_demo_sk, hd_dep_count];filterPredicates=[]]]], fields=[hd_demo_sk, hd_dep_count])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[t_time_sk], where=[AND(=(t_hour, 20), >=(t_minute, 30))])
                     :           +- TableSourceScan(table=[[builtin, default, time_dim, source: [TestParquetTableSource -> selectedFields=[t_time_sk, t_hour, t_minute];filterPredicates=[]]]], fields=[t_time_sk, t_hour, t_minute])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[s_store_sk], where=[=(s_store_name, 'ese')])
                           +- TableSourceScan(table=[[builtin, default, store, source: [TestParquetTableSource -> selectedFields=[s_store_sk, s_store_name];filterPredicates=[]]]], fields=[s_store_sk, s_store_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q97, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 97 in stream 0 using template query97.tpl
with ssci as (
select ss_customer_sk customer_sk
      ,ss_item_sk item_sk
from store_sales,date_dim
where ss_sold_date_sk = d_date_sk
  and d_month_seq between 1176 and 1176 + 11
group by ss_customer_sk
        ,ss_item_sk),
csci as(
 select cs_bill_customer_sk customer_sk
      ,cs_item_sk item_sk
from catalog_sales,date_dim
where cs_sold_date_sk = d_date_sk
  and d_month_seq between 1176 and 1176 + 11
group by cs_bill_customer_sk
        ,cs_item_sk)
 select  sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only
      ,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only
      ,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog
from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk
                               and ssci.item_sk = csci.item_sk)
limit 100

-- end query 97 in stream 0 using template query97.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], store_only=[SUM($0)], catalog_only=[SUM($1)], store_and_catalog=[SUM($2)])
   +- LogicalProject($f0=[CASE(AND(IS NOT NULL($0), IS NULL($2)), 1, 0)], $f1=[CASE(AND(IS NULL($0), IS NOT NULL($2)), 1, 0)], $f2=[CASE(AND(IS NOT NULL($0), IS NOT NULL($2)), 1, 0)])
      +- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[full])
         :- LogicalAggregate(group=[{0, 1}])
         :  +- LogicalProject(customer_sk=[$3], item_sk=[$2])
         :     +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1176), <=($26, +(1176, 11)))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
         :           +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
         +- LogicalAggregate(group=[{0, 1}])
            +- LogicalProject(customer_sk=[$3], item_sk=[$15])
               +- LogicalFilter(condition=[AND(=($0, $34), >=($37, 1176), <=($37, +(1176, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
                     +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Limit(offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], limit=[100], global=[false])
      +- SortAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS store_only, Final_SUM(sum$1) AS catalog_only, Final_SUM(sum$2) AS store_and_catalog])
         +- Exchange(distribution=[single])
            +- LocalSortAggregate(select=[Partial_SUM($f0) AS sum$0, Partial_SUM($f1) AS sum$1, Partial_SUM($f2) AS sum$2])
               +- Calc(select=[CASE(AND(IS NOT NULL(customer_sk), IS NULL(customer_sk0)), 1, 0) AS $f0, CASE(AND(IS NULL(customer_sk), IS NOT NULL(customer_sk0)), 1, 0) AS $f1, CASE(AND(IS NOT NULL(customer_sk), IS NOT NULL(customer_sk0)), 1, 0) AS $f2])
                  +- HashJoin(where=[AND(=(customer_sk, customer_sk0), =(item_sk, item_sk0))], join=[customer_sk, item_sk, customer_sk0, item_sk0], joinType=[FullOuterJoin], build=[right])
                     :- HashAggregate(isMerge=[true], groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])
                     :  +- Exchange(distribution=[hash[customer_sk, item_sk]])
                     :     +- LocalHashAggregate(groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])
                     :        +- Calc(select=[ss_customer_sk AS customer_sk, ss_item_sk AS item_sk])
                     :           +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :              :- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])
                     :              +- Exchange(distribution=[broadcast], reuse_id=[1])
                     :                 +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                     :                    +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
                     +- HashAggregate(isMerge=[true], groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])
                        +- Exchange(distribution=[hash[customer_sk, item_sk]])
                           +- LocalHashAggregate(groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])
                              +- Calc(select=[cs_bill_customer_sk AS customer_sk, cs_item_sk AS item_sk])
                                 +- HashJoin(where=[=(cs_sold_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
                                    +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q98, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 98 in stream 0 using template query98.tpl
select i_item_id
      ,i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ss_ext_sales_price) as itemrevenue 
      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	store_sales
    	,item 
    	,date_dim
where 
	ss_item_sk = i_item_sk 
  	and i_category in ('Electronics', 'Women', 'Men')
  	and ss_sold_date_sk = d_date_sk
	and d_date between cast('1998-01-02' as date) 
				and (cast('1998-01-02' as date) + INTERVAL '30' day)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio

-- end query 98 in stream 0 using template query98.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$3], sort2=[$0], sort3=[$1], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first])
+- LogicalProject(i_item_id=[$0], i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0), CAST($SUM0($5) OVER (PARTITION BY $3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)):DECIMAL(38, 2), null))])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
      +- LogicalProject(i_item_id=[$24], i_item_desc=[$27], i_category=[$35], i_class=[$33], i_current_price=[$28], ss_ext_sales_price=[$15])
         +- LogicalFilter(condition=[AND(=($2, $23), OR(=($35, 'Electronics'), =($35, 'Women'), =($35, 'Men')), =($0, $45), >=($47, CAST('1998-01-02'):DATE NOT NULL), <=($47, +(CAST('1998-01-02'):DATE NOT NULL, 2592000000)))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit];filterPredicates=[]]]])
               :  +- LogicalTableScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name];filterPredicates=[]]]])
               +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[200], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], limit=[200], global=[false])
      +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, /($6, CASE(>(w0$o0, 0), CAST(w0$o1), null)) AS revenueratio])
         +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
            +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, *(itemrevenue, 100) AS $6])
               +- Sort(orderBy=[i_class ASC])
                  +- Exchange(distribution=[hash[i_class]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Final_SUM(sum$0) AS itemrevenue])
                        +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_category, i_class, i_current_price]])
                           +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_category, i_class, i_current_price], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, Partial_SUM(ss_ext_sales_price) AS sum$0])
                              +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, ss_ext_sales_price])
                                 +- HashJoin(where=[=(ss_sold_date_sk, d_date_sk)], join=[ss_sold_date_sk, ss_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    :  +- HashJoin(where=[=(ss_item_sk, i_item_sk)], join=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], joinType=[InnerJoin], build=[right])
                                    :     :- Exchange(distribution=[hash[ss_item_sk]])
                                    :     :  +- TableSourceScan(table=[[builtin, default, store_sales, source: [TestParquetTableSource -> selectedFields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price];filterPredicates=[]]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
                                    :     +- Exchange(distribution=[hash[i_item_sk]])
                                    :        +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[OR(=(i_category, 'Electronics'), =(i_category, 'Women'), =(i_category, 'Men'))])
                                    :           +- TableSourceScan(table=[[builtin, default, item, source: [TestParquetTableSource -> selectedFields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category];filterPredicates=[]]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[d_date_sk], where=[AND(>=(d_date, 1998-01-02), <=(d_date, 1998-02-01))])
                                          +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date];filterPredicates=[]]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="test[caseName=q99, joinReorder=true]">
    <Resource name="sql">
      <![CDATA[-- start query 99 in stream 0 using template query99.tpl
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days `
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days `
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days `
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days `
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days `
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1176 and 1176 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100

-- end query 99 in stream 0 using template query99.tpl
]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], 30 days =[SUM($3)], 31-60 days =[SUM($4)], 61-90 days =[SUM($5)], 91-120 days =[SUM($6)], >120 days =[SUM($7)])
   +- LogicalProject(EXPR$0=[SUBSTR($36, 1, 20)], sm_type=[$50], cc_name=[$60], $f3=[CASE(<=(-($2, $0), 30), 1, 0)], $f4=[CASE(AND(>(-($2, $0), 30), <=(-($2, $0), 60)), 1, 0)], $f5=[CASE(AND(>(-($2, $0), 60), <=(-($2, $0), 90)), 1, 0)], $f6=[CASE(AND(>(-($2, $0), 90), <=(-($2, $0), 120)), 1, 0)], $f7=[CASE(>(-($2, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(>=($88, 1176), <=($88, +(1176, 11)), =($2, $85), =($14, $34), =($13, $48), =($11, $54))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit];filterPredicates=[]]]])
            :  :  :  +- LogicalTableScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, w_street_number, w_street_name, w_street_type, w_suite_number, w_city, w_county, w_state, w_zip, w_country, w_gmt_offset];filterPredicates=[]]]])
            :  :  +- LogicalTableScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_ship_mode_id, sm_type, sm_code, sm_carrier, sm_contract];filterPredicates=[]]]])
            :  +- LogicalTableScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage];filterPredicates=[]]]])
            +- LogicalTableScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year];filterPredicates=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, cc_name ASC], offset=[0], limit=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, cc_name ASC], offset=[0], limit=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[EXPR$0, sm_type, cc_name], select=[EXPR$0, sm_type, cc_name, Final_SUM(sum$0) AS 30 days , Final_SUM(sum$1) AS 31-60 days , Final_SUM(sum$2) AS 61-90 days , Final_SUM(sum$3) AS 91-120 days , Final_SUM(sum$4) AS >120 days ])
         +- Exchange(distribution=[hash[EXPR$0, sm_type, cc_name]])
            +- LocalHashAggregate(groupBy=[EXPR$0, sm_type, cc_name], select=[EXPR$0, sm_type, cc_name, Partial_SUM($f3) AS sum$0, Partial_SUM($f4) AS sum$1, Partial_SUM($f5) AS sum$2, Partial_SUM($f6) AS sum$3, Partial_SUM($f7) AS sum$4])
               +- Calc(select=[SUBSTR(w_warehouse_name, 1, 20) AS EXPR$0, sm_type, cc_name, CASE(<=(-(cs_ship_date_sk, cs_sold_date_sk), 30), 1, 0) AS $f3, CASE(AND(>(-(cs_ship_date_sk, cs_sold_date_sk), 30), <=(-(cs_ship_date_sk, cs_sold_date_sk), 60)), 1, 0) AS $f4, CASE(AND(>(-(cs_ship_date_sk, cs_sold_date_sk), 60), <=(-(cs_ship_date_sk, cs_sold_date_sk), 90)), 1, 0) AS $f5, CASE(AND(>(-(cs_ship_date_sk, cs_sold_date_sk), 90), <=(-(cs_ship_date_sk, cs_sold_date_sk), 120)), 1, 0) AS $f6, CASE(>(-(cs_ship_date_sk, cs_sold_date_sk), 120), 1, 0) AS $f7])
                  +- HashJoin(where=[=(cs_call_center_sk, cc_call_center_sk)], join=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, sm_type, w_warehouse_name, cc_call_center_sk, cc_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, sm_type, w_warehouse_name])
                     :  +- HashJoin(where=[=(cs_ship_date_sk, d_date_sk)], join=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, sm_type, w_warehouse_name, d_date_sk], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, sm_type, w_warehouse_name])
                     :     :  +- HashJoin(where=[=(cs_warehouse_sk, w_warehouse_sk)], join=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, sm_type, w_warehouse_sk, w_warehouse_name], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, sm_type])
                     :     :     :  +- HashJoin(where=[=(cs_ship_mode_sk, sm_ship_mode_sk)], join=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk, sm_ship_mode_sk, sm_type], joinType=[InnerJoin], isBroadcast=[true], build=[right])
                     :     :     :     :- TableSourceScan(table=[[builtin, default, catalog_sales, source: [TestParquetTableSource -> selectedFields=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk];filterPredicates=[]]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk])
                     :     :     :     +- Exchange(distribution=[broadcast])
                     :     :     :        +- TableSourceScan(table=[[builtin, default, ship_mode, source: [TestParquetTableSource -> selectedFields=[sm_ship_mode_sk, sm_type];filterPredicates=[]]]], fields=[sm_ship_mode_sk, sm_type])
                     :     :     +- Exchange(distribution=[broadcast])
                     :     :        +- TableSourceScan(table=[[builtin, default, warehouse, source: [TestParquetTableSource -> selectedFields=[w_warehouse_sk, w_warehouse_name];filterPredicates=[]]]], fields=[w_warehouse_sk, w_warehouse_name])
                     :     +- Exchange(distribution=[broadcast])
                     :        +- Calc(select=[d_date_sk], where=[AND(>=(d_month_seq, 1176), <=(d_month_seq, 1187))])
                     :           +- TableSourceScan(table=[[builtin, default, date_dim, source: [TestParquetTableSource -> selectedFields=[d_date_sk, d_month_seq];filterPredicates=[]]]], fields=[d_date_sk, d_month_seq])
                     +- Exchange(distribution=[broadcast])
                        +- TableSourceScan(table=[[builtin, default, call_center, source: [TestParquetTableSource -> selectedFields=[cc_call_center_sk, cc_name];filterPredicates=[]]]], fields=[cc_call_center_sk, cc_name])
]]>
    </Resource>
  </TestCase>
</Root>
