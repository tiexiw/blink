/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.flink.table.tpc

import java.sql.Date

import org.apache.flink.table.plan.stats.{ColumnStats, TableStats}
import org.apache.flink.table.tpc.STATS_MODE.STATS_MODE

import scala.collection.JavaConversions._

object TpcDsTableStatsProvider {

  // factor 1000
  val CATALOG_SALES_1000 = TableStats(1440010580L, Map[String, ColumnStats](
    "cs_ship_mode_sk" -> ColumnStats(20L, 7198462L, 8.0D, 8, 20L, 1L),
    "cs_bill_customer_sk" -> ColumnStats(12013654L, 7199432L, 8.0D, 8, 12000000L, 1L),
    "cs_sales_price" -> ColumnStats(29657L, 7200861L, 12.0D, 12, 300.00, 0.00),
    "cs_net_profit" -> ColumnStats(2057841L, 0L, 12.0D, 12, 19962.00, -10000.00),
    "cs_ext_tax" -> ColumnStats(218796L, 7201338L, 12.0D, 12, 2682.90, 0.00),
    "cs_wholesale_cost" -> ColumnStats(9872L, 7201157L, 12.0D, 12, 100.00, 1.00),
    "cs_ext_wholesale_cost" -> ColumnStats(391162L, 7201630L, 12.0D, 12, 10000.00, 1.00),
    "cs_ship_hdemo_sk" -> ColumnStats(7207L, 7201198L, 8.0D, 8, 7200L, 1L),
    "cs_bill_addr_sk" -> ColumnStats(5951214L, 7201898L, 8.0D, 8, 6000000L, 1L),
    "cs_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "cs_net_paid_inc_ship_tax" -> ColumnStats(3354259L, 0L, 12.0D, 12, 46004.19, 0.00),
    "cs_ship_customer_sk" -> ColumnStats(12013654L, 7201767L, 8.0D, 8, 12000000L, 1L),
    "cs_ext_discount_amt" -> ColumnStats(1111387L, 7199072L, 12.0D, 12, 29847.00, 0.00),
    "cs_sold_date_sk" -> ColumnStats(1840L, 7201103L, 8.0D, 8, 2452654L, 2450815L),
    "cs_order_number" -> ColumnStats(161207707L, 0L, 8.0D, 8, 160000000L, 1L),
    "cs_quantity" -> ColumnStats(100L, 7198957L, 8.0D, 8, 100L, 1L),
    "cs_bill_cdemo_sk" -> ColumnStats(1913326L, 7200698L, 8.0D, 8, 1920800L, 1L),
    "cs_call_center_sk" -> ColumnStats(42L, 7205300L, 8.0D, 8, 42L, 1L),
    "cs_net_paid_inc_tax" -> ColumnStats(2444596L, 7200995L, 12.0D, 12, 32492.90, 0.00),
    "cs_catalog_page_sk" -> ColumnStats(16986L, 7202226L, 8.0D, 8, 25207L, 1L),
    "cs_ship_cdemo_sk" -> ColumnStats(1913326L, 7202577L, 8.0D, 8, 1920800L, 1L),
    "cs_warehouse_sk" -> ColumnStats(20L, 7200775L, 8.0D, 8, 20L, 1L),
    "cs_net_paid" -> ColumnStats(1815149L, 7204113L, 12.0D, 12, 29943.00, 0.00),
    "cs_ext_list_price" -> ColumnStats(1173301L, 7202423L, 12.0D, 12, 30000.00, 1.00),
    "cs_list_price" -> ColumnStats(29854L, 7200471L, 12.0D, 12, 300.00, 1.00),
    "cs_promo_sk" -> ColumnStats(1507L, 7200034L, 8.0D, 8, 1500L, 1L),
    "cs_ship_addr_sk" -> ColumnStats(5951214L, 7202563L, 8.0D, 8, 6000000L, 1L),
    "cs_net_paid_inc_ship" -> ColumnStats(2553060L, 0L, 12.0D, 12, 44263.00, 0.00),
    "cs_ext_sales_price" -> ColumnStats(1110185L, 7201805L, 12.0D, 12, 29943.00, 0.00),
    "cs_ship_date_sk" -> ColumnStats(1932L, 7200643L, 8.0D, 8, 2452744L, 2450817L),
    "cs_ext_ship_cost" -> ColumnStats(570865L, 7199232L, 12.0D, 12, 14950.00, 0.00),
    "cs_coupon_amt" -> ColumnStats(1589524L, 7200888L, 12.0D, 12, 28824.00, 0.00),
    "cs_bill_hdemo_sk" -> ColumnStats(7207L, 7202052L, 8.0D, 8, 7200L, 1L),
    "cs_sold_time_sk" -> ColumnStats(86180L, 7202876L, 8.0D, 8, 86399L, 0L)))

  val CATALOG_RETURNS_1000 = TableStats(144013861L, Map[String, ColumnStats](
    "cr_order_number" -> ColumnStats(94628158L, 0L, 8.0D, 8, 160000000L, 1L),
    "cr_return_amount" -> ColumnStats(896089L, 2877640L, 12.0D, 12, 29333.00, 0.00),
    "cr_refunded_addr_sk" -> ColumnStats(5951214L, 2881139L, 8.0D, 8, 6000000L, 1L),
    "cr_net_loss" -> ColumnStats(909670L, 2878303L, 12.0D, 12, 16454.93, 0.50),
    "cr_return_amt_inc_tax" -> ColumnStats(1555382L, 2877626L, 12.0D, 12, 31092.98, 0.00),
    "cr_catalog_page_sk" -> ColumnStats(16986L, 2880087L, 8.0D, 8, 25207L, 1L),
    "cr_returning_customer_sk" -> ColumnStats(12013654L, 2878862L, 8.0D, 8, 12000000L, 1L),
    "cr_store_credit" -> ColumnStats(791340L, 2880261L, 12.0D, 12, 26346.57, 0.00),
    "cr_returning_addr_sk" -> ColumnStats(5951214L, 2880996L, 8.0D, 8, 6000000L, 1L),
    "cr_returning_hdemo_sk" -> ColumnStats(7207L, 2878097L, 8.0D, 8, 7200L, 1L),
    "cr_fee" -> ColumnStats(9919L, 2879530L, 12.0D, 12, 100.00, 0.50),
    "cr_refunded_cash" -> ColumnStats(1096355L, 2880585L, 12.0D, 12, 27836.90, 0.00),
    "cr_return_ship_cost" -> ColumnStats(481242L, 2880601L, 12.0D, 12, 14624.54, 0.00),
    "cr_returned_time_sk" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "cr_return_tax" -> ColumnStats(152553L, 2878862L, 12.0D, 12, 2501.17, 0.00),
    "cr_refunded_customer_sk" -> ColumnStats(12010675L, 2877883L, 8.0D, 8, 12000000L, 1L),
    "cr_ship_mode_sk" -> ColumnStats(20L, 2880534L, 8.0D, 8, 20L, 1L),
    "cr_refunded_cdemo_sk" -> ColumnStats(1913326L, 2880035L, 8.0D, 8, 1920800L, 1L),
    "cr_returned_date_sk" -> ColumnStats(2110L, 0L, 8.0D, 8, 2452924L, 2450821L),
    "cr_reversed_charge" -> ColumnStats(803551L, 2878000L, 12.0D, 12, 24322.65, 0.00),
    "cr_call_center_sk" -> ColumnStats(42L, 2878525L, 8.0D, 8, 42L, 1L),
    "cr_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "cr_refunded_hdemo_sk" -> ColumnStats(7207L, 2880203L, 8.0D, 8, 7200L, 1L),
    "cr_warehouse_sk" -> ColumnStats(20L, 2878413L, 8.0D, 8, 20L, 1L),
    "cr_returning_cdemo_sk" -> ColumnStats(1913326L, 2879966L, 8.0D, 8, 1920800L, 1L),
    "cr_return_quantity" -> ColumnStats(100L, 2879549L, 8.0D, 8, 100L, 1L),
    "cr_reason_sk" -> ColumnStats(65L, 2879509L, 8.0D, 8, 65L, 1L)))

  val INVENTORY_1000 = TableStats(783000000L, Map[String, ColumnStats](
    "inv_date_sk" -> ColumnStats(261L, 0L, 8.0D, 8, 2452635L, 2450815L),
    "inv_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "inv_warehouse_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "inv_quantity_on_hand" -> ColumnStats(1003L, 39142523L, 4.0D, 4, 1000, 0)))

  val STORE_SALES_1000 = TableStats(2879974942L, Map[String, ColumnStats](
    "ss_quantity" -> ColumnStats(100L, 129580311L, 8.0D, 8, 100L, 1L),
    "ss_wholesale_cost" -> ColumnStats(9872L, 129587212L, 12.0D, 12, 100.00, 1.00),
    "ss_net_paid" -> ColumnStats(1289694L, 129592045L, 12.0D, 12, 19972.00, 0.00),
    "ss_net_profit" -> ColumnStats(1518099L, 129573695L, 12.0D, 12, 9986.00, -10000.00),
    "ss_net_paid_inc_tax" -> ColumnStats(1690027L, 129601723L, 12.0D, 12, 21769.48, 0.00),
    "ss_sales_price" -> ColumnStats(19720L, 129585865L, 12.0D, 12, 200.00, 0.00),
    "ss_ticket_number" -> ColumnStats(238013713L, 0L, 8.0D, 8, 240000000L, 1L),
    "ss_ext_wholesale_cost" -> ColumnStats(391162L, 129586255L, 12.0D, 12, 10000.00, 1.00),
    "ss_cdemo_sk" -> ColumnStats(1913326L, 129603638L, 8.0D, 8, 1920800L, 1L),
    "ss_promo_sk" -> ColumnStats(1507L, 129594428L, 8.0D, 8, 1500L, 1L),
    "ss_sold_date_sk" -> ColumnStats(1826L, 129591439L, 8.0D, 8, 2452642L, 2450816L),
    "ss_ext_sales_price" -> ColumnStats(757692L, 129582258L, 12.0D, 12, 19972.00, 0.00),
    "ss_sold_time_sk" -> ColumnStats(46629L, 129584815L, 8.0D, 8, 75599L, 28800L),
    "ss_customer_sk" -> ColumnStats(12013654L, 129591740L, 8.0D, 8, 12000000L, 1L),
    "ss_list_price" -> ColumnStats(19607L, 129598092L, 12.0D, 12, 200.00, 1.00),
    "ss_store_sk" -> ColumnStats(500L, 129561778L, 8.0D, 8, 1000L, 1L),
    "ss_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "ss_addr_sk" -> ColumnStats(5951214L, 129591723L, 8.0D, 8, 6000000L, 1L),
    "ss_ext_discount_amt" -> ColumnStats(1162633L, 129604945L, 12.0D, 12, 19778.00, 0.00),
    "ss_coupon_amt" -> ColumnStats(1162633L, 129604945L, 12.0D, 12, 19778.00, 0.00),
    "ss_ext_tax" -> ColumnStats(152109L, 129579492L, 12.0D, 12, 1797.48, 0.00),
    "ss_hdemo_sk" -> ColumnStats(7207L, 129591334L, 8.0D, 8, 7200L, 1L),
    "ss_ext_list_price" -> ColumnStats(777225L, 129587683L, 12.0D, 12, 20000.00, 1.00)))

  val STORE_RETURNS_1000 = TableStats(288009797L, Map[String, ColumnStats](
    "sr_return_time_sk" -> ColumnStats(32528L, 10075464L, 8.0D, 8, 61199L, 28799L),
    "sr_return_ship_cost" -> ColumnStats(352291L, 10078599L, 12.0D, 12, 9875.25, 0.00),
    "sr_cdemo_sk" -> ColumnStats(1913326L, 10075177L, 8.0D, 8, 1920800L, 1L),
    "sr_store_credit" -> ColumnStats(689666L, 10075019L, 12.0D, 12, 17100.11, 0.00),
    "sr_return_amt_inc_tax" -> ColumnStats(1262193L, 10076218L, 12.0D, 12, 20794.06, 0.00),
    "sr_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "sr_return_quantity" -> ColumnStats(100L, 10075593L, 8.0D, 8, 100L, 1L),
    "sr_net_loss" -> ColumnStats(709788L, 10072631L, 12.0D, 12, 11268.50, 0.50),
    "sr_ticket_number" -> ColumnStats(169277953L, 0L, 8.0D, 8, 240000000L, 1L),
    "sr_refunded_cash" -> ColumnStats(930304L, 10078554L, 12.0D, 12, 18599.42, 0.00),
    "sr_hdemo_sk" -> ColumnStats(7207L, 10074852L, 8.0D, 8, 7200L, 1L),
    "sr_fee" -> ColumnStats(9919L, 10072250L, 12.0D, 12, 100.00, 0.50),
    "sr_addr_sk" -> ColumnStats(5951214L, 10075236L, 8.0D, 8, 6000000L, 1L),
    "sr_returned_date_sk" -> ColumnStats(2007L, 10076075L, 8.0D, 8, 2452822L, 2450820L),
    "sr_store_sk" -> ColumnStats(500L, 10076624L, 8.0D, 8, 1000L, 1L),
    "sr_return_tax" -> ColumnStats(117529L, 10072203L, 12.0D, 12, 1716.94, 0.00),
    "sr_customer_sk" -> ColumnStats(12013654L, 10074663L, 8.0D, 8, 12000000L, 1L),
    "sr_reason_sk" -> ColumnStats(65L, 10071509L, 8.0D, 8, 65L, 1L),
    "sr_reversed_charge" -> ColumnStats(695639L, 10079006L, 12.0D, 12, 17801.28, 0.00),
    "sr_return_amt" -> ColumnStats(674903L, 10080448L, 12.0D, 12, 19687.00, 0.00)))

  val WEB_SALES_1000 = TableStats(720032753L, Map[String, ColumnStats](
    "ws_ship_mode_sk" -> ColumnStats(20L, 180039L, 8.0D, 8, 20L, 1L),
    "ws_net_paid_inc_ship" -> ColumnStats(2462495L, 0L, 12.0D, 12, 43956.00, 0.00),
    "ws_coupon_amt" -> ColumnStats(1512736L, 179782L, 12.0D, 12, 28730.00, 0.00),
    "ws_ext_discount_amt" -> ColumnStats(1102320L, 180032L, 12.0D, 12, 29982.00, 0.00),
    "ws_order_number" -> ColumnStats(60474089L, 0L, 8.0D, 8, 60000000L, 1L),
    "ws_ext_list_price" -> ColumnStats(1173051L, 180016L, 12.0D, 12, 30000.00, 1.00),
    "ws_bill_customer_sk" -> ColumnStats(11930954L, 179976L, 8.0D, 8, 12000000L, 1L),
    "ws_promo_sk" -> ColumnStats(1507L, 179911L, 8.0D, 8, 1500L, 1L),
    "ws_net_profit" -> ColumnStats(2007875L, 0L, 12.0D, 12, 19962.00, -10000.00),
    "ws_net_paid" -> ColumnStats(1760238L, 179732L, 12.0D, 12, 29943.00, 0.00),
    "ws_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "ws_net_paid_inc_ship_tax" -> ColumnStats(3252646L, 0L, 12.0D, 12, 46593.36, 0.00),
    "ws_web_page_sk" -> ColumnStats(2992L, 179700L, 8.0D, 8, 3000L, 1L),
    "ws_warehouse_sk" -> ColumnStats(20L, 179503L, 8.0D, 8, 20L, 1L),
    "ws_ship_cdemo_sk" -> ColumnStats(1913326L, 179363L, 8.0D, 8, 1920800L, 1L),
    "ws_sold_date_sk" -> ColumnStats(1826L, 179667L, 8.0D, 8, 2452642L, 2450816L),
    "ws_list_price" -> ColumnStats(29854L, 179510L, 12.0D, 12, 300.00, 1.00),
    "ws_sold_time_sk" -> ColumnStats(86180L, 179880L, 8.0D, 8, 86399L, 0L),
    "ws_ext_ship_cost" -> ColumnStats(566350L, 179869L, 12.0D, 12, 14994.00, 0.00),
    "ws_quantity" -> ColumnStats(100L, 179639L, 8.0D, 8, 100L, 1L),
    "ws_ship_hdemo_sk" -> ColumnStats(7207L, 180108L, 8.0D, 8, 7200L, 1L),
    "ws_ext_tax" -> ColumnStats(214454L, 179804L, 12.0D, 12, 2673.27, 0.00),
    "ws_sales_price" -> ColumnStats(29651L, 179117L, 12.0D, 12, 300.00, 0.00),
    "ws_ext_wholesale_cost" -> ColumnStats(391162L, 179604L, 12.0D, 12, 10000.00, 1.00),
    "ws_bill_cdemo_sk" -> ColumnStats(1913326L, 180179L, 8.0D, 8, 1920800L, 1L),
    "ws_net_paid_inc_tax" -> ColumnStats(2380198L, 179967L, 12.0D, 12, 32376.27, 0.00),
    "ws_ship_addr_sk" -> ColumnStats(5949606L, 179531L, 8.0D, 8, 6000000L, 1L),
    "ws_bill_addr_sk" -> ColumnStats(5950544L, 179879L, 8.0D, 8, 6000000L, 1L),
    "ws_ship_date_sk" -> ColumnStats(1952L, 180102L, 8.0D, 8, 2452762L, 2450817L),
    "ws_bill_hdemo_sk" -> ColumnStats(7207L, 179392L, 8.0D, 8, 7200L, 1L),
    "ws_ship_customer_sk" -> ColumnStats(11937491L, 179908L, 8.0D, 8, 12000000L, 1L),
    "ws_ext_sales_price" -> ColumnStats(1100689L, 179659L, 12.0D, 12, 29943.00, 0.00),
    "ws_wholesale_cost" -> ColumnStats(9872L, 179594L, 12.0D, 12, 100.00, 1.00),
    "ws_web_site_sk" -> ColumnStats(54L, 179844L, 8.0D, 8, 54L, 1L)))

  val WEB_RETURNS_1000 = TableStats(72002527L, Map[String, ColumnStats](
    "wr_reason_sk" -> ColumnStats(65L, 3241180L, 8.0D, 8, 65L, 1L),
    "wr_fee" -> ColumnStats(9919L, 3242396L, 12.0D, 12, 100.00, 0.50),
    "wr_return_amt" -> ColumnStats(823553L, 3239785L, 12.0D, 12, 29211.84, 0.00),
    "wr_returning_addr_sk" -> ColumnStats(5951214L, 3238692L, 8.0D, 8, 6000000L, 1L),
    "wr_returned_time_sk" -> ColumnStats(86180L, 3237769L, 8.0D, 8, 86399L, 0L),
    "wr_returning_cdemo_sk" -> ColumnStats(1913326L, 3238379L, 8.0D, 8, 1920800L, 1L),
    "wr_web_page_sk" -> ColumnStats(2992L, 3238315L, 8.0D, 8, 3000L, 1L),
    "wr_return_tax" -> ColumnStats(138622L, 3238528L, 12.0D, 12, 2445.27, 0.00),
    "wr_refunded_customer_sk" -> ColumnStats(11979083L, 3241938L, 8.0D, 8, 12000000L, 1L),
    "wr_return_ship_cost" -> ColumnStats(450426L, 3241636L, 12.0D, 12, 14190.40, 0.00),
    "wr_refunded_hdemo_sk" -> ColumnStats(7207L, 3239732L, 8.0D, 8, 7200L, 1L),
    "wr_account_credit" -> ColumnStats(679089L, 3240913L, 12.0D, 12, 24291.90, 0.00),
    "wr_returned_date_sk" -> ColumnStats(2193L, 3240362L, 8.0D, 8, 2453002L, 2450819L),
    "wr_reversed_charge" -> ColumnStats(680360L, 3240362L, 12.0D, 12, 23934.91, 0.00),
    "wr_order_number" -> ColumnStats(42601411L, 0L, 8.0D, 8, 60000000L, 1L),
    "wr_returning_customer_sk" -> ColumnStats(11973703L, 3241698L, 8.0D, 8, 12000000L, 1L),
    "wr_return_amt_inc_tax" -> ColumnStats(1372457L, 3238041L, 12.0D, 12, 29720.08, 0.00),
    "wr_returning_hdemo_sk" -> ColumnStats(7207L, 3238960L, 8.0D, 8, 7200L, 1L),
    "wr_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "wr_return_quantity" -> ColumnStats(100L, 3240056L, 8.0D, 8, 100L, 1L),
    "wr_refunded_cash" -> ColumnStats(958703L, 3238587L, 12.0D, 12, 26637.72, 0.00),
    "wr_refunded_addr_sk" -> ColumnStats(5951214L, 3240760L, 8.0D, 8, 6000000L, 1L),
    "wr_refunded_cdemo_sk" -> ColumnStats(1913326L, 3240758L, 8.0D, 8, 1920800L, 1L),
    "wr_net_loss" -> ColumnStats(806753L, 3239596L, 12.0D, 12, 15871.01, 0.50)))

  val CALL_CENTER_1000 = TableStats(42L, Map[String, ColumnStats](
    "cc_street_number" -> ColumnStats(22L, 0L, 2.880952380952381D, 3, "960", ""),
    "cc_call_center_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPBAAAAAA", "AAAAAAAAABAAAAAA"),
    "cc_state" -> ColumnStats(15L, 0L, 1.9523809523809523D, 2, "WV", ""),
    "cc_tax_percentage" -> ColumnStats(11L, 0L, 12.0D, 12, 0.11, 0.00),
    "cc_division_name" -> ColumnStats(7L, 0L, 3.7142857142857144D, 5, "pri", ""),
    "cc_hours" -> ColumnStats(3L, 0L, 7.238095238095238D, 8, "8AM-8AM", "8AM-12AM"),
    "cc_manager" -> ColumnStats(30L, 0L, 13.357142857142858D, 17, "Willie Miller",
      "Anthony Cervantes"),
    "cc_name" -> ColumnStats(22L, 0L, 13.285714285714286D, 19, "Pacific Northwest_2", ""),
    "cc_employees" -> ColumnStats(32L, 1L, 8.0D, 8, 6480758L, 106555L),
    "cc_mkt_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "cc_class" -> ColumnStats(3L, 0L, 5.261904761904762D, 6, "small", "large"),
    "cc_division" -> ColumnStats(6L, 1L, 8.0D, 8, 6L, 1L),
    "cc_street_name" -> ColumnStats(21L, 0L, 8.404761904761905D, 15, "View ", ""),
    "cc_rec_end_date" -> ColumnStats(3L, 21L, 12.0D, 12, Date.valueOf("2001-12-30"),
      Date.valueOf("1999-12-31")),
    "cc_gmt_offset" -> ColumnStats(3L, 1L, 12.0D, 12, -5.00, -8.00),
    "cc_market_manager" -> ColumnStats(30L, 0L, 11.904761904761905D, 15, "Steven Santiago", ""),
    "cc_open_date_sk" -> ColumnStats(19L, 0L, 8.0D, 8, 2451136L, 2450820L),
    "cc_country" -> ColumnStats(2L, 0L, 12.69047619047619D, 13, "United States", ""),
    "cc_closed_date_sk" -> ColumnStats(0L, 42L, 8.0D, 8, null, null),
    "cc_company_name" -> ColumnStats(6L, 0L, 4.071428571428571D, 5, "pri", "able"),
    "cc_city" -> ColumnStats(15L, 0L, 8.571428571428571D, 15, "Union", ""),
    "cc_company" -> ColumnStats(6L, 1L, 8.0D, 8, 6L, 1L),
    "cc_county" -> ColumnStats(9L, 0L, 13.238095238095237D, 17, "Ziebach County", ""),
    "cc_rec_start_date" -> ColumnStats(4L, 1L, 12.0D, 12, Date.valueOf("2001-12-31"),
      Date.valueOf("1997-12-31")),
    "cc_street_type" -> ColumnStats(15L, 0L, 3.738095238095238D, 7, "Wy", ""),
    "cc_sq_ft" -> ColumnStats(35L, 0L, 8.0D, 8, 2029747680L, -1909363305L),
    "cc_mkt_class" -> ColumnStats(31L, 0L, 33.642857142857146D, 50,
      "Yellow, large patients shall get even fiscal ", ""),
    "cc_zip" -> ColumnStats(21L, 0L, 4.880952380952381D, 5, "98721", ""),
    "cc_mkt_desc" -> ColumnStats(28L, 0L, 60.523809523809526D, 95,
      "Young, anxious relations cast wide, nuclear honours." +
          " Following services may not support also by", "Addresses should find for exam"),
    "cc_suite_number" -> ColumnStats(14L, 0L, 7.595238095238095D, 9, "Suite Y", ""),
    "cc_call_center_sk" -> ColumnStats(42L, 0L, 8.0D, 8, 42L, 1L)))

  val CATALOG_PAGE_1000 = TableStats(30000L, Map[String, ColumnStats](
    "cp_department" -> ColumnStats(2L, 0L, 9.894333333333334D, 10, "DEPARTMENT", ""),
    "cp_catalog_page_number" -> ColumnStats(277L, 303L, 8.0D, 8, 277L, 1L),
    "cp_catalog_page_sk" -> ColumnStats(30053L, 0L, 8.0D, 8, 30000L, 1L),
    "cp_end_date_sk" -> ColumnStats(96L, 295L, 8.0D, 8, 2453186L, 2450844L),
    "cp_catalog_page_id" -> ColumnStats(16L, 0L, 16.0D, 16, "AAAAAAAAPPPGAAAA", "AAAAAAAAAAABAAAA"),
    "cp_description" -> ColumnStats(29786L, 0L, 73.80533333333334D, 99,
      "Youngsters would pick only wonderfully concerned knees; silent powers used to say. O", ""),
    "cp_type" -> ColumnStats(4L, 0L, 7.5888333333333335D, 9, "quarterly", ""),
    "cp_start_date_sk" -> ColumnStats(91L, 320L, 8.0D, 8, 2453005L, 2450815L),
    "cp_catalog_number" -> ColumnStats(109L, 316L, 8.0D, 8, 109L, 1L)))

  val CUSTOMER_1000 = TableStats(12000000L, Map[String, ColumnStats](
    "c_email_address" -> ColumnStats(3624156L, 0L, 26.504826833333333D, 48,
      "Zulma.Worsham@9M.com", ""),
    "c_birth_month" -> ColumnStats(12L, 419975L, 8.0D, 8, 12L, 1L),
    "c_first_sales_date_sk" -> ColumnStats(3623L, 419855L, 8.0D, 8, 2452648L, 2448998L),
    "c_customer_id" -> ColumnStats(5846L, 0L, 16.0D, 16, "AAAAAAAAPPPPPKAA", "AAAAAAAAAAAAABAA"),
    "c_birth_country" -> ColumnStats(208L, 0L, 8.378074916666666D, 20, "ZIMBABWE", ""),
    "c_salutation" -> ColumnStats(7L, 0L, 3.12878025D, 4, "Sir", ""),
    "c_last_name" -> ColumnStats(5005L, 0L, 5.915913D, 13, "Zuniga", ""),
    "c_birth_day" -> ColumnStats(31L, 420290L, 8.0D, 8, 31L, 1L),
    "c_current_cdemo_sk" -> ColumnStats(1909907L, 420085L, 8.0D, 8, 1920800L, 1L),
    "c_login" -> ColumnStats(1L, 0L, 0.0D, 0, "", ""),
    "c_last_review_date" -> ColumnStats(365L, 419949L, 8.0D, 8, 2452648L, 2452283L),
    "c_first_shipto_date_sk" -> ColumnStats(3624L, 420329L, 8.0D, 8, 2452678L, 2449028L),
    "c_current_addr_sk" -> ColumnStats(5162752L, 0L, 8.0D, 8, 6000000L, 2L),
    "c_birth_year" -> ColumnStats(69L, 420432L, 8.0D, 8, 1992L, 1924L),
    "c_preferred_cust_flag" -> ColumnStats(3L, 0L, 0.9649829166666667D, 1, "Y", ""),
    "c_current_hdemo_sk" -> ColumnStats(7207L, 419143L, 8.0D, 8, 7200L, 1L),
    "c_customer_sk" -> ColumnStats(12013654L, 0L, 8.0D, 8, 12000000L, 1L),
    "c_first_name" -> ColumnStats(5179L, 0L, 5.632130416666667D, 11, "Zulma", "")))

  val CUSTOMER_ADDRESS_1000 = TableStats(6000000L, Map[String, ColumnStats](
    "ca_state" -> ColumnStats(52L, 0L, 1.9400686666666667D, 2, "WY", ""),
    "ca_street_type" -> ColumnStats(21L, 0L, 4.072275833333333D, 9, "Wy", ""),
    "ca_gmt_offset" -> ColumnStats(6L, 180174L, 12.0D, 12, -5.00, -10.00),
    "ca_location_type" -> ColumnStats(4L, 0L, 8.7319655D, 13, "single family", ""),
    "ca_street_number" -> ColumnStats(1005L, 0L, 2.806006D, 4, "999", ""),
    "ca_address_id" -> ColumnStats(2948L, 0L, 16.0D, 16, "AAAAAAAAPPPPPEAA", "AAAAAAAAAAAAABAA"),
    "ca_suite_number" -> ColumnStats(76L, 0L, 7.653193833333333D, 9, "Suite Y", ""),
    "ca_country" -> ColumnStats(2L, 0L, 12.6093955D, 13, "United States", ""),
    "ca_zip" -> ColumnStats(9397L, 0L, 4.8497683333333335D, 5, "99981", ""),
    "ca_address_sk" -> ColumnStats(5951214L, 0L, 8.0D, 8, 6000000L, 1L),
    "ca_county" -> ColumnStats(1856L, 0L, 13.542906166666667D, 28, "Ziebach County", ""),
    "ca_city" -> ColumnStats(991L, 0L, 8.684214666666668D, 20, "Zion", ""),
    "ca_street_name" -> ColumnStats(8216L, 0L, 8.449440333333333D, 21, "Woodland Woodland", "")))

  val CUSTOMER_DEMOGRAPHICS_1000 = TableStats(1920800L, Map[String, ColumnStats](
    "cd_demo_sk" -> ColumnStats(1913326L, 0L, 8.0D, 8, 1920800L, 1L),
    "cd_education_status" -> ColumnStats(7L, 0L, 9.571428571428571D, 15, "Unknown", "2 yr Degree"),
    "cd_credit_rating" -> ColumnStats(4L, 0L, 7.0D, 9, "Unknown", "Good"),
    "cd_purchase_estimate" -> ColumnStats(20L, 0L, 8.0D, 8, 10000L, 500L),
    "cd_dep_college_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_dep_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_gender" -> ColumnStats(2L, 0L, 1.0D, 1, "M", "F"),
    "cd_dep_employed_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_marital_status" -> ColumnStats(5L, 0L, 1.0D, 1, "W", "D")))

  val DATE_DIM_1000 = TableStats(73049L, Map[String, ColumnStats](
    "d_same_day_lq" -> ColumnStats(72475L, 0L, 8.0D, 8, 2487978L, 2414930L),
    "d_holiday" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_date" -> ColumnStats(72324L, 0L, 12.0D, 12, Date.valueOf("2099-12-31"),
      Date.valueOf("1900-01-02")),
    "d_current_week" -> ColumnStats(1L, 0L, 1.0D, 1, "N", "N"),
    "d_current_day" -> ColumnStats(1L, 0L, 1.0D, 1, "N", "N"),
    "d_week_seq" -> ColumnStats(10393L, 0L, 8.0D, 8, 10436L, 1L),
    "d_day_name" -> ColumnStats(7L, 0L, 7.142863009760572D, 9, "Wednesday", "Friday"),
    "d_year" -> ColumnStats(198L, 0L, 8.0D, 8, 2100L, 1900L),
    "d_date_id" -> ColumnStats(37L, 0L, 16.0D, 16, "AAAAAAAAPPPPECAA", "AAAAAAAAAAAAFCAA"),
    "d_first_dom" -> ColumnStats(2394L, 0L, 8.0D, 8, 2488070L, 2415021L),
    "d_moy" -> ColumnStats(12L, 0L, 8.0D, 8, 12L, 1L),
    "d_current_month" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_quarter_name" -> ColumnStats(797L, 0L, 6.0D, 6, "2100Q1", "1900Q1"),
    "d_same_day_ly" -> ColumnStats(72606L, 0L, 8.0D, 8, 2487705L, 2414657L),
    "d_fy_year" -> ColumnStats(198L, 0L, 8.0D, 8, 2100L, 1900L),
    "d_following_holiday" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_weekend" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_fy_week_seq" -> ColumnStats(10393L, 0L, 8.0D, 8, 10436L, 1L),
    "d_current_year" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_date_sk" -> ColumnStats(72895L, 0L, 8.0D, 8, 2488070L, 2415022L),
    "d_qoy" -> ColumnStats(4L, 0L, 8.0D, 8, 4L, 1L),
    "d_dow" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "d_fy_quarter_seq" -> ColumnStats(798L, 0L, 8.0D, 8, 801L, 1L),
    "d_quarter_seq" -> ColumnStats(798L, 0L, 8.0D, 8, 801L, 1L),
    "d_last_dom" -> ColumnStats(2387L, 0L, 8.0D, 8, 2488372L, 2415020L),
    "d_current_quarter" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_month_seq" -> ColumnStats(2399L, 0L, 8.0D, 8, 2400L, 0L),
    "d_dom" -> ColumnStats(31L, 0L, 8.0D, 8, 31L, 1L)))

  val HOUSEHOLD_DEMOGRAPHICS_1000 = TableStats(7200L, Map[String, ColumnStats](
    "hd_demo_sk" -> ColumnStats(7207L, 0L, 8.0D, 8, 7200L, 1L),
    "hd_income_band_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "hd_dep_count" -> ColumnStats(10L, 0L, 8.0D, 8, 9L, 0L),
    "hd_buy_potential" -> ColumnStats(6L, 0L, 7.5D, 10, "Unknown", "0-500"),
    "hd_vehicle_count" -> ColumnStats(6L, 0L, 8.0D, 8, 4L, -1L)))

  val INCOME_BAND_1000 = TableStats(20L, Map[String, ColumnStats](
    "ib_income_band_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "ib_lower_bound" -> ColumnStats(20L, 0L, 8.0D, 8, 190001L, 0L),
    "ib_upper_bound" -> ColumnStats(20L, 0L, 8.0D, 8, 200000L, 10000L)))

  val ITEM_1000 = TableStats(300000L, Map[String, ColumnStats](
    "i_units" -> ColumnStats(22L, 0L, 4.1853D, 7, "Unknown", ""),
    "i_brand" -> ColumnStats(709L, 0L, 16.11901D, 22, "univunivamalg #9", ""),
    "i_rec_start_date" -> ColumnStats(4L, 777L, 12.0D, 12, Date.valueOf("2001-10-26"),
      Date.valueOf("1997-10-26")),
    "i_rec_end_date" -> ColumnStats(3L, 150000L, 12.0D, 12, Date.valueOf("2001-10-25"),
      Date.valueOf("1999-10-26")),
    "i_manufact_id" -> ColumnStats(996L, 751L, 8.0D, 8, 1000L, 1L),
    "i_manager_id" -> ColumnStats(100L, 786L, 8.0D, 8, 100L, 1L),
    "i_container" -> ColumnStats(2L, 0L, 6.98166D, 7, "Unknown", ""),
    "i_formulation" -> ColumnStats(86237L, 0L, 19.950733333333332D, 20, "yellow99954603541727", ""),
    "i_product_name" -> ColumnStats(745L, 0L, 22.833546666666667D, 30, "pripripripripriought", ""),
    "i_item_desc" -> ColumnStats(208770L, 0L, 99.95914333333333D, 200,
      "Youngsters will maintain to a ri", ""),
    "i_category_id" -> ColumnStats(10L, 778L, 8.0D, 8, 10L, 1L),
    "i_item_id" -> ColumnStats(57414L, 0L, 16.0D, 16, "AAAAAAAAPPPPBAAA", "AAAAAAAAAAAABAAA"),
    "i_class" -> ColumnStats(99L, 0L, 7.75883D, 15, "womens watch", ""),
    "i_current_price" -> ColumnStats(9665L, 733L, 12.0D, 12, 99.99, 0.09),
    "i_category" -> ColumnStats(11L, 0L, 5.89369D, 11, "Women", ""),
    "i_brand_id" -> ColumnStats(953L, 746L, 8.0D, 8, 10016017L, 1001001L),
    "i_item_sk" -> ColumnStats(298759L, 0L, 8.0D, 8, 300000L, 1L),
    "i_manufact" -> ColumnStats(999L, 0L, 11.270093333333334D, 15, "pripripri", ""),
    "i_size" -> ColumnStats(8L, 0L, 4.31505D, 11, "small", ""),
    "i_color" -> ColumnStats(93L, 0L, 5.361223333333333D, 10, "yellow", ""),
    "i_class_id" -> ColumnStats(16L, 769L, 8.0D, 8, 16L, 1L),
    "i_wholesale_cost" -> ColumnStats(7218L, 766L, 12.0D, 12, 89.54, 0.02)))

  val PROMOTION_1000 = TableStats(1500L, Map[String, ColumnStats](
    "p_channel_radio" -> ColumnStats(2L, 0L, 0.9873333333333333D, 1, "N", ""),
    "p_item_sk" -> ColumnStats(1469L, 22L, 8.0D, 8, 299914L, 278L),
    "p_channel_catalog" -> ColumnStats(2L, 0L, 0.986D, 1, "N", ""),
    "p_response_target" -> ColumnStats(1L, 22L, 8.0D, 8, 1L, 1L),
    "p_start_date_sk" -> ColumnStats(682L, 23L, 8.0D, 8, 2450915L, 2450095L),
    "p_discount_active" -> ColumnStats(2L, 0L, 0.99D, 1, "N", ""),
    "p_promo_id" -> ColumnStats(2L, 0L, 16.0D, 16, "AAAAAAAAPPEAAAAA", "AAAAAAAAAABAAAAA"),
    "p_promo_name" -> ColumnStats(11L, 0L, 3.9526666666666666D, 5, "pri", ""),
    "p_cost" -> ColumnStats(1L, 20L, 12.0D, 12, 1000.00, 1000.00),
    "p_purpose" -> ColumnStats(2L, 0L, 6.911333333333333D, 7, "Unknown", ""),
    "p_channel_dmail" -> ColumnStats(3L, 0L, 0.9873333333333333D, 1, "Y", ""),
    "p_channel_press" -> ColumnStats(2L, 0L, 0.9893333333333333D, 1, "N", ""),
    "p_end_date_sk" -> ColumnStats(709L, 18L, 8.0D, 8, 2450970L, 2450100L),
    "p_channel_email" -> ColumnStats(2L, 0L, 0.9866666666666667D, 1, "N", ""),
    "p_channel_tv" -> ColumnStats(2L, 0L, 0.984D, 1, "N", ""),
    "p_promo_sk" -> ColumnStats(1507L, 0L, 8.0D, 8, 1500L, 1L),
    "p_channel_event" -> ColumnStats(2L, 0L, 0.986D, 1, "N", ""),
    "p_channel_demo" -> ColumnStats(2L, 0L, 0.988D, 1, "N", ""),
    "p_channel_details" -> ColumnStats(1423L, 0L, 39.617333333333335D, 60,
      "Young, simple parties ", "")))

  val REASON_1000 = TableStats(65L, Map[String, ColumnStats](
    "r_reason_sk" -> ColumnStats(65L, 0L, 8.0D, 8, 65L, 1L),
    "r_reason_id" -> ColumnStats(2L, 0L, 16.0D, 16, "AAAAAAAAPDAAAAAA", "AAAAAAAAABAAAAAA"),
    "r_reason_desc" -> ColumnStats(32L, 0L, 13.046153846153846D, 43, "unauthoized purchase",
      "Did not fit")))

  val SHIP_MODE_1000 = TableStats(20L, Map[String, ColumnStats](
    "sm_type" -> ColumnStats(6L, 0L, 7.5D, 9, "TWO DAY", "EXPRESS"),
    "sm_ship_mode_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPAAAAAAA", "AAAAAAAAABAAAAAA"),
    "sm_ship_mode_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "sm_contract" -> ColumnStats(19L, 0L, 10.05D, 18, "zQv0KxK", "3FLGraaY4Pau"),
    "sm_code" -> ColumnStats(4L, 0L, 4.35D, 7, "SURFACE", "AIR"),
    "sm_carrier" -> ColumnStats(18L, 0L, 6.65D, 14, "ZOUROS", "AIRBORNE")))

  val STORE_1000 = TableStats(1002L, Map[String, ColumnStats](
    "s_country" -> ColumnStats(2L, 0L, 12.935129740518962D, 13, "United States", ""),
    "s_tax_precentage" -> ColumnStats(12L, 9L, 12.0D, 12, 0.11, 0.00),
    "s_market_desc" -> ColumnStats(758L, 0L, 57.80738522954092D, 100,
      "Young, top regulations keep as ", ""),
    "s_store_sk" -> ColumnStats(998L, 0L, 8.0D, 8, 1002L, 1L),
    "s_city" -> ColumnStats(55L, 0L, 9.161676646706587D, 15, "Woodlawn", ""),
    "s_store_id" -> ColumnStats(501L, 0L, 16.0D, 16, "AAAAAAAAPPBAAAAA", "AAAAAAAAAABAAAAA"),
    "s_suite_number" -> ColumnStats(76L, 0L, 7.828343313373254D, 9, "Suite Y", ""),
    "s_company_id" -> ColumnStats(1L, 7L, 8.0D, 8, 1L, 1L),
    "s_store_name" -> ColumnStats(11L, 0L, 3.9261477045908184D, 5, "pri", ""),
    "s_floor_space" -> ColumnStats(755L, 7L, 8.0D, 8, 9988484L, 5023886L),
    "s_street_number" -> ColumnStats(538L, 0L, 2.8622754491017965D, 3, "999", ""),
    "s_street_type" -> ColumnStats(21L, 0L, 4.2075848303393215D, 9, "Wy", ""),
    "s_number_employees" -> ColumnStats(101L, 4L, 8.0D, 8, 300L, 200L),
    "s_company_name" -> ColumnStats(2L, 0L, 6.944111776447106D, 7, "Unknown", ""),
    "s_division_name" -> ColumnStats(2L, 0L, 6.944111776447106D, 7, "Unknown", ""),
    "s_zip" -> ColumnStats(352L, 0L, 4.9750499001996005D, 5, "99843", ""),
    "s_hours" -> ColumnStats(4L, 0L, 7.108782435129741D, 8, "8AM-8AM", ""),
    "s_manager" -> ColumnStats(738L, 0L, 12.83932135728543D, 22, "Zachary White", ""),
    "s_market_manager" -> ColumnStats(754L, 0L, 12.638722554890219D, 20, "Willie Pittman", ""),
    "s_geography_class" -> ColumnStats(2L, 0L, 6.944111776447106D, 7, "Unknown", ""),
    "s_gmt_offset" -> ColumnStats(4L, 6L, 12.0D, 12, -5.00, -8.00),
    "s_state" -> ColumnStats(22L, 0L, 1.9880239520958083D, 2, "WV", ""),
    "s_street_name" -> ColumnStats(540L, 0L, 8.511976047904191D, 21, "Woodland 9th", ""),
    "s_closed_date_sk" -> ColumnStats(174L, 718L, 8.0D, 8, 2451309L, 2450823L),
    "s_rec_start_date" -> ColumnStats(4L, 9L, 12.0D, 12, Date.valueOf("2001-03-12"),
      Date.valueOf("1997-03-12")),
    "s_county" -> ColumnStats(28L, 0L, 14.09181636726547D, 22, "Ziebach County", ""),
    "s_division_id" -> ColumnStats(1L, 6L, 8.0D, 8, 1L, 1L),
    "s_rec_end_date" -> ColumnStats(3L, 501L, 12.0D, 12, Date.valueOf("2001-03-11"),
      Date.valueOf("1999-03-12")),
    "s_market_id" -> ColumnStats(10L, 5L, 8.0D, 8, 10L, 1L)))

  val TIME_DIM_1000 = TableStats(86400L, Map[String, ColumnStats](
    "t_minute" -> ColumnStats(60L, 0L, 8.0D, 8, 59L, 0L),
    "t_am_pm" -> ColumnStats(2L, 0L, 2.0D, 2, "PM", "AM"),
    "t_time_sk" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "t_time" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "t_time_id" -> ColumnStats(44L, 0L, 16.0D, 16, "AAAAAAAAPPPPAAAA", "AAAAAAAAAAAABAAA"),
    "t_second" -> ColumnStats(60L, 0L, 8.0D, 8, 59L, 0L),
    "t_meal_time" -> ColumnStats(4L, 0L, 2.875D, 9, "lunch", ""),
    "t_shift" -> ColumnStats(3L, 0L, 5.333333333333333D, 6, "third", "first"),
    "t_hour" -> ColumnStats(24L, 0L, 8.0D, 8, 23L, 0L),
    "t_sub_shift" -> ColumnStats(4L, 0L, 6.916666666666667D, 9, "night", "afternoon")))

  val WAREHOUSE_1000 = TableStats(20L, Map[String, ColumnStats](
    "w_state" -> ColumnStats(12L, 0L, 2.0D, 2, "WA", "AL"),
    "w_gmt_offset" -> ColumnStats(3L, 0L, 12.0D, 12, -5.00, -8.00),
    "w_warehouse_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPAAAAAAA", "AAAAAAAAABAAAAAA"),
    "w_county" -> ColumnStats(7L, 0L, 14.1D, 22, "Ziebach County", "Bronx County"),
    "w_zip" -> ColumnStats(20L, 0L, 5.0D, 5, "93604", "12477"),
    "w_city" -> ColumnStats(13L, 0L, 9.4D, 15, "Union", "Bethel"),
    "w_country" -> ColumnStats(1L, 0L, 13.0D, 13, "United States", "United States"),
    "w_warehouse_name" -> ColumnStats(20L, 0L, 14.65D, 19, "Yards start wor", "Actual, level "),
    "w_street_type" -> ColumnStats(12L, 0L, 4.0D, 9, "ST", "Ave"),
    "w_street_name" -> ColumnStats(18L, 0L, 9.2D, 18, "Woodland ", "11th Pine"),
    "w_street_number" -> ColumnStats(20L, 0L, 2.9D, 3, "947", "154"),
    "w_warehouse_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "w_warehouse_sq_ft" -> ColumnStats(20L, 0L, 8.0D, 8, 923457L, 50133L),
    "w_suite_number" -> ColumnStats(7L, 0L, 8.25D, 9, "Suite W", "Suite 0")))

  val WEB_PAGE_1000 = TableStats(3000L, Map[String, ColumnStats](
    "wp_image_count" -> ColumnStats(7L, 48L, 8.0D, 8, 7L, 1L),
    "wp_char_count" -> ColumnStats(1875L, 32L, 8.0D, 8, 8505L, 365L),
    "wp_autogen_flag" -> ColumnStats(3L, 0L, 0.9856666666666667D, 1, "Y", ""),
    "wp_creation_date_sk" -> ColumnStats(193L, 35L, 8.0D, 8, 2450815L, 2450605L),
    "wp_link_count" -> ColumnStats(24L, 43L, 8.0D, 8, 25L, 2L),
    "wp_rec_start_date" -> ColumnStats(4L, 53L, 12.0D, 12, Date.valueOf("2001-09-02"),
      Date.valueOf("1997-09-02")),
    "wp_web_page_id" -> ColumnStats(1512L, 0L, 16.0D, 16, "AAAAAAAAPPKAAAAA", "AAAAAAAAAABAAAAA"),
    "wp_rec_end_date" -> ColumnStats(3L, 1500L, 12.0D, 12, Date.valueOf("2001-09-01"),
      Date.valueOf("1999-09-02")),
    "wp_access_date_sk" -> ColumnStats(100L, 43L, 8.0D, 8, 2452648L, 2452548L),
    "wp_customer_sk" -> ColumnStats(787L, 2059L, 8.0D, 8, 11976442L, 12663L),
    "wp_web_page_sk" -> ColumnStats(2992L, 0L, 8.0D, 8, 3000L, 1L),
    "wp_max_ad_count" -> ColumnStats(5L, 46L, 8.0D, 8, 4L, 0L),
    "wp_type" -> ColumnStats(8L, 0L, 6.356D, 9, "welcome", ""),
    "wp_url" -> ColumnStats(2L, 0L, 17.712D, 18, "http://www.foo.com", "")))

  val WEB_SITE_1000 = TableStats(54L, Map[String, ColumnStats](
    "web_market_manager" -> ColumnStats(37L, 0L, 13.851851851851851D, 18, "William Gould",
      "Antonio Campbell"),
    "web_country" -> ColumnStats(1L, 0L, 13.0D, 13, "United States", "United States"),
    "web_open_date_sk" -> ColumnStats(27L, 0L, 8.0D, 8, 2450807L, 2450373L),
    "web_street_type" -> ColumnStats(19L, 0L, 4.444444444444445D, 9, "Wy", "Ave"),
    "web_zip" -> ColumnStats(33L, 0L, 5.0D, 5, "88482", "15709"),
    "web_gmt_offset" -> ColumnStats(4L, 0L, 12.0D, 12, -5.00, -8.00),
    "web_street_number" -> ColumnStats(40L, 0L, 2.9814814814814814D, 3, "972", "165"),
    "web_state" -> ColumnStats(20L, 0L, 2.0D, 2, "WV", "AL"),
    "web_suite_number" -> ColumnStats(16L, 0L, 8.166666666666666D, 9, "Suite Y", "Suite 130"),
    "web_rec_end_date" -> ColumnStats(3L, 27L, 12.0D, 12, Date.valueOf("2001-08-14"),
      Date.valueOf("1999-08-15")),
    "web_close_date_sk" -> ColumnStats(18L, 9L, 8.0D, 8, 2446218L, 2441265L),
    "web_company_name" -> ColumnStats(6L, 0L, 3.9444444444444446D, 5, "pri", "able"),
    "web_manager" -> ColumnStats(37L, 0L, 12.314814814814815D, 18, "Wes Milam", "Avery Caskey"),
    "web_mkt_class" -> ColumnStats(40L, 0L, 33.611111111111114D, 49,
      "Young words could like however", "About original countries try nowhere. Wide costs "),
    "web_mkt_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "web_name" -> ColumnStats(9L, 0L, 6.0D, 6, "site_8", "site_0"),
    "web_tax_percentage" -> ColumnStats(11L, 0L, 12.0D, 12, 0.12, 0.01),
    "web_company_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "web_site_sk" -> ColumnStats(54L, 0L, 8.0D, 8, 54L, 1L),
    "web_mkt_desc" -> ColumnStats(38L, 0L, 60.888888888888886D, 97,
      "Warm signs ask eastern, other months. Full-time, cur",
      "All public horses shall carry yet great, soft knees."),
    "web_rec_start_date" -> ColumnStats(4L, 0L, 12.0D, 12, Date.valueOf("2001-08-15"),
      Date.valueOf("1997-08-15")),
    "web_class" -> ColumnStats(1L, 0L, 7.0D, 7, "Unknown", "Unknown"),
    "web_city" -> ColumnStats(24L, 0L, 8.814814814814815D, 14, "Woodlawn", "Antioch"),
    "web_county" -> ColumnStats(9L, 0L, 14.092592592592593D, 22, "Ziebach County", "Barrow County"),
    "web_site_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPBAAAAAA", "AAAAAAAAABAAAAAA"),
    "web_street_name" -> ColumnStats(46L, 0L, 8.38888888888889D, 19, "Williams ", "10th ")))

  val CUSTOMER_ADDRESS_10000 = TableStats(32500000L, Map[String, ColumnStats](
    "ca_state" -> ColumnStats(52L, 0L, 1.9399779692307693D, 2, "WY", ""),
    "ca_street_type" -> ColumnStats(21L, 0L, 4.072969446153846D, 9, "Wy", ""),
    "ca_gmt_offset" -> ColumnStats(6L, 976866L, 12.0D, 12, -5.00, -10.00),
    "ca_location_type" -> ColumnStats(4L, 0L, 8.729350123076923D, 13, "single family", ""),
    "ca_street_number" -> ColumnStats(1005L, 0L, 2.805997692307692D, 4, "999", ""),
    "ca_address_id" -> ColumnStats(15969L, 0L, 16.0D, 16, "AAAAAAAAPPPPPPAA", "AAAAAAAAAAAAAABA"),
    "ca_suite_number" -> ColumnStats(76L, 0L, 7.652900738461539D, 9, "Suite Y", ""),
    "ca_country" -> ColumnStats(2L, 0L, 12.6090068D, 13, "United States", ""),
    "ca_zip" -> ColumnStats(9469L, 0L, 4.8498463076923075D, 5, "99981", ""),
    "ca_address_sk" -> ColumnStats(32471431L, 0L, 8.0D, 8, 32500000L, 1L),
    "ca_county" -> ColumnStats(1856L, 0L, 13.542053015384615D, 28, "Ziebach County", ""),
    "ca_city" -> ColumnStats(991L, 0L, 8.683875938461538D, 20, "Zion", ""),
    "ca_street_name" -> ColumnStats(8216L, 0L, 8.450357169230768D, 21, "Woodland Woodland", "")))

  val CUSTOMER_DEMOGRAPHICS_10000 = TableStats(1920800L, Map[String, ColumnStats](
    "cd_demo_sk" -> ColumnStats(1913326L, 0L, 8.0D, 8, 1920800L, 1L),
    "cd_education_status" -> ColumnStats(7L, 0L, 9.571428571428571D, 15, "Unknown", "2 yr Degree"),
    "cd_credit_rating" -> ColumnStats(4L, 0L, 7.0D, 9, "Unknown", "Good"),
    "cd_purchase_estimate" -> ColumnStats(20L, 0L, 8.0D, 8, 10000L, 500L),
    "cd_dep_college_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_dep_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_gender" -> ColumnStats(2L, 0L, 1.0D, 1, "M", "F"),
    "cd_dep_employed_count" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "cd_marital_status" -> ColumnStats(5L, 0L, 1.0D, 1, "W", "D")))

  val DATE_DIM_10000 = TableStats(73049L, Map[String, ColumnStats](
    "d_same_day_lq" -> ColumnStats(72475L, 0L, 8.0D, 8, 2487978L, 2414930L),
    "d_holiday" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_date" -> ColumnStats(72324L, 0L, 12.0D, 12, Date.valueOf("2099-12-31"),
      Date.valueOf("1900-01-02")),
    "d_current_week" -> ColumnStats(1L, 0L, 1.0D, 1, "N", "N"),
    "d_current_day" -> ColumnStats(1L, 0L, 1.0D, 1, "N", "N"),
    "d_week_seq" -> ColumnStats(10393L, 0L, 8.0D, 8, 10436L, 1L),
    "d_day_name" -> ColumnStats(7L, 0L, 7.142863009760572D, 9, "Wednesday", "Friday"),
    "d_year" -> ColumnStats(198L, 0L, 8.0D, 8, 2100L, 1900L),
    "d_date_id" -> ColumnStats(37L, 0L, 16.0D, 16, "AAAAAAAAPPPPECAA", "AAAAAAAAAAAAFCAA"),
    "d_first_dom" -> ColumnStats(2394L, 0L, 8.0D, 8, 2488070L, 2415021L),
    "d_moy" -> ColumnStats(12L, 0L, 8.0D, 8, 12L, 1L),
    "d_current_month" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_quarter_name" -> ColumnStats(797L, 0L, 6.0D, 6, "2100Q1", "1900Q1"),
    "d_same_day_ly" -> ColumnStats(72606L, 0L, 8.0D, 8, 2487705L, 2414657L),
    "d_fy_year" -> ColumnStats(198L, 0L, 8.0D, 8, 2100L, 1900L),
    "d_following_holiday" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_weekend" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_fy_week_seq" -> ColumnStats(10393L, 0L, 8.0D, 8, 10436L, 1L),
    "d_current_year" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_date_sk" -> ColumnStats(72895L, 0L, 8.0D, 8, 2488070L, 2415022L),
    "d_qoy" -> ColumnStats(4L, 0L, 8.0D, 8, 4L, 1L),
    "d_dow" -> ColumnStats(7L, 0L, 8.0D, 8, 6L, 0L),
    "d_fy_quarter_seq" -> ColumnStats(798L, 0L, 8.0D, 8, 801L, 1L),
    "d_quarter_seq" -> ColumnStats(798L, 0L, 8.0D, 8, 801L, 1L),
    "d_last_dom" -> ColumnStats(2387L, 0L, 8.0D, 8, 2488372L, 2415020L),
    "d_current_quarter" -> ColumnStats(2L, 0L, 1.0D, 1, "Y", "N"),
    "d_month_seq" -> ColumnStats(2399L, 0L, 8.0D, 8, 2400L, 0L),
    "d_dom" -> ColumnStats(31L, 0L, 8.0D, 8, 31L, 1L)))

  val HOUSEHOLD_DEMOGRAPHICS_10000 = TableStats(7200L, Map[String, ColumnStats](
    "hd_demo_sk" -> ColumnStats(7207L, 0L, 8.0D, 8, 7200L, 1L),
    "hd_income_band_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "hd_dep_count" -> ColumnStats(10L, 0L, 8.0D, 8, 9L, 0L),
    "hd_buy_potential" -> ColumnStats(6L, 0L, 7.5D, 10, "Unknown", "0-500"),
    "hd_vehicle_count" -> ColumnStats(6L, 0L, 8.0D, 8, 4L, -1L)))

  val INCOME_BAND_10000 = TableStats(20L, Map[String, ColumnStats](
    "ib_income_band_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "ib_lower_bound" -> ColumnStats(20L, 0L, 8.0D, 8, 190001L, 0L),
    "ib_upper_bound" -> ColumnStats(20L, 0L, 8.0D, 8, 200000L, 10000L)))

  val ITEM_10000 = TableStats(402000L, Map[String, ColumnStats](
    "i_units" -> ColumnStats(22L, 0L, 4.185865671641791D, 7, "Unknown", ""),
    "i_brand" -> ColumnStats(709L, 0L, 16.118136815920398D, 22, "univunivamalg #9", ""),
    "i_rec_start_date" -> ColumnStats(4L, 1030L, 12.0D, 12, Date.valueOf("2001-10-26"),
      Date.valueOf("1997-10-26")),
    "i_rec_end_date" -> ColumnStats(3L, 201000L, 12.0D, 12, Date.valueOf("2001-10-25"),
      Date.valueOf("1999-10-26")),
    "i_manufact_id" -> ColumnStats(996L, 1003L, 8.0D, 8, 1000L, 1L),
    "i_manager_id" -> ColumnStats(100L, 1038L, 8.0D, 8, 100L, 1L),
    "i_container" -> ColumnStats(2L, 0L, 6.981960199004975D, 7, "Unknown", ""),
    "i_formulation" -> ColumnStats(57172L, 0L, 19.95084577114428D, 20, "yellow99954603541727", ""),
    "i_product_name" -> ColumnStats(833L, 0L, 22.857460199004976D, 30, "pripripripripripri", ""),
    "i_item_desc" -> ColumnStats(274966L, 0L, 100.01289303482586D, 200,
      "Youngsters would minimise toge", ""),
    "i_category_id" -> ColumnStats(10L, 1024L, 8.0D, 8, 10L, 1L),
    "i_item_id" -> ColumnStats(25914L, 0L, 16.0D, 16, "AAAAAAAAPPPPEAAA", "AAAAAAAAAAAABAAA"),
    "i_class" -> ColumnStats(99L, 0L, 7.7637985074626865D, 15, "womens watch", ""),
    "i_current_price" -> ColumnStats(9850L, 963L, 12.0D, 12, 99.99, 0.09),
    "i_category" -> ColumnStats(11L, 0L, 5.891798507462687D, 11, "Women", ""),
    "i_brand_id" -> ColumnStats(953L, 975L, 8.0D, 8, 10016017L, 1001001L),
    "i_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "i_manufact" -> ColumnStats(999L, 0L, 11.27413184079602D, 15, "pripripri", ""),
    "i_size" -> ColumnStats(8L, 0L, 4.317925373134329D, 11, "small", ""),
    "i_color" -> ColumnStats(93L, 0L, 5.3636567164179105D, 10, "yellow", ""),
    "i_class_id" -> ColumnStats(16L, 1030L, 8.0D, 8, 16L, 1L),
    "i_wholesale_cost" -> ColumnStats(7603L, 1026L, 12.0D, 12, 89.63, 0.02)))

  val PROMOTION_10000 = TableStats(2000L, Map[String, ColumnStats](
    "p_channel_radio" -> ColumnStats(2L, 0L, 0.988D, 1, "N", ""),
    "p_item_sk" -> ColumnStats(1970L, 30L, 8.0D, 8, 401804L, 254L),
    "p_channel_catalog" -> ColumnStats(2L, 0L, 0.9875D, 1, "N", ""),
    "p_response_target" -> ColumnStats(1L, 30L, 8.0D, 8, 1L, 1L),
    "p_start_date_sk" -> ColumnStats(748L, 27L, 8.0D, 8, 2450915L, 2450095L),
    "p_discount_active" -> ColumnStats(2L, 0L, 0.991D, 1, "N", ""),
    "p_promo_id" -> ColumnStats(2L, 0L, 16.0D, 16, "AAAAAAAAPPGAAAAA", "AAAAAAAAAABAAAAA"),
    "p_promo_name" -> ColumnStats(11L, 0L, 3.953D, 5, "pri", ""),
    "p_cost" -> ColumnStats(1L, 27L, 12.0D, 12, 1000.00, 1000.00),
    "p_purpose" -> ColumnStats(2L, 0L, 6.9195D, 7, "Unknown", ""),
    "p_channel_dmail" -> ColumnStats(3L, 0L, 0.988D, 1, "Y", ""),
    "p_channel_press" -> ColumnStats(2L, 0L, 0.9895D, 1, "N", ""),
    "p_end_date_sk" -> ColumnStats(773L, 24L, 8.0D, 8, 2450970L, 2450100L),
    "p_channel_email" -> ColumnStats(2L, 0L, 0.9875D, 1, "N", ""),
    "p_channel_tv" -> ColumnStats(2L, 0L, 0.9835D, 1, "N", ""),
    "p_promo_sk" -> ColumnStats(2014L, 0L, 8.0D, 8, 2000L, 1L),
    "p_channel_event" -> ColumnStats(2L, 0L, 0.986D, 1, "N", ""),
    "p_channel_demo" -> ColumnStats(2L, 0L, 0.9875D, 1, "N", ""),
    "p_channel_details" -> ColumnStats(1884L, 0L, 39.639D, 60, "Young, simple parties ", "")))

  val REASON_10000 = TableStats(70L, Map[String, ColumnStats](
    "r_reason_sk" -> ColumnStats(70L, 0L, 8.0D, 8, 70L, 1L),
    "r_reason_id" -> ColumnStats(2L, 0L, 16.0D, 16, "AAAAAAAAPDAAAAAA", "AAAAAAAAABAAAAAA"),
    "r_reason_desc" -> ColumnStats(32L, 0L, 12.757142857142858D, 43, "unauthoized purchase",
      "Did not fit")))

  val SHIP_MODE_10000 = TableStats(20L, Map[String, ColumnStats](
    "sm_type" -> ColumnStats(6L, 0L, 7.5D, 9, "TWO DAY", "EXPRESS"),
    "sm_ship_mode_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPAAAAAAA", "AAAAAAAAABAAAAAA"),
    "sm_ship_mode_sk" -> ColumnStats(20L, 0L, 8.0D, 8, 20L, 1L),
    "sm_contract" -> ColumnStats(19L, 0L, 10.05D, 18, "zQv0KxK", "3FLGraaY4Pau"),
    "sm_code" -> ColumnStats(4L, 0L, 4.35D, 7, "SURFACE", "AIR"),
    "sm_carrier" -> ColumnStats(18L, 0L, 6.65D, 14, "ZOUROS", "AIRBORNE")))

  val STORE_10000 = TableStats(1500L, Map[String, ColumnStats](
    "s_country" -> ColumnStats(2L, 0L, 12.948D, 13, "United States", ""),
    "s_tax_precentage" -> ColumnStats(12L, 11L, 12.0D, 12, 0.11, 0.00),
    "s_market_desc" -> ColumnStats(1150L, 0L, 57.894D, 100,
      "Young, uncomfortable products would confirm values. Now successive writers w", ""),
    "s_store_sk" -> ColumnStats(1507L, 0L, 8.0D, 8, 1500L, 1L),
    "s_city" -> ColumnStats(165L, 0L, 8.872D, 15, "Woodville", ""),
    "s_store_id" -> ColumnStats(749L, 0L, 16.0D, 16, "AAAAAAAAPPEAAAAA", "AAAAAAAAAABAAAAA"),
    "s_suite_number" -> ColumnStats(76L, 0L, 7.843333333333334D, 9, "Suite Y", ""),
    "s_company_id" -> ColumnStats(1L, 8L, 8.0D, 8, 1L, 1L),
    "s_store_name" -> ColumnStats(11L, 0L, 3.9426666666666668D, 5, "pri", ""),
    "s_floor_space" -> ColumnStats(1128L, 9L, 8.0D, 8, 9988484L, 5010642L),
    "s_street_number" -> ColumnStats(699L, 0L, 2.8706666666666667D, 3, "999", ""),
    "s_street_type" -> ColumnStats(21L, 0L, 4.195333333333333D, 9, "Wy", ""),
    "s_number_employees" -> ColumnStats(101L, 5L, 8.0D, 8, 300L, 200L),
    "s_company_name" -> ColumnStats(2L, 0L, 6.953333333333333D, 7, "Unknown", ""),
    "s_division_name" -> ColumnStats(2L, 0L, 6.958D, 7, "Unknown", ""),
    "s_zip" -> ColumnStats(754L, 0L, 4.98D, 5, "99584", ""),
    "s_hours" -> ColumnStats(4L, 0L, 7.116666666666666D, 8, "8AM-8AM", ""),
    "s_manager" -> ColumnStats(1112L, 0L, 12.824D, 22, "Zachary White", ""),
    "s_market_manager" -> ColumnStats(1110L, 0L, 12.649333333333333D, 20, "Willie Pittman", ""),
    "s_geography_class" -> ColumnStats(2L, 0L, 6.953333333333333D, 7, "Unknown", ""),
    "s_gmt_offset" -> ColumnStats(4L, 6L, 12.0D, 12, -5.00, -8.00),
    "s_state" -> ColumnStats(35L, 0L, 1.9893333333333334D, 2, "WV", ""),
    "s_street_name" -> ColumnStats(761L, 0L, 8.532D, 21, "Woodland 9th", ""),
    "s_closed_date_sk" -> ColumnStats(225L, 1092L, 8.0D, 8, 2451310L, 2450821L),
    "s_rec_start_date" -> ColumnStats(4L, 11L, 12.0D, 12, Date.valueOf("2001-03-12"),
      Date.valueOf("1997-03-12")),
    "s_county" -> ColumnStats(82L, 0L, 14.032D, 22, "Ziebach County", ""),
    "s_division_id" -> ColumnStats(1L, 7L, 8.0D, 8, 1L, 1L),
    "s_rec_end_date" -> ColumnStats(3L, 750L, 12.0D, 12, Date.valueOf("2001-03-11"),
      Date.valueOf("1999-03-12")),
    "s_market_id" -> ColumnStats(10L, 5L, 8.0D, 8, 10L, 1L)))

  val TIME_DIM_10000 = TableStats(86400L, Map[String, ColumnStats](
    "t_minute" -> ColumnStats(60L, 0L, 8.0D, 8, 59L, 0L),
    "t_am_pm" -> ColumnStats(2L, 0L, 2.0D, 2, "PM", "AM"),
    "t_time_sk" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "t_time" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "t_time_id" -> ColumnStats(44L, 0L, 16.0D, 16, "AAAAAAAAPPPPAAAA", "AAAAAAAAAAAABAAA"),
    "t_second" -> ColumnStats(60L, 0L, 8.0D, 8, 59L, 0L),
    "t_meal_time" -> ColumnStats(4L, 0L, 2.875D, 9, "lunch", ""),
    "t_shift" -> ColumnStats(3L, 0L, 5.333333333333333D, 6, "third", "first"),
    "t_hour" -> ColumnStats(24L, 0L, 8.0D, 8, 23L, 0L),
    "t_sub_shift" -> ColumnStats(4L, 0L, 6.916666666666667D, 9, "night", "afternoon")))

  val WAREHOUSE_10000 = TableStats(25L, Map[String, ColumnStats](
    "w_state" -> ColumnStats(15L, 0L, 2.0D, 2, "WA", "AL"),
    "w_gmt_offset" -> ColumnStats(4L, 0L, 12.0D, 12, -5.00, -8.00),
    "w_warehouse_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPAAAAAAA", "AAAAAAAAABAAAAAA"),
    "w_county" -> ColumnStats(8L, 0L, 14.36D, 22, "Ziebach County", "Barrow County"),
    "w_zip" -> ColumnStats(23L, 0L, 5.0D, 5, "94107", "25709"),
    "w_city" -> ColumnStats(14L, 0L, 9.48D, 15, "Shiloh", "Cedar Grove"),
    "w_country" -> ColumnStats(1L, 0L, 13.0D, 13, "United States", "United States"),
    "w_warehouse_name" -> ColumnStats(24L, 0L, 15.2D, 19, "Yards start wor", "Actual, level "),
    "w_street_type" -> ColumnStats(15L, 0L, 4.08D, 9, "Way", "Ave"),
    "w_street_name" -> ColumnStats(23L, 0L, 9.44D, 18, "Woodland ", "11th Pine"),
    "w_street_number" -> ColumnStats(25L, 0L, 2.92D, 3, "947", "154"),
    "w_warehouse_sk" -> ColumnStats(25L, 0L, 8.0D, 8, 25L, 1L),
    "w_warehouse_sq_ft" -> ColumnStats(25L, 0L, 8.0D, 8, 967764L, 50133L),
    "w_suite_number" -> ColumnStats(8L, 0L, 8.24D, 9, "Suite W", "Suite 0")))

  val WEB_PAGE_10000 = TableStats(4002L, Map[String, ColumnStats](
    "wp_image_count" -> ColumnStats(7L, 58L, 8.0D, 8, 7L, 1L),
    "wp_char_count" -> ColumnStats(2342L, 43L, 8.0D, 8, 8505L, 365L),
    "wp_autogen_flag" -> ColumnStats(3L, 0L, 0.9877561219390305D, 1, "Y", ""),
    "wp_creation_date_sk" -> ColumnStats(264L, 44L, 8.0D, 8, 2450815L, 2450540L),
    "wp_link_count" -> ColumnStats(24L, 56L, 8.0D, 8, 25L, 2L),
    "wp_rec_start_date" -> ColumnStats(4L, 63L, 12.0D, 12, Date.valueOf("2001-09-02"),
      Date.valueOf("1997-09-02")),
    "wp_web_page_id" -> ColumnStats(2009L, 0L, 16.0D, 16, "AAAAAAAAPPNAAAAA", "AAAAAAAAAABAAAAA"),
    "wp_rec_end_date" -> ColumnStats(3L, 2001L, 12.0D, 12, Date.valueOf("2001-09-01"),
      Date.valueOf("1999-09-02")),
    "wp_access_date_sk" -> ColumnStats(100L, 57L, 8.0D, 8, 2452648L, 2452548L),
    "wp_customer_sk" -> ColumnStats(1057L, 2743L, 8.0D, 8, 64952814L, 15796L),
    "wp_web_page_sk" -> ColumnStats(3978L, 0L, 8.0D, 8, 4002L, 1L),
    "wp_max_ad_count" -> ColumnStats(5L, 53L, 8.0D, 8, 4L, 0L),
    "wp_type" -> ColumnStats(8L, 0L, 6.353823088455772D, 9, "welcome", ""),
    "wp_url" -> ColumnStats(2L, 0L, 17.71664167916042D, 18, "http://www.foo.com", "")))

  val WEB_SITE_10000 = TableStats(78L, Map[String, ColumnStats](
    "web_market_manager" -> ColumnStats(54L, 0L, 13.371794871794872D, 18, "William Gould",
      "Antonio Campbell"),
    "web_country" -> ColumnStats(1L, 0L, 13.0D, 13, "United States", "United States"),
    "web_open_date_sk" -> ColumnStats(39L, 0L, 8.0D, 8, 2450807L, 2450169L),
    "web_street_type" -> ColumnStats(19L, 0L, 4.333333333333333D, 9, "Wy", "Ave"),
    "web_zip" -> ColumnStats(48L, 0L, 5.0D, 5, "98579", "00769"),
    "web_gmt_offset" -> ColumnStats(4L, 0L, 12.0D, 12, -5.00, -8.00),
    "web_street_number" -> ColumnStats(59L, 0L, 2.923076923076923D, 3, "972", "121"),
    "web_state" -> ColumnStats(24L, 0L, 2.0D, 2, "VT", "AL"),
    "web_suite_number" -> ColumnStats(22L, 0L, 8.012820512820513D, 9, "Suite Y", "Suite 10"),
    "web_rec_end_date" -> ColumnStats(3L, 39L, 12.0D, 12, Date.valueOf("2001-08-14"),
      Date.valueOf("1999-08-15")),
    "web_close_date_sk" -> ColumnStats(26L, 13L, 8.0D, 8, 2446218L, 2441061L),
    "web_company_name" -> ColumnStats(6L, 0L, 3.9871794871794872D, 5, "pri", "able"),
    "web_manager" -> ColumnStats(54L, 0L, 12.64102564102564D, 18, "Wes Milam", "Allen Patton"),
    "web_mkt_class" -> ColumnStats(56L, 0L, 33.3974358974359D, 49,
      "Young words could like however", "Able ways can like as the rumours. Civil,"),
    "web_mkt_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "web_name" -> ColumnStats(13L, 0L, 6.230769230769231D, 7, "site_9", "site_0"),
    "web_tax_percentage" -> ColumnStats(13L, 0L, 12.0D, 12, 0.12, 0.00),
    "web_company_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "web_site_sk" -> ColumnStats(78L, 0L, 8.0D, 8, 78L, 1L),
    "web_mkt_desc" -> ColumnStats(59L, 0L, 62.294871794871796D, 99,
      "Yards ought to tell chinese, poor stories. So early",
      "All public horses shall carry yet great, soft knees."),
    "web_rec_start_date" -> ColumnStats(4L, 0L, 12.0D, 12, Date.valueOf("2001-08-15"),
      Date.valueOf("1997-08-15")),
    "web_class" -> ColumnStats(1L, 0L, 7.0D, 7, "Unknown", "Unknown"),
    "web_city" -> ColumnStats(36L, 0L, 9.192307692307692D, 15, "Woodlawn", "Arlington"),
    "web_county" -> ColumnStats(8L, 0L, 14.038461538461538D, 21, "Williamson County",
      "Abbeville County"),
    "web_site_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPBAAAAAA", "AAAAAAAAABAAAAAA"),
    "web_street_name" -> ColumnStats(64L, 0L, 8.628205128205128D, 19, "Williams ", "10th ")))

  val CATALOG_SALES_10000 = TableStats(14399906241L, Map[String, ColumnStats](
    "cs_ship_mode_sk" -> ColumnStats(20L, 71980912L, 8.0D, 8, 20L, 1L),
    "cs_bill_customer_sk" -> ColumnStats(65458058L, 71980079L, 8.0D, 8, 65000000L, 1L),
    "cs_sales_price" -> ColumnStats(29657L, 71997334L, 12.0D, 12, 300.00, 0.00),
    "cs_net_profit" -> ColumnStats(2069081L, 0L, 12.0D, 12, 19980.00, -10000.00),
    "cs_ext_tax" -> ColumnStats(219574L, 71987424L, 12.0D, 12, 2682.90, 0.00),
    "cs_wholesale_cost" -> ColumnStats(9872L, 71985395L, 12.0D, 12, 100.00, 1.00),
    "cs_ext_wholesale_cost" -> ColumnStats(391162L, 71989703L, 12.0D, 12, 10000.00, 1.00),
    "cs_ship_hdemo_sk" -> ColumnStats(7207L, 71985534L, 8.0D, 8, 7200L, 1L),
    "cs_bill_addr_sk" -> ColumnStats(32471431L, 71980526L, 8.0D, 8, 32500000L, 1L),
    "cs_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "cs_net_paid_inc_ship_tax" -> ColumnStats(3370783L, 0L, 12.0D, 12, 46389.84, 0.00),
    "cs_ship_customer_sk" -> ColumnStats(65458058L, 71995685L, 8.0D, 8, 65000000L, 1L),
    "cs_ext_discount_amt" -> ColumnStats(1112952L, 71974342L, 12.0D, 12, 29982.00, 0.00),
    "cs_sold_date_sk" -> ColumnStats(1840L, 71976071L, 8.0D, 8, 2452654L, 2450815L),
    "cs_order_number" -> ColumnStats(1594877426L, 0L, 8.0D, 8, 1600000000L, 1L),
    "cs_quantity" -> ColumnStats(100L, 71977773L, 8.0D, 8, 100L, 1L),
    "cs_bill_cdemo_sk" -> ColumnStats(1913326L, 71984778L, 8.0D, 8, 1920800L, 1L),
    "cs_call_center_sk" -> ColumnStats(54L, 72014996L, 8.0D, 8, 54L, 1L),
    "cs_net_paid_inc_tax" -> ColumnStats(2453436L, 71975497L, 12.0D, 12, 32492.90, 0.00),
    "cs_catalog_page_sk" -> ColumnStats(22428L, 71993604L, 8.0D, 8, 33670L, 1L),
    "cs_ship_cdemo_sk" -> ColumnStats(1913326L, 72002536L, 8.0D, 8, 1920800L, 1L),
    "cs_warehouse_sk" -> ColumnStats(25L, 71981928L, 8.0D, 8, 25L, 1L),
    "cs_net_paid" -> ColumnStats(1824079L, 72010480L, 12.0D, 12, 29970.00, 0.00),
    "cs_ext_list_price" -> ColumnStats(1173301L, 71988638L, 12.0D, 12, 30000.00, 1.00),
    "cs_list_price" -> ColumnStats(29854L, 71977436L, 12.0D, 12, 300.00, 1.00),
    "cs_promo_sk" -> ColumnStats(2014L, 71981651L, 8.0D, 8, 2000L, 1L),
    "cs_ship_addr_sk" -> ColumnStats(32471431L, 72002902L, 8.0D, 8, 32500000L, 1L),
    "cs_net_paid_inc_ship" -> ColumnStats(2571094L, 0L, 12.0D, 12, 44263.00, 0.00),
    "cs_ext_sales_price" -> ColumnStats(1112003L, 71988916L, 12.0D, 12, 29970.00, 0.00),
    "cs_ship_date_sk" -> ColumnStats(1932L, 71979749L, 8.0D, 8, 2452744L, 2450817L),
    "cs_ext_ship_cost" -> ColumnStats(571986L, 71969322L, 12.0D, 12, 14950.00, 0.00),
    "cs_coupon_amt" -> ColumnStats(1605261L, 71991126L, 12.0D, 12, 28824.00, 0.00),
    "cs_bill_hdemo_sk" -> ColumnStats(7207L, 72007017L, 8.0D, 8, 7200L, 1L),
    "cs_sold_time_sk" -> ColumnStats(86180L, 71996857L, 8.0D, 8, 86399L, 0L)))

  val CATALOG_RETURNS_10000 = TableStats(1440041715L, Map[String, ColumnStats](
    "cr_order_number" -> ColumnStats(940869559L, 0L, 8.0D, 8, 1599999998L, 1L),
    "cr_return_amount" -> ColumnStats(932669L, 28776633L, 12.0D, 12, 29333.00, 0.00),
    "cr_refunded_addr_sk" -> ColumnStats(32471431L, 28801798L, 8.0D, 8, 32500000L, 1L),
    "cr_net_loss" -> ColumnStats(958159L, 28784459L, 12.0D, 12, 16454.93, 0.50),
    "cr_return_amt_inc_tax" -> ColumnStats(1654680L, 28783971L, 12.0D, 12, 31092.98, 0.00),
    "cr_catalog_page_sk" -> ColumnStats(22428L, 28799530L, 8.0D, 8, 33670L, 1L),
    "cr_returning_customer_sk" -> ColumnStats(64994777L, 28800140L, 8.0D, 8, 65000000L, 1L),
    "cr_store_credit" -> ColumnStats(862338L, 28795707L, 12.0D, 12, 26346.57, 0.00),
    "cr_returning_addr_sk" -> ColumnStats(32468938L, 28793029L, 8.0D, 8, 32500000L, 1L),
    "cr_returning_hdemo_sk" -> ColumnStats(7207L, 28786456L, 8.0D, 8, 7200L, 1L),
    "cr_fee" -> ColumnStats(9919L, 28793384L, 12.0D, 12, 100.00, 0.50),
    "cr_refunded_cash" -> ColumnStats(1182554L, 28808855L, 12.0D, 12, 27836.90, 0.00),
    "cr_return_ship_cost" -> ColumnStats(497659L, 28807361L, 12.0D, 12, 14624.54, 0.00),
    "cr_returned_time_sk" -> ColumnStats(86180L, 0L, 8.0D, 8, 86399L, 0L),
    "cr_return_tax" -> ColumnStats(159231L, 28789342L, 12.0D, 12, 2537.21, 0.00),
    "cr_refunded_customer_sk" -> ColumnStats(65458058L, 28789778L, 8.0D, 8, 65000000L, 1L),
    "cr_ship_mode_sk" -> ColumnStats(20L, 28801520L, 8.0D, 8, 20L, 1L),
    "cr_refunded_cdemo_sk" -> ColumnStats(1913326L, 28803954L, 8.0D, 8, 1920800L, 1L),
    "cr_returned_date_sk" -> ColumnStats(2110L, 0L, 8.0D, 8, 2452924L, 2450821L),
    "cr_reversed_charge" -> ColumnStats(872086L, 28782798L, 12.0D, 12, 24322.65, 0.00),
    "cr_call_center_sk" -> ColumnStats(54L, 28795269L, 8.0D, 8, 54L, 1L),
    "cr_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "cr_refunded_hdemo_sk" -> ColumnStats(7207L, 28801276L, 8.0D, 8, 7200L, 1L),
    "cr_warehouse_sk" -> ColumnStats(25L, 28780875L, 8.0D, 8, 25L, 1L),
    "cr_returning_cdemo_sk" -> ColumnStats(1913326L, 28795505L, 8.0D, 8, 1920800L, 1L),
    "cr_return_quantity" -> ColumnStats(100L, 28805449L, 8.0D, 8, 100L, 1L),
    "cr_reason_sk" -> ColumnStats(70L, 28793154L, 8.0D, 8, 70L, 1L)))

  val INVENTORY_10000 = TableStats(1311525000L, Map[String, ColumnStats](
    "inv_date_sk" -> ColumnStats(261L, 0L, 8.0D, 8, 2452635L, 2450815L),
    "inv_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "inv_warehouse_sk" -> ColumnStats(25L, 0L, 8.0D, 8, 25L, 1L),
    "inv_quantity_on_hand" -> ColumnStats(1003L, 65575731L, 4.0D, 4, 1000, 0)))

  val STORE_SALES_10000 = TableStats(28799958787L, Map[String, ColumnStats](
    "ss_quantity" -> ColumnStats(100L, 1295960272L, 8.0D, 8, 100L, 1L),
    "ss_wholesale_cost" -> ColumnStats(9872L, 1295935484L, 12.0D, 12, 100.00, 1.00),
    "ss_net_paid" -> ColumnStats(1294500L, 1296009933L, 12.0D, 12, 19972.00, 0.00),
    "ss_net_profit" -> ColumnStats(1522679L, 1295870636L, 12.0D, 12, 9986.00, -10000.00),
    "ss_net_paid_inc_tax" -> ColumnStats(1693546L, 1296052413L, 12.0D, 12, 21769.48, 0.00),
    "ss_sales_price" -> ColumnStats(19720L, 1296024945L, 12.0D, 12, 200.00, 0.00),
    "ss_ticket_number" -> ColumnStats(2362419560L, 0L, 8.0D, 8, 2400000000L, 1L),
    "ss_ext_wholesale_cost" -> ColumnStats(391162L, 1295926585L, 12.0D, 12, 10000.00, 1.00),
    "ss_cdemo_sk" -> ColumnStats(1913326L, 1296054776L, 8.0D, 8, 1920800L, 1L),
    "ss_promo_sk" -> ColumnStats(2014L, 1296009597L, 8.0D, 8, 2000L, 1L),
    "ss_sold_date_sk" -> ColumnStats(1826L, 1296002390L, 8.0D, 8, 2452642L, 2450816L),
    "ss_ext_sales_price" -> ColumnStats(758735L, 1295957144L, 12.0D, 12, 19972.00, 0.00),
    "ss_sold_time_sk" -> ColumnStats(46629L, 1295975849L, 8.0D, 8, 75599L, 28800L),
    "ss_customer_sk" -> ColumnStats(65458058L, 1296067041L, 8.0D, 8, 65000000L, 1L),
    "ss_list_price" -> ColumnStats(19607L, 1296044755L, 12.0D, 12, 200.00, 1.00),
    "ss_store_sk" -> ColumnStats(751L, 1295783849L, 8.0D, 8, 1498L, 1L),
    "ss_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "ss_addr_sk" -> ColumnStats(32471431L, 1295950454L, 8.0D, 8, 32500000L, 1L),
    "ss_ext_discount_amt" -> ColumnStats(1168389L, 1296157480L, 12.0D, 12, 19778.00, 0.00),
    "ss_coupon_amt" -> ColumnStats(1168389L, 1296157480L, 12.0D, 12, 19778.00, 0.00),
    "ss_ext_tax" -> ColumnStats(152233L, 1295967007L, 12.0D, 12, 1797.48, 0.00),
    "ss_hdemo_sk" -> ColumnStats(7207L, 1295943538L, 8.0D, 8, 7200L, 1L),
    "ss_ext_list_price" -> ColumnStats(777225L, 1295946812L, 12.0D, 12, 20000.00, 1.00)))

  val STORE_RETURNS_10000 = TableStats(2880005785L, Map[String, ColumnStats](
    "sr_return_time_sk" -> ColumnStats(32528L, 100780579L, 8.0D, 8, 61199L, 28799L),
    "sr_return_ship_cost" -> ColumnStats(373928L, 100774715L, 12.0D, 12, 9875.25, 0.00),
    "sr_cdemo_sk" -> ColumnStats(1913326L, 100777120L, 8.0D, 8, 1920800L, 1L),
    "sr_store_credit" -> ColumnStats(890311L, 100784015L, 12.0D, 12, 17146.59, 0.00),
    "sr_return_amt_inc_tax" -> ColumnStats(1473954L, 100773989L, 12.0D, 12, 21227.27, 0.00),
    "sr_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "sr_return_quantity" -> ColumnStats(100L, 100775790L, 8.0D, 8, 100L, 1L),
    "sr_net_loss" -> ColumnStats(815932L, 100767691L, 12.0D, 12, 11268.50, 0.50),
    "sr_ticket_number" -> ColumnStats(1655482590L, 0L, 8.0D, 8, 2400000000L, 1L),
    "sr_refunded_cash" -> ColumnStats(1145719L, 100790466L, 12.0D, 12, 19100.32, 0.00),
    "sr_hdemo_sk" -> ColumnStats(7207L, 100784135L, 8.0D, 8, 7200L, 1L),
    "sr_fee" -> ColumnStats(9919L, 100763686L, 12.0D, 12, 100.00, 0.50),
    "sr_addr_sk" -> ColumnStats(32471431L, 100778364L, 8.0D, 8, 32500000L, 1L),
    "sr_returned_date_sk" -> ColumnStats(2007L, 100767446L, 8.0D, 8, 2452822L, 2450820L),
    "sr_store_sk" -> ColumnStats(751L, 100799916L, 8.0D, 8, 1498L, 1L),
    "sr_return_tax" -> ColumnStats(132911L, 100777056L, 12.0D, 12, 1752.71, 0.00),
    "sr_customer_sk" -> ColumnStats(65458058L, 100771010L, 8.0D, 8, 65000000L, 1L),
    "sr_reason_sk" -> ColumnStats(70L, 100769624L, 8.0D, 8, 70L, 1L),
    "sr_reversed_charge" -> ColumnStats(895800L, 100788211L, 12.0D, 12, 17801.28, 0.00),
    "sr_return_amt" -> ColumnStats(731260L, 100789393L, 12.0D, 12, 19693.08, 0.00)))

  val WEB_SALES_10000 = TableStats(7200136866L, Map[String, ColumnStats](
    "ws_ship_mode_sk" -> ColumnStats(20L, 1799715L, 8.0D, 8, 20L, 1L),
    "ws_net_paid_inc_ship" -> ColumnStats(2564007L, 0L, 12.0D, 12, 43956.00, 0.00),
    "ws_coupon_amt" -> ColumnStats(1602712L, 1800423L, 12.0D, 12, 28730.00, 0.00),
    "ws_ext_discount_amt" -> ColumnStats(1112717L, 1798838L, 12.0D, 12, 29982.00, 0.00),
    "ws_order_number" -> ColumnStats(594262524L, 0L, 8.0D, 8, 600000000L, 1L),
    "ws_ext_list_price" -> ColumnStats(1173301L, 1799374L, 12.0D, 12, 30000.00, 1.00),
    "ws_bill_customer_sk" -> ColumnStats(65458058L, 1800743L, 8.0D, 8, 65000000L, 1L),
    "ws_promo_sk" -> ColumnStats(2014L, 1799540L, 8.0D, 8, 2000L, 1L),
    "ws_net_profit" -> ColumnStats(2070422L, 0L, 12.0D, 12, 19962.00, -10000.00),
    "ws_net_paid" -> ColumnStats(1833275L, 1799291L, 12.0D, 12, 29943.00, 0.00),
    "ws_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "ws_net_paid_inc_ship_tax" -> ColumnStats(3364736L, 0L, 12.0D, 12, 46593.36, 0.00),
    "ws_web_page_sk" -> ColumnStats(3978L, 1800936L, 8.0D, 8, 4002L, 1L),
    "ws_warehouse_sk" -> ColumnStats(25L, 1798580L, 8.0D, 8, 25L, 1L),
    "ws_ship_cdemo_sk" -> ColumnStats(1913326L, 1797413L, 8.0D, 8, 1920800L, 1L),
    "ws_sold_date_sk" -> ColumnStats(1826L, 1799855L, 8.0D, 8, 2452642L, 2450816L),
    "ws_list_price" -> ColumnStats(29854L, 1798729L, 12.0D, 12, 300.00, 1.00),
    "ws_sold_time_sk" -> ColumnStats(86180L, 1800801L, 8.0D, 8, 86399L, 0L),
    "ws_ext_ship_cost" -> ColumnStats(570939L, 1800770L, 12.0D, 12, 14994.00, 0.00),
    "ws_quantity" -> ColumnStats(100L, 1798965L, 8.0D, 8, 100L, 1L),
    "ws_ship_hdemo_sk" -> ColumnStats(7207L, 1802469L, 8.0D, 8, 7200L, 1L),
    "ws_ext_tax" -> ColumnStats(220062L, 1801754L, 12.0D, 12, 2673.27, 0.00),
    "ws_sales_price" -> ColumnStats(29675L, 1797995L, 12.0D, 12, 300.00, 0.00),
    "ws_ext_wholesale_cost" -> ColumnStats(391162L, 1799434L, 12.0D, 12, 10000.00, 1.00),
    "ws_bill_cdemo_sk" -> ColumnStats(1913326L, 1800802L, 8.0D, 8, 1920800L, 1L),
    "ws_net_paid_inc_tax" -> ColumnStats(2450808L, 1798385L, 12.0D, 12, 32376.27, 0.00),
    "ws_ship_addr_sk" -> ColumnStats(32471431L, 1798519L, 8.0D, 8, 32500000L, 1L),
    "ws_bill_addr_sk" -> ColumnStats(32471431L, 1800091L, 8.0D, 8, 32500000L, 1L),
    "ws_ship_date_sk" -> ColumnStats(1952L, 1802218L, 8.0D, 8, 2452762L, 2450817L),
    "ws_bill_hdemo_sk" -> ColumnStats(7207L, 1799577L, 8.0D, 8, 7200L, 1L),
    "ws_ship_customer_sk" -> ColumnStats(65458058L, 1800712L, 8.0D, 8, 65000000L, 1L),
    "ws_ext_sales_price" -> ColumnStats(1113512L, 1798649L, 12.0D, 12, 29943.00, 0.00),
    "ws_wholesale_cost" -> ColumnStats(9872L, 1799829L, 12.0D, 12, 100.00, 1.00),
    "ws_web_site_sk" -> ColumnStats(78L, 1799596L, 8.0D, 8, 78L, 1L)))

  val WEB_RETURNS_10000 = TableStats(720003929L, Map[String, ColumnStats](
    "wr_reason_sk" -> ColumnStats(70L, 32406221L, 8.0D, 8, 70L, 1L),
    "wr_fee" -> ColumnStats(9919L, 32399877L, 12.0D, 12, 100.00, 0.50),
    "wr_return_amt" -> ColumnStats(1024763L, 32405805L, 12.0D, 12, 29355.00, 0.00),
    "wr_returning_addr_sk" -> ColumnStats(32471431L, 32406725L, 8.0D, 8, 32500000L, 1L),
    "wr_returned_time_sk" -> ColumnStats(86180L, 32395325L, 8.0D, 8, 86399L, 0L),
    "wr_returning_cdemo_sk" -> ColumnStats(1913326L, 32401819L, 8.0D, 8, 1920800L, 1L),
    "wr_web_page_sk" -> ColumnStats(3978L, 32404528L, 8.0D, 8, 4002L, 1L),
    "wr_return_tax" -> ColumnStats(179385L, 32403044L, 12.0D, 12, 2604.85, 0.00),
    "wr_refunded_customer_sk" -> ColumnStats(65458058L, 32407917L, 8.0D, 8, 65000000L, 1L),
    "wr_return_ship_cost" -> ColumnStats(533775L, 32405782L, 12.0D, 12, 14971.00, 0.00),
    "wr_refunded_hdemo_sk" -> ColumnStats(7207L, 32404587L, 8.0D, 8, 7200L, 1L),
    "wr_account_credit" -> ColumnStats(1084020L, 32400833L, 12.0D, 12, 26470.06, 0.00),
    "wr_returned_date_sk" -> ColumnStats(2193L, 32402803L, 8.0D, 8, 2453002L, 2450819L),
    "wr_reversed_charge" -> ColumnStats(1095200L, 32408196L, 12.0D, 12, 26277.43, 0.00),
    "wr_order_number" -> ColumnStats(424271597L, 0L, 8.0D, 8, 600000000L, 1L),
    "wr_returning_customer_sk" -> ColumnStats(65458058L, 32415717L, 8.0D, 8, 65000000L, 1L),
    "wr_return_amt_inc_tax" -> ColumnStats(1943894L, 32407181L, 12.0D, 12, 31703.40, 0.00),
    "wr_returning_hdemo_sk" -> ColumnStats(7207L, 32404181L, 8.0D, 8, 7200L, 1L),
    "wr_item_sk" -> ColumnStats(399515L, 0L, 8.0D, 8, 402000L, 1L),
    "wr_return_quantity" -> ColumnStats(100L, 32401743L, 8.0D, 8, 100L, 1L),
    "wr_refunded_cash" -> ColumnStats(1443995L, 32397755L, 12.0D, 12, 27341.21, 0.00),
    "wr_refunded_addr_sk" -> ColumnStats(32471431L, 32406907L, 8.0D, 8, 32500000L, 1L),
    "wr_refunded_cdemo_sk" -> ColumnStats(1913326L, 32398503L, 8.0D, 8, 1920800L, 1L),
    "wr_net_loss" -> ColumnStats(1091792L, 32410873L, 12.0D, 12, 16518.41, 0.50)))

  val CALL_CENTER_10000 = TableStats(54L, Map[String, ColumnStats](
    "cc_street_number" -> ColumnStats(28L, 0L, 2.9074074074074074D, 3, "960", ""),
    "cc_call_center_id" -> ColumnStats(1L, 0L, 16.0D, 16, "AAAAAAAAPBAAAAAA", "AAAAAAAAABAAAAAA"),
    "cc_state" -> ColumnStats(19L, 0L, 1.962962962962963D, 2, "WV", ""),
    "cc_tax_percentage" -> ColumnStats(12L, 0L, 12.0D, 12, 0.11, 0.00),
    "cc_division_name" -> ColumnStats(7L, 0L, 3.7777777777777777D, 5, "pri", ""),
    "cc_hours" -> ColumnStats(3L, 0L, 7.277777777777778D, 8, "8AM-8AM", "8AM-12AM"),
    "cc_manager" -> ColumnStats(39L, 0L, 13.11111111111111D, 17, "Willie Miller",
      "Anthony Cervantes"),
    "cc_name" -> ColumnStats(28L, 0L, 13.5D, 19, "Pacific Northwest_3", ""),
    "cc_employees" -> ColumnStats(42L, 1L, 8.0D, 8, 677273500L, 14320722L),
    "cc_mkt_id" -> ColumnStats(6L, 0L, 8.0D, 8, 6L, 1L),
    "cc_class" -> ColumnStats(3L, 0L, 5.296296296296297D, 6, "small", "large"),
    "cc_division" -> ColumnStats(6L, 1L, 8.0D, 8, 6L, 1L),
    "cc_street_name" -> ColumnStats(24L, 0L, 7.944444444444445D, 15, "View ", ""),
    "cc_rec_end_date" -> ColumnStats(3L, 27L, 12.0D, 12, Date.valueOf("2001-12-30"),
      Date.valueOf("1999-12-31")),
    "cc_gmt_offset" -> ColumnStats(2L, 1L, 12.0D, 12, -5.00, -6.00),
    "cc_market_manager" -> ColumnStats(36L, 0L, 12.203703703703704D, 16, "Steven Santiago", ""),
    "cc_open_date_sk" -> ColumnStats(25L, 0L, 8.0D, 8, 2451138L, 2450820L),
    "cc_country" -> ColumnStats(2L, 0L, 12.75925925925926D, 13, "United States", ""),
    "cc_closed_date_sk" -> ColumnStats(0L, 54L, 8.0D, 8, null, null),
    "cc_company_name" -> ColumnStats(6L, 0L, 3.9814814814814814D, 5, "pri", "able"),
    "cc_city" -> ColumnStats(17L, 0L, 9.462962962962964D, 14, "Woodlawn", ""),
    "cc_company" -> ColumnStats(6L, 1L, 8.0D, 8, 6L, 1L),
    "cc_county" -> ColumnStats(9L, 0L, 13.12962962962963D, 17, "Ziebach County", ""),
    "cc_rec_start_date" -> ColumnStats(4L, 1L, 12.0D, 12, Date.valueOf("2001-12-31"),
      Date.valueOf("1997-12-31")),
    "cc_street_type" -> ColumnStats(16L, 0L, 4.407407407407407D, 9, "Wy", ""),
    "cc_sq_ft" -> ColumnStats(42L, 0L, 8.0D, 8, 1932513328L, -2084068135L),
    "cc_mkt_class" -> ColumnStats(40L, 0L, 33.55555555555556D, 50,
      "Yellow, large patients shall get even fiscal ", ""),
    "cc_zip" -> ColumnStats(27L, 0L, 4.907407407407407D, 5, "79843", ""),
    "cc_mkt_desc" -> ColumnStats(35L, 0L, 57.648148148148145D, 95,
      "Young, anxious relations cast wide, nuclear honours. " +
          "Following services may not support also by", "Addresses should find for exam"),
    "cc_suite_number" -> ColumnStats(16L, 0L, 7.62962962962963D, 9, "Suite Y", ""),
    "cc_call_center_sk" -> ColumnStats(54L, 0L, 8.0D, 8, 54L, 1L)))

  val CATALOG_PAGE_10000 = TableStats(40000L, Map[String, ColumnStats](
    "cp_department" -> ColumnStats(2L, 0L, 9.89625D, 10, "DEPARTMENT", ""),
    "cp_catalog_page_number" -> ColumnStats(371L, 402L, 8.0D, 8, 370L, 1L),
    "cp_catalog_page_sk" -> ColumnStats(40049L, 0L, 8.0D, 8, 40000L, 1L),
    "cp_end_date_sk" -> ColumnStats(96L, 378L, 8.0D, 8, 2453186L, 2450844L),
    "cp_catalog_page_id" -> ColumnStats(21L, 0L, 16.0D, 16, "AAAAAAAAPPPIAAAA", "AAAAAAAAAAABAAAA"),
    "cp_description" -> ColumnStats(39052L, 0L, 73.8556D, 99,
      "Youngsters would pick only wonderfully concerned knees; silent powers used to say. O", ""),
    "cp_type" -> ColumnStats(4L, 0L, 7.58835D, 9, "quarterly", ""),
    "cp_start_date_sk" -> ColumnStats(91L, 412L, 8.0D, 8, 2453005L, 2450815L),
    "cp_catalog_number" -> ColumnStats(109L, 407L, 8.0D, 8, 109L, 1L)))

  val CUSTOMER_10000 = TableStats(65000000L, Map[String, ColumnStats](
    "c_email_address" -> ColumnStats(16269134L, 0L, 26.505820076923076D, 48,
      "Zulma.Yount@VQgXsKztmfU.com", ""),
    "c_birth_month" -> ColumnStats(12L, 2272636L, 8.0D, 8, 12L, 1L),
    "c_first_sales_date_sk" -> ColumnStats(3623L, 2274755L, 8.0D, 8, 2452648L, 2448998L),
    "c_customer_id" -> ColumnStats(31301L, 0L, 16.0D, 16, "AAAAAAAAPPPPPPCA", "AAAAAAAAAAAAAABA"),
    "c_birth_country" -> ColumnStats(208L, 0L, 8.378686446153846D, 20, "ZIMBABWE", ""),
    "c_salutation" -> ColumnStats(7L, 0L, 3.1287239846153847D, 4, "Sir", ""),
    "c_last_name" -> ColumnStats(5005L, 0L, 5.9160765692307695D, 13, "Zuniga", ""),
    "c_birth_day" -> ColumnStats(31L, 2276451L, 8.0D, 8, 31L, 1L),
    "c_current_cdemo_sk" -> ColumnStats(1913326L, 2274537L, 8.0D, 8, 1920800L, 1L),
    "c_login" -> ColumnStats(1L, 0L, 0.0D, 0, "", ""),
    "c_last_review_date" -> ColumnStats(365L, 2274908L, 8.0D, 8, 2452648L, 2452283L),
    "c_first_shipto_date_sk" -> ColumnStats(3624L, 2275880L, 8.0D, 8, 2452678L, 2449028L),
    "c_current_addr_sk" -> ColumnStats(28144659L, 0L, 8.0D, 8, 32500000L, 1L),
    "c_birth_year" -> ColumnStats(69L, 2275423L, 8.0D, 8, 1992L, 1924L),
    "c_preferred_cust_flag" -> ColumnStats(3L, 0L, 0.9650081384615384D, 1, "Y", ""),
    "c_current_hdemo_sk" -> ColumnStats(7207L, 2275425L, 8.0D, 8, 7200L, 1L),
    "c_customer_sk" -> ColumnStats(65458058L, 0L, 8.0D, 8, 65000000L, 1L),
    "c_first_name" -> ColumnStats(5179L, 0L, 5.631755507692308D, 11, "Zulma", "")))

  val statsMap: Map[String, Map[Int, TableStats]] = Map(
    "catalog_sales" -> Map(1000 -> CATALOG_SALES_1000, 10000 -> CATALOG_SALES_10000),
    "catalog_returns" -> Map(1000 -> CATALOG_RETURNS_1000, 10000 -> CATALOG_RETURNS_10000),
    "inventory" -> Map(1000 -> INVENTORY_1000, 10000 -> INVENTORY_10000),
    "store_sales" -> Map(1000 -> STORE_SALES_1000, 10000 -> STORE_SALES_10000),
    "store_returns" -> Map(1000 -> STORE_RETURNS_1000, 10000 -> STORE_RETURNS_10000),
    "web_sales" -> Map(1000 -> WEB_SALES_1000, 10000 -> WEB_SALES_10000),
    "web_returns" -> Map(1000 -> WEB_RETURNS_1000, 10000 -> WEB_RETURNS_10000),
    "call_center" -> Map(1000 -> CALL_CENTER_1000, 10000 -> CALL_CENTER_10000),

    "catalog_page" -> Map(1000 -> CATALOG_PAGE_1000, 10000 -> CATALOG_PAGE_10000),
    "customer" -> Map(1000 -> CUSTOMER_1000, 10000 -> CUSTOMER_10000),
    "customer_address" -> Map(1000 -> CUSTOMER_ADDRESS_1000, 10000 -> CUSTOMER_ADDRESS_10000),
    "customer_demographics" ->
        Map(1000 -> CUSTOMER_DEMOGRAPHICS_1000, 10000 -> CUSTOMER_DEMOGRAPHICS_10000),
    "date_dim" -> Map(1000 -> DATE_DIM_1000, 10000 -> DATE_DIM_10000),
    "household_demographics" ->
        Map(1000 -> HOUSEHOLD_DEMOGRAPHICS_1000, 10000 -> HOUSEHOLD_DEMOGRAPHICS_10000),
    "income_band" -> Map(1000 -> INCOME_BAND_1000, 10000 -> INCOME_BAND_10000),
    "item" -> Map(1000 -> ITEM_1000, 10000 -> ITEM_10000),

    "promotion" -> Map(1000 -> PROMOTION_1000, 10000 -> PROMOTION_10000),
    "reason" -> Map(1000 -> REASON_1000, 10000 -> REASON_10000),
    "ship_mode" -> Map(1000 -> SHIP_MODE_1000, 10000 -> SHIP_MODE_10000),
    "store" -> Map(1000 -> STORE_1000, 10000 -> STORE_10000),
    "time_dim" -> Map(1000 -> TIME_DIM_1000, 10000 -> TIME_DIM_10000),
    "warehouse" -> Map(1000 -> WAREHOUSE_1000, 10000 -> WAREHOUSE_10000),
    "web_page" -> Map(1000 -> WEB_PAGE_1000, 10000 -> WEB_PAGE_10000),
    "web_site" -> Map(1000 -> WEB_SITE_1000, 10000 -> WEB_SITE_10000)
  )

  def getTableStatsMap(factor: Int, statsMode: STATS_MODE): Map[String, TableStats] = {
    statsMap.map {
      case (k, v) =>
        val newTableStats = v.get(factor) match {
          case Some(tableStats) =>
            statsMode match {
              case STATS_MODE.FULL => tableStats
              case STATS_MODE.PART => getPartTableStats(tableStats)
              case STATS_MODE.ROW_COUNT => TableStats(tableStats.rowCount)
            }
          case _ => throw new IllegalArgumentException(
            s"Can not find TableStats for table:$k with factor: $factor!")
        }
        (k, newTableStats)
    }
  }

  private def getPartTableStats(tableStats: TableStats): TableStats = {
    val partColStats = tableStats.colStats.map {
      case (k, v) =>
        // Parquet metadata only includes nullCount, max, min
        val newColumnStats = ColumnStats(
          ndv = null,
          nullCount = v.nullCount,
          avgLen = null,
          maxLen = null,
          max = v.max,
          min = v.min)
        (k, newColumnStats)
    }
    TableStats(tableStats.rowCount, partColStats)
  }
}
